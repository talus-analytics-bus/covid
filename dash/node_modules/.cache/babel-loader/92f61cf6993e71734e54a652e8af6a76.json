{"ast":null,"code":"const initMap = (map, fillObservations, bubbleObservations) => {\n  map.on('load', function () {\n    initGeoms(fillObservations, bubbleObservations);\n  });\n\n  const initGeoms = (fillObservations, bubbleObservations) => {\n    if (!map.getSource('geoms')) map.addSource('geoms', {\n      type: 'vector',\n      url: 'mapbox://traethethird.4kh7sxxt'\n    });\n    if (!map.getSource('centroids')) map.addSource('centroids', {\n      type: 'vector',\n      url: 'mapbox://traethethird.5u7sntcb'\n    });\n    console.log(bubbleObservations);\n    fillObservations.forEach(observation => {\n      const value = observation['value'];\n      const place_id = observation['place_id'];\n\n      if (place_id === 16) {\n        console.log(observation);\n      }\n\n      map.setFeatureState({\n        source: 'geoms',\n        sourceLayer: 'countries_id-3n17an',\n        id: place_id\n      }, {\n        clicked: false\n      });\n\n      if (!value) {\n        map.setFeatureState({\n          source: 'geoms',\n          sourceLayer: 'countries_id-3n17an',\n          id: place_id\n        }, {\n          value: 0\n        });\n      } else {\n        //const state = { value: Math.floor(256 * value)};\n        const state = {\n          value: value / 100\n        };\n        map.setFeatureState({\n          source: 'geoms',\n          sourceLayer: 'countries_id-3n17an',\n          id: place_id\n        }, state);\n      }\n    });\n    console.log(map.getStyle().layers);\n    map.addLayer({\n      id: 'geom-fills',\n      type: 'fill',\n      source: 'geoms',\n      'source-layer': 'countries_id-3n17an',\n      paint: {\n        'fill-color': ['step', [\"feature-state\", \"value\"], '#d3d3d3', 0, '#d6fob2', 0.35, '#b9d7a8', 0.5, '#7fcdbb', 0.65, '#41b6c4', 0.8, '#2c7fb8', 0.95, '#303d91'],\n        'fill-opacity': 0.9\n      }\n    }, \"country-small\");\n    map.addLayer({\n      id: 'geom-line',\n      type: 'line',\n      source: 'geoms',\n      'source-layer': 'countries_id-3n17an',\n      paint: {\n        'line-color': ['case', ['boolean', ['feature-state', 'clicked'], true], '#ffffff', '#d3d3d3'],\n        'line-width': ['case', ['boolean', ['feature-state', 'clicked'], true], 5, 1]\n      }\n    }, \"country-small\");\n    bubbleObservations.forEach(observation => {\n      const value = observation['value'];\n      const place_id = observation['place_id'];\n      map.setFeatureState({\n        source: 'geoms',\n        sourceLayer: 'countries_id-3n17an',\n        id: place_id\n      }, {\n        clicked: false\n      });\n\n      if (!value) {\n        map.setFeatureState({\n          source: 'centroids',\n          sourceLayer: 'country_centroids-buzq3b',\n          id: place_id\n        }, {\n          value: 0\n        });\n      } else {\n        //const state = { value: Math.floor(256 * value)};\n        const state = {\n          value: value / 10\n        };\n        map.setFeatureState({\n          source: 'centroids',\n          sourceLayer: 'country_centroids-buzq3b',\n          id: place_id\n        }, state);\n      }\n    });\n    map.addLayer({\n      'id': 'population',\n      'type': 'circle',\n      'source': 'centroids',\n      'source-layer': 'country_centroids-buzq3b',\n      'paint': {\n        'circle-radius': [\"feature-state\", \"value\"],\n        'circle-color': '#ff0000',\n        'circle-opacity': 0.4,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffffff'\n      }\n    }, \"country-small\");\n  };\n};\n\nexport default initMap;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/map/mapUtils.js"],"names":["initMap","map","fillObservations","bubbleObservations","on","initGeoms","getSource","addSource","type","url","console","log","forEach","observation","value","place_id","setFeatureState","source","sourceLayer","id","clicked","state","getStyle","layers","addLayer","paint"],"mappings":"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","sourcesContent":["const initMap = (map, fillObservations, bubbleObservations) => {\n\n  map.on('load', function() {\n    initGeoms(fillObservations, bubbleObservations)\n  })\n\n  const initGeoms = (fillObservations, bubbleObservations) => {\n    if (!map.getSource('geoms'))\n      map.addSource('geoms', {\n        type: 'vector',\n        url: 'mapbox://traethethird.4kh7sxxt'\n      })\n\n    if (!map.getSource('centroids'))\n      map.addSource('centroids', {\n        type: 'vector',\n        url: 'mapbox://traethethird.5u7sntcb'\n      })\n\n    console.log(bubbleObservations)\n\n    fillObservations.forEach(( observation) => {\n      const value = observation['value'];\n      const place_id = observation['place_id']\n      if (place_id === 16) {\n        console.log(observation)\n      }\n\n      map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: place_id }, {clicked: false});\n      if (!value) {\n        map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: place_id }, {value: 0});\n      } else {\n        //const state = { value: Math.floor(256 * value)};\n        const state = { value: value / 100};\n        map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: place_id }, state);\n      }\n    });\n\n    console.log(map.getStyle().layers)\n\n    map.addLayer({\n      id: 'geom-fills',\n      type: 'fill',\n      source: 'geoms',\n      'source-layer': 'countries_id-3n17an',\n      paint: {\n        'fill-color': [\n          'step',\n          [\"feature-state\", \"value\"],\n              '#d3d3d3',\n              0, '#d6fob2',\n              0.35, '#b9d7a8',\n              0.5, '#7fcdbb',\n              0.65, '#41b6c4',\n              0.8, '#2c7fb8',\n              0.95, '#303d91'\n        ],\n        'fill-opacity': 0.9,\n      }\n    }, \"country-small\");\n\n    map.addLayer({\n      id: 'geom-line',\n      type: 'line',\n      source: 'geoms',\n      'source-layer': 'countries_id-3n17an',\n      paint: {\n        'line-color': [\n          'case',\n          ['boolean', ['feature-state', 'clicked'], true], '#ffffff',\n          '#d3d3d3'\n        ],\n        'line-width': [\n          'case',\n            ['boolean', ['feature-state', 'clicked'], true], 5,\n            1\n          ],\n      }\n    }, \"country-small\");\n\n    bubbleObservations.forEach(( observation) => {\n      const value = observation['value'];\n      const place_id = observation['place_id']\n      map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: place_id }, {clicked: false});\n\n      if (!value) {\n        map.setFeatureState({source: 'centroids', sourceLayer: 'country_centroids-buzq3b', id: place_id }, {value: 0});\n      } else {\n        //const state = { value: Math.floor(256 * value)};\n        const state = { value: value / 10};\n        map.setFeatureState({source: 'centroids', sourceLayer: 'country_centroids-buzq3b', id: place_id }, state);\n      }\n    });\n\n    map.addLayer({\n      'id': 'population',\n      'type': 'circle',\n      'source': 'centroids',\n      'source-layer': 'country_centroids-buzq3b',\n      'paint': {\n        'circle-radius': [\"feature-state\", \"value\"],\n        'circle-color': '#ff0000',\n        'circle-opacity': 0.4,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffffff'\n      }\n    }, \"country-small\");\n  }\n}\n\nexport default initMap\n"]},"metadata":{},"sourceType":"module"}