{"ast":null,"code":"import _objectSpread from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/views/submit/Submit.js\";\nimport React from 'react';\nimport styles from './submit.module.scss';\nimport Find from './find/Find.js';\nimport DefineAlerts from './defineAlerts/DefineAlerts.js';\nimport EffectiveTime from './effectiveTime/EffectiveTime.js'; // Other libraries\n\nimport axios from 'axios';\nimport Util from '../../../components/misc/Util.js'; // Icons\n\nimport mechanical from \"../../../assets/images/mechanical/mechanical.svg\"; // Constants\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // JSX for submit page.\n\nconst Submit = ({\n  action,\n  facilities,\n  facility_id,\n  defaultCurFacilityAlerts\n}) => {\n  // Define data for each alert selection area.\n  const alertSelections = [{\n    title: 'Power status',\n    slug: 'power',\n    iconPath: mechanical,\n    footnoteText: '*Clears prior alerts for operating on generator power',\n    styleOptions: {},\n    optionSet: [{\n      name: 'Normal utility power*',\n      dataname: 'normal operations (utility power)',\n      apiname: 'NORMAL',\n      iconPath: mechanical\n    }, {\n      name: 'On generator',\n      dataname: 'on generator power',\n      apiname: 'GENERATOR',\n      iconPath: mechanical\n    }, {\n      name: 'Totally without power',\n      dataname: 'totally without power',\n      apiname: 'NONE',\n      iconPath: mechanical\n    }]\n  }, {\n    title: 'Patient evacuation status',\n    slug: 'evacuation',\n    iconPath: mechanical,\n    styleOptions: {},\n    optionSet: [{\n      name: 'Not applicable',\n      dataname: 'not evacuated',\n      // TODO confirm\n      apiname: 'NORMAL',\n      iconPath: mechanical\n    }, {\n      name: 'Evacuation support needed',\n      dataname: 'need evacuation support',\n      apiname: 'SUPPORT',\n      iconPath: mechanical\n    }, {\n      name: 'Evacuation completed',\n      dataname: 'evacuation completed',\n      apiname: 'COMPLETED',\n      iconPath: mechanical\n    }]\n  }, {\n    title: 'Time on generator',\n    slug: 'generator_time',\n    iconPath: mechanical,\n    styleOptions: {},\n    prerequisite: {\n      slug: 'power',\n      values: ['On generator', 'on generator power', 'GENERATOR']\n    },\n    optionSet: [{\n      name: 'Less than 24 hours on generator power',\n      dataname: 'less than 24 hours on generator power',\n      apiname: 'UNDER24',\n      iconPath: mechanical\n    }, {\n      name: '24 or more hours on generator power',\n      dataname: '24 or more hours on generator power',\n      apiname: 'OVER24',\n      iconPath: mechanical\n    }, {\n      name: '72 or more hours on generator power',\n      dataname: '72 or more hours on generator power',\n      apiname: 'OVER72',\n      iconPath: mechanical\n    }]\n  }, {\n    title: 'Generator mechanical status',\n    slug: 'mechanical',\n    footnoteText: '*Clears prior generator mechanical alerts',\n    iconPath: mechanical,\n    styleOptions: {},\n    prerequisite: {\n      slug: 'power',\n      values: ['On generator', 'on generator power', 'GENERATOR']\n    },\n    optionSet: [{\n      name: 'Normal*',\n      dataname: 'normal (mechanical)',\n      apiname: 'NORMAL',\n      iconPath: mechanical\n    }, {\n      name: 'Mechanical issue or fault',\n      apiname: 'ISSUE',\n      dataname: 'mechanical issue reported',\n      // TODO\n      iconPath: mechanical\n    }]\n  }, {\n    title: 'Generator fuel status',\n    slug: 'fuel',\n    footnoteText: '*Clears prior fuel supply alerts',\n    iconPath: mechanical,\n    styleOptions: {\n      wide: true\n    },\n    prerequisite: {\n      slug: 'power',\n      values: ['On generator', 'on generator power', 'GENERATOR']\n    },\n    optionSet: [{\n      name: 'Normal*',\n      dataname: 'normal (fuel)',\n      apiname: 'NORMAL',\n      iconPath: mechanical\n    }, {\n      name: 'Fuel low',\n      dataname: 'low fuel (<48 hours remaining)',\n      apiname: 'LOW',\n      iconPath: mechanical\n    }, {\n      name: 'Fuel critically low',\n      dataname: 'very low fuel (<24 hours remaining)',\n      apiname: 'CRITICAL',\n      iconPath: mechanical\n    }, {\n      name: 'No fuel',\n      dataname: 'no fuel',\n      apiname: 'NONE',\n      iconPath: mechanical\n    }]\n  }]; // Manage loading state (don't show if loading, etc.)\n\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loading = _React$useState2[0],\n        setLoading = _React$useState2[1]; // Function to make API calls to get data for the four state variables above.\n\n\n  const getDetailsData = async () => {\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const alertsUrl = DEMO_DATE !== undefined ? \"\".concat(API_BASE, \"/facilities/\").concat(facility_id, \"/alerts?date=\").concat(DEMO_DATE) : \"\".concat(API_BASE, \"/facilities/\").concat(facility_id, \"/alerts\");\n    const res3 = await axios(alertsUrl); // Update the state variables with the response data.\n\n    const sortedAlerts = res3.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime); // Setting cur facility\n    // setCurFacilityAlerts(sortedAlerts);\n\n    const alertSelectionSlugs = alertSelections.map(a => a.slug);\n    /**\n     * Returns in the initial DefineAlerts input parameter data for the selected\n     * facility. If the action is report, then these will always be blank. If it\n     * is update, these will always be the current active alerts of each type.\n     * @method getDefineAlertsInputs\n     * @param  {object}   selectedFacility The current selected facility\n     *                    (if applicable).\n     * @return {object}   Initial parameters object for DefineAlerts step.\n     */\n\n    const getDefineAlertsInputs = (selectedFacility, curFacilityAlerts) => {\n      // Define object to hold selections by title.\n      const alertSelectionsState = {};\n      alertSelectionSlugs.forEach(a => alertSelectionsState[a] = undefined); // If there is a currently selected facility, then use it.\n\n      if (action === 'update' && curFacilityAlerts !== undefined) {\n        alertSelectionsState.evacuation = 'Not applicable'; // TODO elegantly\n        // for each selection type, find the current value and store it if it is\n        // present.\n\n        console.log('curFacilityAlerts');\n        console.log(curFacilityAlerts);\n        alertSelectionSlugs.forEach(slug => {\n          const alertSystem = slug === 'generator_time' ? 'time' : slug;\n          const curSelection = curFacilityAlerts.find(c => c.system === alertSystem);\n\n          if (curSelection) {\n            const option = alertSelections.find(a => a.slug === slug).optionSet;\n            const optionSetChoice = option.find(o => o.dataname === curSelection.description);\n            alertSelectionsState[slug] = optionSetChoice.apiname;\n          }\n\n          ;\n        });\n        return alertSelectionsState;\n      } // Otherwise, return a blank placeholder to be filled in through input\n      // form selections by the user.\n      else return alertSelectionsState;\n    }; // Get the initial \"defineAlertsInputs\" parameters.\n\n\n    const initialDefineAlertsInputs = getDefineAlertsInputs(selectedFacility, sortedAlerts);\n    setDefineAlertsInputs(initialDefineAlertsInputs); // Set state to loaded so JSX renders.\n\n    setLoading(false);\n  }; // Set title based on action being performed.\n\n\n  const title = action === 'report' ? 'Report a new facility status alert' : 'Update facility status'; // If a facility has been specified, retrieve it from the data\n\n  let defaultFacility = null;\n\n  if (facility_id) {\n    defaultFacility = facilities.find(f => f.facility_id === +facility_id);\n  } // State variables for selected facility.\n\n\n  const _React$useState3 = React.useState(defaultFacility),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedFacility = _React$useState4[0],\n        setSelectedFacility = _React$useState4[1];\n\n  const handleSubmitData = () => {\n    const submitData = async (findInputs, defineAlertsInputs, effectiveTimeInputs, API_BASE) => {\n      const formatAlertPostData = (findInputs, defineAlertsInputs, effectiveTimeInputs) => {\n        const postAlerts = {};\n\n        for (let key in defineAlertsInputs) {\n          if (defineAlertsInputs[key] !== 'n/a') {\n            postAlerts[key] = defineAlertsInputs[key];\n          }\n        }\n\n        return _objectSpread({}, postAlerts, {\n          facility_id: findInputs.facility.facility_id,\n          submitted_dtm: Util.formatDatetimeApi(new Date()),\n          effective_dtm: Util.formatDatetimeApi(effectiveTimeInputs.effectiveDtm).replace('2018', '2030'),\n          submitted_by: 'hospital_employee',\n          // TODO Confirm\n          details: effectiveTimeInputs.statusDescription // details_type: undefined, // TODO\n\n        });\n      };\n\n      const postBody = formatAlertPostData(findInputs, defineAlertsInputs, effectiveTimeInputs);\n      const postUrl = \"\".concat(API_BASE, \"/facilities/submission/alert\");\n      const postRes = await axios.post(postUrl, null, {\n        params: postBody\n      });\n    };\n\n    submitData(findInputs, defineAlertsInputs, effectiveTimeInputs, API_BASE);\n  };\n  /**\n   * Define initial state for the \"Find\" step's inputs, including the 2-char.\n   * postal code of the facility's state, its type (hospital, dialysis, or\n   * nursing), and the datum of the facility itself from the API response.\n   * @method getFindInputs\n   * @param  {object}       selectedFacility If applicable, the currently\n   *                        selected facility.\n   * @return {[type}        Initial parameters object for findInputs state\n   */\n\n\n  const getFindInputs = selectedFacility => {\n    // If there is a currently selected facility, then use it.\n    if (selectedFacility !== null) return {\n      state_abbr: selectedFacility.state,\n      // \"AL\"\n      type: selectedFacility.type,\n      // \"Hospital\"\n      facility: selectedFacility // Facility data obj. from API response\n\n    }; // Otherwise, return a blank placeholder to be filled in through input\n    // form selections by the user.\n    else return {\n        state_abbr: undefined,\n        type: undefined,\n        facility: {}\n      };\n  }; // Get the initial \"findInputs\" parameters.\n\n\n  const initialFindInputs = getFindInputs(selectedFacility); // Define the findInputs state variable and setter.\n\n  const _React$useState5 = React.useState(initialFindInputs),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        findInputs = _React$useState6[0],\n        setFindInputs = _React$useState6[1]; // Define alerts inputs.\n\n\n  const _React$useState7 = React.useState({\n    power: undefined,\n    generator_time: undefined,\n    mechanical: undefined,\n    fuel: undefined,\n    evacuation: undefined\n  }),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        defineAlertsInputs = _React$useState8[0],\n        setDefineAlertsInputs = _React$useState8[1];\n\n  const checkDefineAlertsComplete = defineAlertsInputs => {\n    return Object.values(defineAlertsInputs).filter(d => d === undefined).length === 0;\n  };\n\n  const defineAlertsComplete = checkDefineAlertsComplete(defineAlertsInputs);\n\n  const getEffectiveTimeInputs = () => {\n    // If demo date exists, make that today\n    // Set time to the current time of day roundest to most recent 5 mins\n    // Status update is always blank by default\n    return {\n      effectiveDtm: now,\n      statusDescription: ''\n    };\n  }; // Get initial effective time inputs\n  // const initialEffectiveTimeInputs = {};\n\n\n  const initialEffectiveTimeInputs = getEffectiveTimeInputs(); // Define effective time inputs and state controller\n\n  const _React$useState9 = React.useState(initialEffectiveTimeInputs),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        effectiveTimeInputs = _React$useState10[0],\n        setEffectiveTimeInputs = _React$useState10[1]; // Effect hook to load API data.\n\n\n  React.useEffect(() => {\n    if (action === 'update' && facility_id !== undefined) getDetailsData();else setLoading(false);\n  }, []); // If loading, stop here and return nothing.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377\n    },\n    __self: this\n  }); // Define step number counter.\n\n  let stepNum = 1; // Hide Find step if updating and facility ID already defined, othewise show.\n\n  const hideFind = action === 'update' && defaultFacility !== null;\n  return React.createElement(\"div\", {\n    className: styles.submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, title), !hideFind && React.createElement(Find, {\n    stepNum: stepNum++,\n    findInputs: findInputs,\n    setFindInputs: setFindInputs,\n    facilities: facilities,\n    selectedFacility: selectedFacility,\n    setSelectedFacility: setSelectedFacility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }), React.createElement(DefineAlerts, {\n    stepNum: stepNum++,\n    action: action,\n    findInputs: findInputs,\n    setFindInputs: setFindInputs,\n    facilities: facilities,\n    selectedFacility: selectedFacility,\n    setSelectedFacility: setSelectedFacility,\n    alertSelections: alertSelections,\n    defineAlertsComplete: defineAlertsComplete,\n    defineAlertsInputs: defineAlertsInputs,\n    setDefineAlertsInputs: setDefineAlertsInputs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396\n    },\n    __self: this\n  }), React.createElement(EffectiveTime, {\n    stepNum: stepNum++,\n    findInputs: findInputs,\n    defineAlertsInputs: defineAlertsInputs,\n    effectiveTimeInputs: effectiveTimeInputs,\n    setEffectiveTimeInputs: setEffectiveTimeInputs,\n    defineAlertsComplete: defineAlertsComplete,\n    handleSubmitData: handleSubmitData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409\n    },\n    __self: this\n  }));\n};\n\nexport default Submit;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/views/submit/Submit.js"],"names":["React","styles","Find","DefineAlerts","EffectiveTime","axios","Util","API_BASE","process","env","REACT_APP_API_BASE_URL","DEMO_DATE","now","undefined","Date","Submit","action","facilities","facility_id","defaultCurFacilityAlerts","alertSelections","title","slug","iconPath","mechanical","footnoteText","styleOptions","optionSet","name","dataname","apiname","prerequisite","values","wide","useState","loading","setLoading","getDetailsData","alertsUrl","res3","sortedAlerts","data","sort","sortByAlertId","sortByDatetime","alertSelectionSlugs","map","a","getDefineAlertsInputs","selectedFacility","curFacilityAlerts","alertSelectionsState","forEach","evacuation","console","log","alertSystem","curSelection","find","c","system","option","optionSetChoice","o","description","initialDefineAlertsInputs","setDefineAlertsInputs","defaultFacility","f","setSelectedFacility","handleSubmitData","submitData","findInputs","defineAlertsInputs","effectiveTimeInputs","formatAlertPostData","postAlerts","key","facility","submitted_dtm","formatDatetimeApi","effective_dtm","effectiveDtm","replace","submitted_by","details","statusDescription","postBody","postUrl","postRes","post","params","getFindInputs","state_abbr","state","type","initialFindInputs","setFindInputs","power","generator_time","fuel","checkDefineAlertsComplete","Object","filter","d","length","defineAlertsComplete","getEffectiveTimeInputs","initialEffectiveTimeInputs","setEffectiveTimeInputs","useEffect","stepNum","hideFind","submit"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styles from './submit.module.scss'\nimport Find from './find/Find.js'\nimport DefineAlerts from './defineAlerts/DefineAlerts.js'\nimport EffectiveTime from './effectiveTime/EffectiveTime.js'\n\n// Other libraries\nimport axios from 'axios'\nimport Util from '../../../components/misc/Util.js'\n\n// Icons\nimport mechanical from '../../../assets/images/mechanical/mechanical.svg';\n\n// Constants\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n// JSX for submit page.\nconst Submit = ({\n  action,\n  facilities,\n  facility_id,\n  defaultCurFacilityAlerts}) => {\n\n  // Define data for each alert selection area.\n  const alertSelections = [\n      {\n        title: 'Power status',\n        slug: 'power',\n        iconPath: mechanical,\n        footnoteText: '*Clears prior alerts for operating on generator power',\n        styleOptions: {},\n        optionSet: [\n          {\n            name: 'Normal utility power*',\n            dataname: 'normal operations (utility power)',\n            apiname: 'NORMAL',\n            iconPath: mechanical,\n          },\n          {\n            name: 'On generator',\n            dataname: 'on generator power',\n            apiname: 'GENERATOR',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Totally without power',\n            dataname: 'totally without power',\n            apiname: 'NONE',\n            iconPath: mechanical,\n          },\n        ],\n      },\n      {\n        title: 'Patient evacuation status',\n        slug: 'evacuation',\n        iconPath: mechanical,\n        styleOptions: {},\n        optionSet: [\n          {\n            name: 'Not applicable',\n            dataname: 'not evacuated', // TODO confirm\n            apiname: 'NORMAL',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Evacuation support needed',\n            dataname: 'need evacuation support',\n            apiname: 'SUPPORT',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Evacuation completed',\n            dataname: 'evacuation completed',\n            apiname: 'COMPLETED',\n            iconPath: mechanical,\n          },\n        ],\n      },\n      {\n        title: 'Time on generator',\n        slug: 'generator_time',\n        iconPath: mechanical,\n        styleOptions: {},\n        prerequisite: {\n          slug: 'power',\n          values: [\n            'On generator',\n            'on generator power',\n            'GENERATOR',\n          ],\n        },\n        optionSet: [\n          {\n            name: 'Less than 24 hours on generator power',\n            dataname: 'less than 24 hours on generator power',\n            apiname: 'UNDER24',\n            iconPath: mechanical,\n          },\n          {\n            name: '24 or more hours on generator power',\n            dataname: '24 or more hours on generator power',\n            apiname: 'OVER24',\n            iconPath: mechanical,\n          },\n          {\n            name: '72 or more hours on generator power',\n            dataname: '72 or more hours on generator power',\n            apiname: 'OVER72',\n            iconPath: mechanical,\n          },\n        ],\n      },\n      {\n        title: 'Generator mechanical status',\n        slug: 'mechanical',\n        footnoteText: '*Clears prior generator mechanical alerts',\n        iconPath: mechanical,\n        styleOptions: {},\n        prerequisite: {\n          slug: 'power',\n          values: [\n            'On generator',\n            'on generator power',\n            'GENERATOR',\n          ],\n        },\n        optionSet: [\n          {\n            name: 'Normal*',\n            dataname: 'normal (mechanical)',\n            apiname: 'NORMAL',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Mechanical issue or fault',\n            apiname: 'ISSUE',\n            dataname: 'mechanical issue reported', // TODO\n            iconPath: mechanical,\n          },\n        ],\n      },\n      {\n        title: 'Generator fuel status',\n        slug: 'fuel',\n        footnoteText: '*Clears prior fuel supply alerts',\n        iconPath: mechanical,\n        styleOptions: { wide: true },\n        prerequisite: {\n          slug: 'power',\n          values: [\n            'On generator',\n            'on generator power',\n            'GENERATOR',\n          ],\n        },\n        optionSet: [\n          {\n            name: 'Normal*',\n            dataname: 'normal (fuel)',\n            apiname: 'NORMAL',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Fuel low',\n            dataname: 'low fuel (<48 hours remaining)',\n            apiname: 'LOW',\n            iconPath: mechanical,\n          },\n          {\n            name: 'Fuel critically low',\n            dataname: 'very low fuel (<24 hours remaining)',\n            apiname: 'CRITICAL',\n            iconPath: mechanical,\n          },\n          {\n            name: 'No fuel',\n            dataname: 'no fuel',\n            apiname: 'NONE',\n            iconPath: mechanical,\n          },\n        ],\n      },\n    ];\n\n  // Manage loading state (don't show if loading, etc.)\n  const [loading, setLoading] = React.useState(true);\n\n  // Function to make API calls to get data for the four state variables above.\n  const getDetailsData = async () => {\n\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const alertsUrl = DEMO_DATE !== undefined ?\n      `${API_BASE}/facilities/${facility_id}/alerts?date=${DEMO_DATE}` :\n      `${API_BASE}/facilities/${facility_id}/alerts`;\n    const res3 = await axios(alertsUrl);\n\n    // Update the state variables with the response data.\n    const sortedAlerts = res3.data.data\n      .sort(Util.sortByAlertId)\n      .sort(Util.sortByDatetime);\n\n    // Setting cur facility\n    // setCurFacilityAlerts(sortedAlerts);\n\n    const alertSelectionSlugs = alertSelections\n      .map(a => a.slug);\n\n    /**\n     * Returns in the initial DefineAlerts input parameter data for the selected\n     * facility. If the action is report, then these will always be blank. If it\n     * is update, these will always be the current active alerts of each type.\n     * @method getDefineAlertsInputs\n     * @param  {object}   selectedFacility The current selected facility\n     *                    (if applicable).\n     * @return {object}   Initial parameters object for DefineAlerts step.\n     */\n    const getDefineAlertsInputs = (selectedFacility, curFacilityAlerts) => {\n      // Define object to hold selections by title.\n      const alertSelectionsState = {};\n      alertSelectionSlugs.forEach(a => alertSelectionsState[a] = undefined);\n      // If there is a currently selected facility, then use it.\n      if (action === 'update' && curFacilityAlerts !== undefined) {\n\n        alertSelectionsState.evacuation = 'Not applicable'; // TODO elegantly\n\n        // for each selection type, find the current value and store it if it is\n        // present.\n        console.log('curFacilityAlerts')\n        console.log(curFacilityAlerts)\n        alertSelectionSlugs.forEach(slug => {\n          const alertSystem = slug === 'generator_time' ? 'time' : slug;\n          const curSelection = curFacilityAlerts.find(c => c.system === alertSystem);\n          if (curSelection) {\n            const option = alertSelections.find(a => a.slug === slug).optionSet;\n            const optionSetChoice = option.find(o => o.dataname === curSelection.description);\n            alertSelectionsState[slug] = optionSetChoice.apiname;\n          };\n        })\n        return alertSelectionsState;\n      }\n\n      // Otherwise, return a blank placeholder to be filled in through input\n      // form selections by the user.\n      else return alertSelectionsState;\n    };\n\n    // Get the initial \"defineAlertsInputs\" parameters.\n    const initialDefineAlertsInputs =\n      getDefineAlertsInputs(selectedFacility, sortedAlerts);\n    setDefineAlertsInputs(initialDefineAlertsInputs);\n\n    // Set state to loaded so JSX renders.\n    setLoading(false);\n  }\n\n  // Set title based on action being performed.\n  const title = action === 'report' ?\n    'Report a new facility status alert' : 'Update facility status';\n\n  // If a facility has been specified, retrieve it from the data\n  let defaultFacility = null;\n  if (facility_id) {\n    defaultFacility = facilities.find(f => f.facility_id === +facility_id);\n  }\n\n  // State variables for selected facility.\n  const [selectedFacility, setSelectedFacility] = React.useState(defaultFacility);\n\n  const handleSubmitData = () => {\n    const submitData = async (findInputs, defineAlertsInputs, effectiveTimeInputs, API_BASE) => {\n      const formatAlertPostData = (findInputs, defineAlertsInputs, effectiveTimeInputs) => {\n        const postAlerts = {};\n        for (let key in defineAlertsInputs) {\n          if (defineAlertsInputs[key] !== 'n/a') {\n            postAlerts[key] = defineAlertsInputs[key];\n          }\n        }\n        return {\n          ...postAlerts,\n          facility_id: findInputs.facility.facility_id,\n          submitted_dtm: Util.formatDatetimeApi(new Date()),\n          effective_dtm: Util.formatDatetimeApi(effectiveTimeInputs.effectiveDtm).replace('2018','2030'),\n          submitted_by: 'hospital_employee', // TODO Confirm\n          details: effectiveTimeInputs.statusDescription,\n          // details_type: undefined, // TODO\n        };\n      };\n      const postBody = formatAlertPostData(findInputs, defineAlertsInputs, effectiveTimeInputs);\n      const postUrl = `${API_BASE}/facilities/submission/alert`;\n      const postRes = await axios.post(postUrl, null, { params: postBody });\n    };\n    submitData(findInputs, defineAlertsInputs, effectiveTimeInputs, API_BASE);\n  };\n\n  /**\n   * Define initial state for the \"Find\" step's inputs, including the 2-char.\n   * postal code of the facility's state, its type (hospital, dialysis, or\n   * nursing), and the datum of the facility itself from the API response.\n   * @method getFindInputs\n   * @param  {object}       selectedFacility If applicable, the currently\n   *                        selected facility.\n   * @return {[type}        Initial parameters object for findInputs state\n   */\n  const getFindInputs = (selectedFacility) => {\n    // If there is a currently selected facility, then use it.\n    if (selectedFacility !== null) return {\n      state_abbr: selectedFacility.state, // \"AL\"\n      type: selectedFacility.type, // \"Hospital\"\n      facility: selectedFacility, // Facility data obj. from API response\n    };\n\n    // Otherwise, return a blank placeholder to be filled in through input\n    // form selections by the user.\n    else return {\n      state_abbr: undefined,\n      type: undefined,\n      facility: {},\n    }\n  };\n\n  // Get the initial \"findInputs\" parameters.\n  const initialFindInputs = getFindInputs(selectedFacility);\n\n  // Define the findInputs state variable and setter.\n  const [findInputs, setFindInputs] = React.useState(initialFindInputs);\n\n  // Define alerts inputs.\n  const [defineAlertsInputs, setDefineAlertsInputs] =\n    React.useState({\n      power: undefined,\n      generator_time: undefined,\n      mechanical: undefined,\n      fuel: undefined,\n      evacuation: undefined,\n    });\n\n    const checkDefineAlertsComplete = (defineAlertsInputs) => {\n      return Object.values(defineAlertsInputs)\n        .filter(d => d === undefined).length === 0;\n    };\n\n    const defineAlertsComplete = checkDefineAlertsComplete(defineAlertsInputs);\n\n  const getEffectiveTimeInputs = () => {\n      // If demo date exists, make that today\n      // Set time to the current time of day roundest to most recent 5 mins\n      // Status update is always blank by default\n      return {\n        effectiveDtm: now,\n        statusDescription: '',\n      };\n  };\n\n  // Get initial effective time inputs\n  // const initialEffectiveTimeInputs = {};\n  const initialEffectiveTimeInputs = getEffectiveTimeInputs();\n\n  // Define effective time inputs and state controller\n  const [effectiveTimeInputs, setEffectiveTimeInputs] =\n    React.useState(initialEffectiveTimeInputs);\n\n  // Effect hook to load API data.\n  React.useEffect(() => {\n    if (action === 'update' && facility_id !== undefined) getDetailsData();\n    else setLoading(false);\n  }, []);\n\n  // If loading, stop here and return nothing.\n  if (loading) return <div />;\n\n  // Define step number counter.\n  let stepNum = 1;\n\n  // Hide Find step if updating and facility ID already defined, othewise show.\n  const hideFind = action === 'update' && defaultFacility !== null;\n\n  return (\n    <div className={styles.submit}>\n      <p className={styles.title}>{title}</p>\n      {!hideFind && <Find\n        stepNum={stepNum++}\n        findInputs={findInputs}\n        setFindInputs={setFindInputs}\n        facilities={facilities}\n        selectedFacility={selectedFacility}\n        setSelectedFacility={setSelectedFacility}\n      />}\n      <DefineAlerts\n        stepNum={stepNum++}\n        action={action}\n        findInputs={findInputs}\n        setFindInputs={setFindInputs}\n        facilities={facilities}\n        selectedFacility={selectedFacility}\n        setSelectedFacility={setSelectedFacility}\n        alertSelections={alertSelections}\n        defineAlertsComplete={defineAlertsComplete}\n        defineAlertsInputs={defineAlertsInputs}\n        setDefineAlertsInputs={setDefineAlertsInputs}\n      />\n      <EffectiveTime\n        stepNum={stepNum++}\n        findInputs={findInputs}\n        defineAlertsInputs={defineAlertsInputs}\n        effectiveTimeInputs={effectiveTimeInputs}\n        setEffectiveTimeInputs={setEffectiveTimeInputs}\n        defineAlertsComplete={defineAlertsComplete}\n        handleSubmitData={handleSubmitData}\n      />\n\n    </div>\n  )\n}\n\nexport default Submit\n"]},"metadata":{},"sourceType":"module"}