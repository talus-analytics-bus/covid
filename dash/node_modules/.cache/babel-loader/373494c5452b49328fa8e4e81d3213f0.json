{"ast":null,"code":"import _objectSpread from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/views/submit/effectiveTime/EffectiveTime.js\";\nimport React from 'react';\nimport Popup from 'reactjs-popup';\nimport styles from './effectivetime.module.scss';\nimport classNames from 'classnames';\nimport DatePicker from \"react-datepicker\";\nimport { Redirect } from 'react-router';\nimport \"react-datepicker/dist/react-datepicker.css\"; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // JSX for Effective Time section of Submit page.\n\nconst EffectiveTime = ({\n  stepNum,\n  findInputs,\n  defineAlertsInputs,\n  defineAlertsComplete,\n  effectiveTimeInputs,\n  setEffectiveTimeInputs,\n  handleSubmitData\n}) => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        redirect = _React$useState2[0],\n        setRedirect = _React$useState2[1];\n\n  let timer;\n  const handleChange = {\n    datepicker: event => {\n      const newEffectiveTimeInputs = _objectSpread({}, effectiveTimeInputs, {\n        effectiveDtm: event\n      });\n\n      setEffectiveTimeInputs(newEffectiveTimeInputs);\n    },\n    textForm: event => {\n      // Clears running timer and starts a new one each time the user types\n      clearTimeout(timer); // const curEvent = event;\n\n      const curText = event.target.value;\n      timer = setTimeout(() => {\n        const newEffectiveTimeInputs = _objectSpread({}, effectiveTimeInputs, {\n          statusDescription: curText\n        });\n\n        setEffectiveTimeInputs(newEffectiveTimeInputs);\n      }, 1);\n    }\n  }; // Effective Time component JSX.\n\n  if (!defineAlertsComplete || findInputs.facility.facility_id === undefined) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  });else if (redirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: {\n        pathname: redirect,\n        state: {\n          id: '123',\n          showSuccessModal: true\n        },\n        showSuccessModal: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }); // TODO dynamically\n  } else {\n    const pContent = effectiveTimeInputs.statusDescription;\n    const pForm = React.createElement(\"input\", {\n      className: styles.textForm,\n      type: \"text\",\n      placeholder: \"Type status details\",\n      onChange: handleChange.textForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: styles.effectiveTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, stepNum > 1 && React.createElement(\"div\", {\n      className: styles.divider,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: styles.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, stepNum, \". Optional: Set effective time and provide additional details\"), React.createElement(\"span\", {\n      className: styles.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Set effective datetime stamp for status alerts (if different from current time) and provide additional details.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Effective time\"), React.createElement(DatePicker, {\n      className: 'select-search-box__search',\n      selected: effectiveTimeInputs.effectiveDtm || now,\n      onChange: handleChange.datepicker,\n      showTimeSelect: true,\n      timeFormat: \"h:mm aa\",\n      timeIntervals: 5,\n      dateFormat: \"MMMM d, yyyy h:mm aa\",\n      timeCaption: \"Time\",\n      popperPlacement: \"top-end\",\n      maxDate: now,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Status details\"), pForm), React.createElement(\"div\", {\n      className: styles.submit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Popup // Trigger button\n    , {\n      trigger: React.createElement(\"button\", {\n        className: styles.submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Submit\") // Class name for styling (found in index.scss).\n      ,\n      className: 'mapModal' // Don't open the modal if it's already been shown.\n      ,\n      defaultOpen: false // This is a modal.\n      ,\n      modal: true // When popup is closed, update state variable in App so it doesn't\n      // get shown again this session.\n      ,\n      onClose: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, close => React.createElement(\"div\", {\n      className: styles.modal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: styles.close,\n      onClick: close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(\"div\", {\n      className: styles.header,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Confirm data submission\"), React.createElement(\"div\", {\n      className: styles.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \" \", \"This will submit data to Power PIONEER. Continue?\", \" \"), React.createElement(\"div\", {\n      className: styles.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: styles.buttonSecondary,\n      onClick: () => {\n        close();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Back\"), React.createElement(\"button\", {\n      className: styles.button,\n      onClick: () => {\n        handleSubmitData();\n        setRedirect('/landing'); // TODO dynamically\n\n        close();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Submit\"))))));\n  }\n};\n\nexport default EffectiveTime;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/views/submit/effectiveTime/EffectiveTime.js"],"names":["React","Popup","styles","classNames","DatePicker","Redirect","DEMO_DATE","process","env","now","undefined","Date","EffectiveTime","stepNum","findInputs","defineAlertsInputs","defineAlertsComplete","effectiveTimeInputs","setEffectiveTimeInputs","handleSubmitData","useState","redirect","setRedirect","timer","handleChange","datepicker","event","newEffectiveTimeInputs","effectiveDtm","textForm","clearTimeout","curText","target","value","setTimeout","statusDescription","facility","facility_id","pathname","state","id","showSuccessModal","pContent","pForm","effectiveTime","divider","title","instructions","submit","close","modal","header","content","actions","buttonSecondary","button"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Popup from 'reactjs-popup'\nimport styles from './effectivetime.module.scss'\nimport classNames from 'classnames'\nimport DatePicker from \"react-datepicker\";\nimport { Redirect } from 'react-router'\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n// JSX for Effective Time section of Submit page.\nconst EffectiveTime = ({\n    stepNum,\n    findInputs,\n    defineAlertsInputs,\n    defineAlertsComplete,\n    effectiveTimeInputs,\n    setEffectiveTimeInputs,\n    handleSubmitData,\n  }) => {\n\n  const [redirect, setRedirect] = React.useState(false);\n\n  let timer;\n  const handleChange = {\n    datepicker: (event) => {\n      const newEffectiveTimeInputs = {\n        ...effectiveTimeInputs,\n        effectiveDtm: event,\n      };\n      setEffectiveTimeInputs(newEffectiveTimeInputs);\n    },\n    textForm: (event) => {\n     // Clears running timer and starts a new one each time the user types\n     clearTimeout(timer);\n     // const curEvent = event;\n     const curText = event.target.value;\n     timer = setTimeout(() => {\n       const newEffectiveTimeInputs = {\n         ...effectiveTimeInputs,\n         statusDescription: curText,\n       };\n       setEffectiveTimeInputs(newEffectiveTimeInputs);\n     }, 1);\n    },\n  };\n\n  // Effective Time component JSX.\n  if (\n    !defineAlertsComplete\n    || findInputs.facility.facility_id === undefined\n  ) return <div />\n  else if (redirect) {\n    return <Redirect push to={{\n            pathname: redirect,\n            state: { id: '123', showSuccessModal: true, },\n            showSuccessModal: true,\n        }}\n/>; // TODO dynamically\n  }\n  else {\n    const pContent = effectiveTimeInputs.statusDescription;\n    const pForm = <input className={styles.textForm} type=\"text\" placeholder=\"Type status details\" onChange={handleChange.textForm} />\n    return (\n      <div className={styles.effectiveTime}>\n        {(stepNum > 1) && <div className={styles.divider} />}\n        <h2 className={styles.title}>{stepNum}. Optional: Set effective time and provide additional details</h2>\n        <span className={styles.instructions}>Set effective datetime stamp for status alerts (if different from current time) and provide additional details.</span>\n        <div>\n        <h3>Effective time</h3>\n        <DatePicker\n          className={'select-search-box__search'}\n          selected={effectiveTimeInputs.effectiveDtm || now}\n          onChange={handleChange.datepicker}\n          showTimeSelect\n          timeFormat=\"h:mm aa\"\n          timeIntervals={5}\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\n          timeCaption=\"Time\"\n          popperPlacement=\"top-end\"\n          maxDate={now}\n        />\n        </div>\n        <div>\n          <h3>Status details</h3>\n          {pForm}\n        </div>\n        <div className={styles.submit}>\n        <Popup\n\n          // Trigger button\n          trigger={\n            <button className={styles.submit}>\n              Submit\n            </button>\n          }\n\n          // Class name for styling (found in index.scss).\n          className={'mapModal'}\n\n          // Don't open the modal if it's already been shown.\n          defaultOpen={false}\n\n          // This is a modal.\n          modal\n\n          // When popup is closed, update state variable in App so it doesn't\n          // get shown again this session.\n          onClose={\n            () => {\n\n            }\n          }\n        >\n          {\n            close => (\n            <div className={styles.modal}>\n              <a className={styles.close} onClick={close}>\n                &times;\n              </a>\n              <div className={styles.header}>Confirm data submission</div>\n              <div className={styles.content}>\n                {\" \"}\n                This will submit data to Power PIONEER. Continue?\n                {\" \"}\n              </div>\n              <div className={styles.actions}>\n                <button\n                  className={styles.buttonSecondary}\n                  onClick={() => {\n                    close();\n                  }}\n                >\n                  Back\n                </button>\n                <button\n                  className={styles.button}\n                  onClick={() => {\n                    handleSubmitData();\n                    setRedirect('/landing'); // TODO dynamically\n                    close();\n                  }}\n                >\n                  Submit\n                </button>\n              </div>\n            </div>\n          )\n        }\n        </Popup>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default EffectiveTime\n"]},"metadata":{},"sourceType":"module"}