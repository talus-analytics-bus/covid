{"ast":null,"code":"var _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/misc/Infographic.js\";\n// Libraries\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from '../../components/views/details/content/content.module.scss'; // Local utility lib\n\nimport Util from './Util.js'; // Icons for infographic\n// Time without power / on generator infographic\n\nimport utilPowerAlerted from '../../assets/images/util_power_yellow.png';\nimport utilPowerCritical from '../../assets/images/util_power_red.png';\nimport utilPowerStable from '../../assets/images/util_power_green.png';\nimport noPower from \"../../assets/images/no_power.svg\"; // Failure infographic\n\nimport noFailures from '../../assets/images/no_failures.png';\nimport fuelAlerted from '../../assets/images/fuel/fuel_yellow.png';\nimport fuelCritical from '../../assets/images/fuel/fuel_red.png';\nimport mechanicalAlerted from '../../assets/images/mechanical/mechanical_yellow.png';\nimport mechanicalCritical from '../../assets/images/mechanical/mechanical_red.png';\nimport evacAlerted from '../../assets/images/evac/evac_yellow.png';\nimport evacCritical from '../../assets/images/evac/evac_red.png'; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n} // Infographic data functions.\n\n\nconst Infographic = {}; // Function to get icon paths, systems, and most recent updated on from active\n// alerts.\n\nInfographic.getInfographicData = (alerts, fac, dateStr) => {\n  // Debug: add fake mechanical alert to test the triple alert case for the\n  // infographic design.\n  // const DEBUG_INFOGRAPHIC = false;\n  // if (DEBUG_INFOGRAPHIC && alerts.length < 4) {\n  //   alerts.push(\n  //     {\n  //       \"system\": \"mechanical\",\n  //       \"severity\": \"critical\",\n  //       \"effective_dtm\": dateStr,\n  //     }\n  //   );\n  // }\n  // Function to get infographic alerts\n  const getInfographicAlerts = inputAlerts => {\n    console.log('inputAlerts');\n    console.log(inputAlerts);\n    return inputAlerts.filter(d => {\n      if (d.system === 'time') return false;\n      if (d.system === 'power') return false;\n      if (d.severity === 'stable') return false;else return true;\n    });\n  };\n\n  const infographicAlerts = getInfographicAlerts(alerts); // Template of output data object\n\n  const output = {\n    \"iconPaths\": [],\n    \"title\": \"\",\n    \"systems\": [],\n    \"updatedOn\": \"\",\n    \"multiIcons\": false,\n    \"tripleIcons\": false,\n    \"systemJsx\": \"\"\n  }; // Function to get icon for infographic\n\n  const getIconPathVariable = alert => {\n    const paths = {\n      \"fuel\": {\n        \"critical\": fuelCritical,\n        \"alerted\": fuelAlerted\n      },\n      \"evacuation\": {\n        \"critical\": evacCritical,\n        \"alerted\": evacAlerted\n      },\n      \"mechanical\": {\n        \"critical\": mechanicalCritical,\n        \"alerted\": mechanicalAlerted\n      }\n    };\n    return paths[alert.system][alert.severity];\n  }; // For each infographic alert, populate the data needed for the\n  // infographic.\n\n\n  infographicAlerts.forEach(d => {\n    // If there is already an alert of this system, then skip.\n    const alreadyAlertOfSystem = output.systems.find(s => s === d.system);\n    if (alreadyAlertOfSystem) return; // icon path\n\n    const curIconPath = getIconPathVariable(d);\n    output.iconPaths.push(curIconPath); // system\n\n    output.systems.push(d.system); // updated on\n\n    const curUpdatedOn = new Date(d.effective_dtm);\n\n    if (output.updatedOn < curUpdatedOn) {\n      output.updatedOn = curUpdatedOn;\n    }\n  }); // Title of infographic\n  // Multiple failures (show multiple icons)\n\n  if (output.systems.length > 1) {\n    output.title = 'Multiple failures reported'; // No failures (gray circle with white dash)\n  } else if (output.systems.length === 0) {\n    output.title = 'No failures reported';\n    output.updatedOn = new Date(alerts[0].effective_dtm);\n    output.systems.push('');\n    output.iconPaths.push(noFailures); // Single failure\n  } else {\n    const system = output.systems[0];\n    const type = system === 'evacuation' ? ' alert' : ' failure';\n    output.title = \"\".concat(output.systems[0]).concat(type, \" reported\");\n  } // If there are multiple icons, reduce their size so they fit.\n\n\n  output.multiIcons = output.iconPaths.length > 1; // If there are three icons, flow them so there are two in the first row\n  // and one in the second row.\n\n  output.tripleIcons = output.iconPaths.length > 2; // Create comma-delimited list of the systems with failures/issues, and\n  // color the font according to their severity.\n\n  output.systemJsx = output.systems.map((system, i) => {\n    if (i < output.systems.length - 1) {\n      return React.createElement(\"span\", {\n        className: classNames(styles[fac.severity]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, system.toUpperCase(), \", \");\n    } else {\n      return React.createElement(\"span\", {\n        className: classNames(styles[fac.severity]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, system.toUpperCase());\n    }\n  });\n  return output;\n}; // Function to get data for populating the time infographic that says how long\n// a facility has been without power or if it is totally without power.\n\n\nInfographic.getTimeInfographicData = (activeAlerts, fac) => {\n  // Function get active alerts having to do with time on generator or\n  // totally without power status.\n  const getTimeAlerts = activeAlerts => {\n    return activeAlerts.filter(d => {\n      if (d.system !== 'power' && d.system !== 'time') return false;\n      return true;\n    });\n  }; // Get all alerts relevant to time on generator / utility power / without\n  // power.\n\n\n  const timeAlerts = getTimeAlerts(activeAlerts); // Determine what data to return for the time infographic section.\n\n  const output = {\n    \"iconPath\": \"path1\",\n    // use no power icon if TWP\n    \"circle\": {\n      \"use\": true,\n      // only if not totally without power\n      \"value\": \"<1\"\n    },\n    \"title\": \"Days on generator\",\n    \"updatedOn\": \"2018-07-04T16:00:00\"\n  }; // Take most recent time alert and determine infographic data from it.\n\n  const mostRecentTimeAlert = timeAlerts[0];\n\n  if (!mostRecentTimeAlert) {}\n\n  const system = mostRecentTimeAlert ? mostRecentTimeAlert.system : 'none';\n  const desc = mostRecentTimeAlert ? mostRecentTimeAlert.description.toLowerCase() : 'none';\n  output.updatedOn = mostRecentTimeAlert ? new Date(mostRecentTimeAlert.effective_dtm) : new Date(DEMO_DATE);\n\n  switch (system) {\n    case 'none':\n      const utilPowerIcons = {\n        'critical': utilPowerCritical,\n        'alerted': utilPowerAlerted,\n        'stable': utilPowerStable\n      };\n      output.iconPath = utilPowerIcons[fac.severity];\n      output.circle.use = false;\n      output.circle.value = null;\n      output.title = 'On utility power';\n      break;\n\n    case 'power':\n      // A: On generator power --> <1 day on generator\n      if (desc === 'on generator power') {\n        output.iconPath = null;\n        output.circle.use = true;\n        output.circle.value = '<1';\n        output.title = 'Day on generator'; // E: totally without power --> icon, Totally without power\n      } else if (desc === 'totally without power') {\n        output.iconPath = noPower;\n        output.circle.use = false;\n        output.circle.value = null;\n        output.title = 'Totally without power'; // F: on utility power\n      } else if (desc === 'normal operations (utility power)') {\n        const utilPowerIcons = {\n          'critical': utilPowerCritical,\n          'alerted': utilPowerAlerted,\n          'stable': utilPowerStable\n        };\n        output.iconPath = utilPowerIcons[fac.severity];\n        output.circle.use = false;\n        output.circle.value = null;\n        output.title = 'On utility power'; // error\n      } else {\n        console.log('Warning: Unexpected status:');\n        console.log(mostRecentTimeAlert);\n      }\n\n      break;\n\n    case 'time':\n      output.iconPath = null;\n      output.circle.use = true; // C: 48 --> >2 days on generator\n\n      if (desc === 'less than 24 hours on generator power') {\n        output.circle.value = '<1';\n        output.title = 'Day on generator'; // B: 24 --> >1 day on generator\n      } else if (desc === '48 or more hours on generator power') {\n        output.circle.value = '>2';\n        output.title = 'Days on generator'; // D: 72 --> >3 days on generator\n      } else if (desc === '72 or more hours on generator power') {\n        output.circle.value = '>3';\n        output.title = 'Days on generator'; // E: 72 --> >3 days on generator\n      } else if (desc === '24 or more hours on generator power') {\n        output.circle.value = '>1';\n        output.title = 'Days on generator'; // error\n      } else {\n        console.log('Warning: Unexpected status:');\n        console.log(mostRecentTimeAlert);\n      }\n\n      break;\n\n    default:\n      console.log('Warning: Unexpected status:');\n      console.log(mostRecentTimeAlert);\n      break;\n  }\n\n  return output;\n}; // Get \"facility status\" datetime stamp\n// Relevant endpoint: /facilities/{facility_id}/status/history\n\n\nInfographic.getFacilityStatusDatetimeStamp = (statusHistory, thresh) => {\n  // get most recent status that is below time threshold\n  const validStatusHistory = statusHistory.filter(d => {\n    const dataDate = new Date(d.effective_dtm);\n    if (thresh < dataDate) return false;\n    return true;\n  }).sort(Util.sortByDatetime);\n  const latestStatus = validStatusHistory[0]; // Convert to dt object.\n\n  return new Date(latestStatus.effective_dtm);\n};\n\nexport default Infographic;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/misc/Infographic.js"],"names":["React","classNames","styles","Util","utilPowerAlerted","utilPowerCritical","utilPowerStable","noFailures","fuelAlerted","fuelCritical","mechanicalAlerted","mechanicalCritical","evacAlerted","evacCritical","DEMO_DATE","process","env","Infographic","getInfographicData","alerts","fac","dateStr","getInfographicAlerts","inputAlerts","console","log","filter","d","system","severity","infographicAlerts","output","getIconPathVariable","alert","paths","forEach","alreadyAlertOfSystem","systems","find","s","curIconPath","iconPaths","push","curUpdatedOn","Date","effective_dtm","updatedOn","length","title","type","multiIcons","tripleIcons","systemJsx","map","i","toUpperCase","getTimeInfographicData","activeAlerts","getTimeAlerts","timeAlerts","mostRecentTimeAlert","desc","description","toLowerCase","utilPowerIcons","iconPath","circle","use","value","noPower","getFacilityStatusDatetimeStamp","statusHistory","thresh","validStatusHistory","dataDate","sort","sortByDatetime","latestStatus"],"mappings":"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","sourcesContent":["// Libraries\nimport React from 'react'\nimport classNames from 'classnames'\nimport styles from '../../components/views/details/content/content.module.scss'\n\n// Local utility lib\nimport Util from './Util.js'\n\n// Icons for infographic\n// Time without power / on generator infographic\nimport utilPowerAlerted from '../../assets/images/util_power_yellow.png'\nimport utilPowerCritical from '../../assets/images/util_power_red.png'\nimport utilPowerStable from '../../assets/images/util_power_green.png'\nimport noPower from '../../assets/images/no_power.svg'\n\n// Failure infographic\nimport noFailures from '../../assets/images/no_failures.png'\nimport fuelAlerted from '../../assets/images/fuel/fuel_yellow.png'\nimport fuelCritical from '../../assets/images/fuel/fuel_red.png'\nimport mechanicalAlerted from '../../assets/images/mechanical/mechanical_yellow.png'\nimport mechanicalCritical from '../../assets/images/mechanical/mechanical_red.png'\nimport evacAlerted from '../../assets/images/evac/evac_yellow.png'\nimport evacCritical from '../../assets/images/evac/evac_red.png'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\n\n// Infographic data functions.\nconst Infographic = {};\n\n// Function to get icon paths, systems, and most recent updated on from active\n// alerts.\nInfographic.getInfographicData = (alerts, fac, dateStr) => {\n  // Debug: add fake mechanical alert to test the triple alert case for the\n  // infographic design.\n  // const DEBUG_INFOGRAPHIC = false;\n  // if (DEBUG_INFOGRAPHIC && alerts.length < 4) {\n  //   alerts.push(\n  //     {\n  //       \"system\": \"mechanical\",\n  //       \"severity\": \"critical\",\n  //       \"effective_dtm\": dateStr,\n  //     }\n  //   );\n  // }\n\n  // Function to get infographic alerts\n  const getInfographicAlerts = (inputAlerts) => {\n    console.log('inputAlerts')\n    console.log(inputAlerts)\n    return inputAlerts.filter((d) => {\n      if (d.system === 'time') return false;\n      if (d.system === 'power') return false;\n      if (d.severity === 'stable') return false;\n      else return true;\n    });\n  };\n  const infographicAlerts = getInfographicAlerts(alerts);\n\n  // Template of output data object\n  const output = {\n    \"iconPaths\": [\n    ],\n    \"title\": \"\",\n    \"systems\": [\n    ],\n    \"updatedOn\": \"\",\n    \"multiIcons\": false,\n    \"tripleIcons\": false,\n    \"systemJsx\": \"\",\n  };\n\n  // Function to get icon for infographic\n  const getIconPathVariable = (alert) => {\n    const paths = {\n      \"fuel\": {\n        \"critical\": fuelCritical,\n        \"alerted\": fuelAlerted,\n      },\n      \"evacuation\": {\n        \"critical\": evacCritical,\n        \"alerted\": evacAlerted,\n      },\n      \"mechanical\": {\n        \"critical\": mechanicalCritical,\n        \"alerted\": mechanicalAlerted,\n      },\n    };\n    return paths[alert.system][alert.severity];\n  };\n\n  // For each infographic alert, populate the data needed for the\n  // infographic.\n  infographicAlerts.forEach((d) => {\n    // If there is already an alert of this system, then skip.\n    const alreadyAlertOfSystem = output.systems.find(s => s === d.system);\n    if (alreadyAlertOfSystem) return;\n\n    // icon path\n    const curIconPath = getIconPathVariable(d);\n    output.iconPaths.push(curIconPath);\n\n    // system\n    output.systems.push(d.system);\n\n    // updated on\n    const curUpdatedOn = new Date(d.effective_dtm);\n    if (output.updatedOn < curUpdatedOn) {\n      output.updatedOn = curUpdatedOn;\n    }\n  });\n\n  // Title of infographic\n  // Multiple failures (show multiple icons)\n  if (output.systems.length > 1) {\n    output.title = 'Multiple failures reported';\n\n  // No failures (gray circle with white dash)\n  } else if (output.systems.length === 0) {\n    output.title = 'No failures reported';\n    output.updatedOn = new Date(alerts[0].effective_dtm);\n    output.systems.push('');\n    output.iconPaths.push(noFailures);\n\n  // Single failure\n  } else {\n    const system = output.systems[0];\n    const type = system === 'evacuation' ? ' alert' : ' failure';\n    output.title = `${output.systems[0]}${type} reported`;\n  }\n\n  // If there are multiple icons, reduce their size so they fit.\n  output.multiIcons = output.iconPaths.length > 1;\n\n  // If there are three icons, flow them so there are two in the first row\n  // and one in the second row.\n  output.tripleIcons = output.iconPaths.length > 2;\n\n  // Create comma-delimited list of the systems with failures/issues, and\n  // color the font according to their severity.\n  output.systemJsx = output.systems.map((system, i) => {\n    if (i < output.systems.length-1) {\n      return (<span className={classNames(styles[fac.severity])}>{system.toUpperCase()}, </span>)\n    } else {\n      return (<span className={classNames(styles[fac.severity])}>{system.toUpperCase()}</span>)\n    }\n  });\n\n  return output;\n};\n\n// Function to get data for populating the time infographic that says how long\n// a facility has been without power or if it is totally without power.\nInfographic.getTimeInfographicData = (activeAlerts, fac) => {\n\n  // Function get active alerts having to do with time on generator or\n  // totally without power status.\n  const getTimeAlerts = (activeAlerts) => {\n    return activeAlerts.filter((d) => {\n      if (d.system !== 'power' && d.system !== 'time') return false;\n      return true;\n    });\n  };\n\n  // Get all alerts relevant to time on generator / utility power / without\n  // power.\n  const timeAlerts = getTimeAlerts(activeAlerts);\n\n  // Determine what data to return for the time infographic section.\n  const output = {\n    \"iconPath\": \"path1\", // use no power icon if TWP\n    \"circle\": {\n      \"use\": true, // only if not totally without power\n      \"value\": \"<1\",\n    },\n    \"title\": \"Days on generator\",\n    \"updatedOn\": \"2018-07-04T16:00:00\",\n  };\n\n  // Take most recent time alert and determine infographic data from it.\n  const mostRecentTimeAlert = timeAlerts[0];\n  if (!mostRecentTimeAlert) {\n\n  }\n  const system = mostRecentTimeAlert ? mostRecentTimeAlert.system : 'none';\n  const desc = mostRecentTimeAlert ? mostRecentTimeAlert.description.toLowerCase()\n    : 'none';\n  output.updatedOn = mostRecentTimeAlert ? new Date(mostRecentTimeAlert.effective_dtm)\n    : new Date(DEMO_DATE);\n  switch (system) {\n    case 'none':\n      const utilPowerIcons = {\n        'critical': utilPowerCritical,\n        'alerted': utilPowerAlerted,\n        'stable': utilPowerStable,\n      };\n      output.iconPath = utilPowerIcons[fac.severity];\n      output.circle.use = false;\n      output.circle.value = null;\n      output.title = 'On utility power';\n      break;\n\n    case 'power':\n      // A: On generator power --> <1 day on generator\n      if (desc === 'on generator power') {\n        output.iconPath = null;\n        output.circle.use = true;\n        output.circle.value = '<1';\n        output.title = 'Day on generator';\n\n      // E: totally without power --> icon, Totally without power\n      } else if (desc === 'totally without power') {\n        output.iconPath = noPower;\n        output.circle.use = false;\n        output.circle.value = null;\n        output.title = 'Totally without power';\n\n      // F: on utility power\n      } else if (desc === 'normal operations (utility power)') {\n        const utilPowerIcons = {\n          'critical': utilPowerCritical,\n          'alerted': utilPowerAlerted,\n          'stable': utilPowerStable,\n        };\n        output.iconPath = utilPowerIcons[fac.severity];\n        output.circle.use = false;\n        output.circle.value = null;\n        output.title = 'On utility power';\n\n      // error\n      } else {\n        console.log('Warning: Unexpected status:')\n        console.log(mostRecentTimeAlert);\n      }\n      break;\n\n    case 'time':\n      output.iconPath = null;\n      output.circle.use = true;\n\n      // C: 48 --> >2 days on generator\n      if (desc === 'less than 24 hours on generator power') {\n        output.circle.value = '<1';\n        output.title = 'Day on generator';\n\n      // B: 24 --> >1 day on generator\n    } else if (desc === '48 or more hours on generator power') {\n        output.circle.value = '>2';\n        output.title = 'Days on generator';\n\n      // D: 72 --> >3 days on generator\n      } else if (desc === '72 or more hours on generator power') {\n        output.circle.value = '>3';\n        output.title = 'Days on generator';\n\n      // E: 72 --> >3 days on generator\n      } else if (desc === '24 or more hours on generator power') {\n        output.circle.value = '>1';\n        output.title = 'Days on generator';\n\n      // error\n      } else {\n        console.log('Warning: Unexpected status:')\n        console.log(mostRecentTimeAlert);\n      }\n      break;\n\n    default:\n      console.log('Warning: Unexpected status:')\n      console.log(mostRecentTimeAlert);\n      break;\n  }\n\n  return output;\n};\n\n// Get \"facility status\" datetime stamp\n// Relevant endpoint: /facilities/{facility_id}/status/history\nInfographic.getFacilityStatusDatetimeStamp = (statusHistory, thresh) => {\n\n  // get most recent status that is below time threshold\n  const validStatusHistory = statusHistory.filter((d) => {\n    const dataDate = new Date(d.effective_dtm);\n    if (thresh < dataDate) return false;\n    return true;\n  }).sort(Util.sortByDatetime);\n  const latestStatus = validStatusHistory[0];\n\n  // Convert to dt object.\n  return new Date(latestStatus.effective_dtm);\n};\n\nexport default Infographic;\n"]},"metadata":{},"sourceType":"module"}