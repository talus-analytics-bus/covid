{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/dash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/dash/src/components/map/Map.js\";\nimport React from 'react';\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './map.scss';\nimport styles from './map.module.scss';\nimport initMap from './mapUtils';\nimport Legend from './legend/Legend';\nimport ResetZoom from './resetZoom/ResetZoom';\nimport Filter from './filter/Filter';\nimport GeomPopup from './geomPopup/GeomPopup.js';\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst Map = ({\n  fillObservations,\n  bubbleObservations,\n  mappedFacilityTypes,\n  setMappedFacilityTypes\n}) => {\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: 0,\n    latitude: 0,\n    zoom: 2\n  };\n\n  const _React$useState = React.useState(defaultViewport),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        viewport = _React$useState2[0],\n        setViewport = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedGeom = _React$useState4[0],\n        setSelectedGeom = _React$useState4[1];\n\n  const _React$useState5 = React.useState(-1),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedGeomID = _React$useState6[0],\n        setSelectedGeomID = _React$useState6[1];\n\n  const _React$useState7 = React.useState([0, 0]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        cursorLngLat = _React$useState8[0],\n        setCursorLngLat = _React$useState8[1];\n\n  const _React$useState9 = React.useState(false),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        showGeomPopup = _React$useState10[0],\n        setShowGeomPopup = _React$useState10[1];\n\n  const _React$useState11 = React.useState({}),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        popupData = _React$useState12[0],\n        setPopupData = _React$useState12[1]; // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n\n\n  const _React$useState13 = React.useState(false),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        showReset = _React$useState14[0],\n        setShowReset = _React$useState14[1];\n\n  let mapRef = React.createRef();\n  React.useEffect(() => {\n    const map = mapRef.getMap();\n    initMap(map, fillObservations, bubbleObservations);\n  }, []);\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n\n  const resetViewport = () => {\n    // Hide the reset button after click.\n    setShowReset(false); // Hide tooltip\n\n    setShowGeomPopup(false);\n    const map = mapRef.getMap(); // Change viewport back to default.\n\n    setViewport(defaultViewport);\n  };\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n\n\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap(); // Get list of features under the mouse cursor.\n\n    const features = map.queryRenderedFeatures(e.point); // Use pointer cursor for any country, grab cursor otherwise.\n\n    const onCountry = features.find(f => f['id'] > 0) !== undefined;\n    map.getContainer().parentElement.parentElement.style.cursor = onCountry ? 'pointer' : 'grab';\n  };\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n\n\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = e => {\n      try {\n        if (e.target.className.includes('legend') || e.target.className.includes('filter') || e.target.offsetParent.className.includes('legend') || e.target.offsetParent.className.includes('filter')) {\n          return true;\n        }\n      } catch {\n        console.log('[Error] Unexpected click event: ');\n        console.log(e);\n        return false;\n      }\n\n      return false;\n    }; // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n\n\n    if (clickedMenus(e)) return; // Otherwise, highlight state and show its tooltip.\n\n    const map = mapRef.getMap(); // If there is a highlighted country, turn it off\n\n    if (selectedGeomID > 0) {\n      map.setFeatureState({\n        source: 'geoms',\n        sourceLayer: 'countries_id-3n17an',\n        id: selectedGeomID\n      }, {\n        clicked: false\n      });\n      setShowGeomPopup(false);\n      setSelectedGeom('');\n      setSelectedGeomID(-1);\n    }\n\n    const clickedOnGeom = e.features.find(f => f.layer.id === 'geom-fills');\n    if (typeof clickedOnGeom === 'undefined') return;\n    console.log(clickedOnGeom);\n    const id = clickedOnGeom.id;\n    map.setFeatureState({\n      source: 'geoms',\n      sourceLayer: 'countries_id-3n17an',\n      id: id\n    }, {\n      clicked: true\n    });\n    setSelectedGeom(clickedOnGeom.properties.ADMIN);\n    const bubbleData = bubbleObservations.find(f => f.place_id === id);\n    const fillData = fillObservations.find(f => f.place_id === id);\n    setPopupData({\n      'name': selectedGeom,\n      'fill': fillData,\n      'bubble': bubbleData\n    });\n    setSelectedGeomID(id);\n    setCursorLngLat(e.lngLat);\n    setShowGeomPopup(true);\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n      // Get current zoom level.\n      const curZoom = viewport.zoom; // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n\n      const flyZoom = finalZoom !== null ? finalZoom : Math.min(4, curZoom * 1.50); // Start off flying\n\n      let flying = true;\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n\n      function onFlyEnd() {\n        // Get map object reference.\n        const map = mapRef.getMap(); // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n\n        map.off('moveend', onFlyEnd); // If flying,\n\n        if (flying) {\n          // Stop flying,\n          flying = false; // Set viewport state to the flight destination and zoom level\n\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      }\n\n      ; // Get map object reference.\n\n      const map = mapRef.getMap(); // Assign event listener so viewport is updated when flight is over.\n\n      map.on('moveend', onFlyEnd); // Fly to the position occupied by the clicked cluster on the map.\n\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) {\n          return t;\n        }\n      });\n      setShowReset(true);\n    };\n  };\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap();\n    const id = selectedGeomID;\n    map.setFeatureState({\n      source: 'geoms',\n      sourceLayer: 'countries_id-3n17an',\n      id: id\n    }, {\n      clicked: false\n    });\n    setShowGeomPopup(false);\n    setSelectedGeom('');\n    setSelectedGeomID(-1);\n  }; // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n\n\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160,\n    // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1]\n  };\n  return React.createElement(ReactMapGL, Object.assign({\n    ref: map => mapRef = map,\n    mapboxApiAccessToken: TOKEN //mapStyle='mapbox://styles/mapbox/streets-v10'\n    ,\n    mapStyle: \"mapbox://styles/traethethird/ck0ia6pvc2cpc1cpe5nx5b7p5\"\n  }, viewport, {\n    maxZoom: 4,\n    minZoom: 2,\n    onViewportChange: v => {\n      // Update viewport.\n      setViewport(v); // If viewport deviates from the default zoom or longlat, show the\n      // \"Reset\" button in the bottom left. Otherwise, hide it.\n\n      if (v.zoom !== defaultViewport.zoom || v.longitude !== defaultViewport.longitude || v.latitude !== defaultViewport.latitude) setShowReset(true);else setShowReset(false);\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    doubleClickZoom: false //remove 300ms delay on clicking\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: '30px',\n      left: 0,\n      padding: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(NavigationControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  })), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), showReset && React.createElement(ResetZoom, {\n    handleClick: resetViewport,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }), showGeomPopup && React.createElement(Popup, {\n    color: \"#4286f4\",\n    style: {\n      margin: 0,\n      padding: 0,\n      backgroundColor: '#4286f4'\n    },\n    longitude: cursorLngLat[0],\n    latitude: cursorLngLat[1],\n    closeButton: true,\n    closeOnClick: true,\n    onClose: onPopupClose,\n    anchor: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, React.createElement(GeomPopup, {\n    popupData: popupData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  })));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/map/Map.js"],"names":["React","ReactMapGL","NavigationControl","Popup","axios","classNames","styles","initMap","Legend","ResetZoom","Filter","GeomPopup","TOKEN","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","Map","fillObservations","bubbleObservations","mappedFacilityTypes","setMappedFacilityTypes","defaultViewport","width","height","longitude","latitude","zoom","useState","viewport","setViewport","selectedGeom","setSelectedGeom","selectedGeomID","setSelectedGeomID","cursorLngLat","setCursorLngLat","showGeomPopup","setShowGeomPopup","popupData","setPopupData","showReset","setShowReset","mapRef","createRef","useEffect","map","getMap","resetViewport","handleMouseMove","e","features","queryRenderedFeatures","point","onCountry","find","f","undefined","getContainer","parentElement","style","cursor","handleClick","clickedMenus","target","className","includes","offsetParent","console","log","setFeatureState","source","sourceLayer","id","clicked","clickedOnGeom","layer","properties","ADMIN","bubbleData","place_id","fillData","lngLat","flyToLongLat","longlat","finalZoom","callback","curZoom","flyZoom","Math","min","flying","onFlyEnd","off","newViewport","on","flyTo","center","bearing","speed","curve","easing","t","onPopupClose","limLon","limLat","limZoom","maxBounds","minLongitude","maxLongitude","minLatitude","maxLatitude","v","position","bottom","left","padding","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl'\nimport axios from 'axios'\n\nimport classNames from 'classnames'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport './map.scss'\nimport styles from './map.module.scss'\n\nimport initMap from './mapUtils'\n\nimport Legend from './legend/Legend'\nimport ResetZoom from './resetZoom/ResetZoom'\nimport Filter from './filter/Filter'\nimport GeomPopup from './geomPopup/GeomPopup.js'\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n\nconst Map = ({ fillObservations, bubbleObservations, mappedFacilityTypes, setMappedFacilityTypes }) => {\n\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: 0,\n    latitude: 0,\n    zoom: 2\n  };\n  const [viewport, setViewport] = React.useState(defaultViewport);\n  const [selectedGeom, setSelectedGeom] = React.useState('')\n  const [selectedGeomID, setSelectedGeomID] = React.useState(-1)\n  const [cursorLngLat, setCursorLngLat] = React.useState([0, 0])\n  const [showGeomPopup, setShowGeomPopup] = React.useState(false)\n  const [popupData, setPopupData] = React.useState({})\n\n  // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n  const [showReset, setShowReset] = React.useState(false);\n\n  let mapRef = React.createRef()\n  React.useEffect(() => {\n    const map = mapRef.getMap()\n    initMap(map, fillObservations, bubbleObservations)\n  }, [])\n\n\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n  const resetViewport = () => {\n\n    // Hide the reset button after click.\n    setShowReset(false);\n\n    // Hide tooltip\n    setShowGeomPopup(false);\n    const map = mapRef.getMap();\n\n    // Change viewport back to default.\n    setViewport(defaultViewport);\n  };\n\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap();\n\n    // Get list of features under the mouse cursor.\n    const features = map.queryRenderedFeatures(e.point);\n\n    // Use pointer cursor for any country, grab cursor otherwise.\n    const onCountry = features.find(f => f['id'] > 0) !== undefined;\n\n    map.getContainer().parentElement.parentElement.style.cursor =\n      onCountry ? 'pointer' : 'grab';\n  };\n\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = (e) => {\n      try {\n        if (\n          e.target.className.includes('legend')\n          || e.target.className.includes('filter')\n          || e.target.offsetParent.className.includes('legend')\n          || e.target.offsetParent.className.includes('filter')) {\n            return true;\n          }\n        } catch {\n          console.log('[Error] Unexpected click event: ')\n          console.log(e);\n          return false;\n        }\n        return false;\n    };\n\n    // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n    if (clickedMenus(e)) return;\n\n    // Otherwise, highlight state and show its tooltip.\n    const map = mapRef.getMap()\n\n    // If there is a highlighted country, turn it off\n    if (selectedGeomID > 0) {\n      map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: selectedGeomID }, {clicked: false});\n      setShowGeomPopup(false)\n      setSelectedGeom('')\n      setSelectedGeomID(-1)\n    }\n\n    const clickedOnGeom = e.features.find(f => f.layer.id === 'geom-fills')\n\n    if (typeof clickedOnGeom === 'undefined') return;\n\n    console.log(clickedOnGeom)\n\n    const id = clickedOnGeom.id\n    map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: id }, {clicked: true});\n\n    setSelectedGeom(clickedOnGeom.properties.ADMIN)\n\n    const bubbleData = bubbleObservations.find(f => f.place_id === id)\n    const fillData = fillObservations.find(f => f.place_id === id)\n\n    setPopupData({'name': selectedGeom, 'fill': fillData, 'bubble': bubbleData})\n\n    setSelectedGeomID(id)\n    setCursorLngLat(e.lngLat)\n    setShowGeomPopup(true)\n\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n\n      // Get current zoom level.\n      const curZoom = viewport.zoom;\n\n      // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n      const flyZoom = finalZoom !== null ?\n        finalZoom : Math.min(4, curZoom*1.50);\n\n      // Start off flying\n      let flying = true;\n\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n      function onFlyEnd () {\n\n        // Get map object reference.\n        const map = mapRef.getMap();\n\n        // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n        map.off('moveend', onFlyEnd);\n\n        // If flying,\n        if (flying) {\n\n          // Stop flying,\n          flying = false;\n\n          // Set viewport state to the flight destination and zoom level\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom,\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      };\n\n      // Get map object reference.\n      const map = mapRef.getMap();\n\n      // Assign event listener so viewport is updated when flight is over.\n      map.on('moveend', onFlyEnd);\n\n      // Fly to the position occupied by the clicked cluster on the map.\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) { return t; }\n      });\n\n      setShowReset(true);\n    };\n  }\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap()\n    const id = selectedGeomID\n    map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: id }, {clicked: false});\n    setShowGeomPopup(false)\n    setSelectedGeom('')\n    setSelectedGeomID(-1)\n  }\n\n  // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160, // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1],\n  };\n\n  return (\n    <ReactMapGL\n      ref={map => (mapRef = map)}\n      mapboxApiAccessToken={TOKEN}\n      //mapStyle='mapbox://styles/mapbox/streets-v10'\n      mapStyle='mapbox://styles/traethethird/ck0ia6pvc2cpc1cpe5nx5b7p5'\n      {...viewport}\n      maxZoom = {4}\n      minZoom = {2}\n      onViewportChange={v => {\n        // Update viewport.\n        setViewport(v);\n\n        // If viewport deviates from the default zoom or longlat, show the\n        // \"Reset\" button in the bottom left. Otherwise, hide it.\n        if (\n            v.zoom !== defaultViewport.zoom\n            || v.longitude !== defaultViewport.longitude\n            || v.latitude !== defaultViewport.latitude\n          ) setShowReset(true);\n        else setShowReset(false);\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      doubleClickZoom={false} //remove 300ms delay on clicking\n    >\n      <div\n        style={{\n          position: 'absolute',\n          bottom: '30px',\n          left: 0,\n          padding: '10px'\n        }}\n      >\n      <NavigationControl />\n      </div>\n      <Legend />\n      {showReset && (<ResetZoom handleClick={resetViewport}/>)}\n      {showGeomPopup && (\n        <Popup\n          color='#4286f4'\n          style={{ margin: 0, padding: 0, backgroundColor: '#4286f4' }}\n          longitude={cursorLngLat[0]}\n          latitude={cursorLngLat[1]}\n          closeButton={true}\n          closeOnClick={true}\n          onClose={onPopupClose}\n          anchor='top'\n        >\n          <GeomPopup\n            popupData={popupData}\n          />\n        </Popup>\n      )}\n    </ReactMapGL>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}