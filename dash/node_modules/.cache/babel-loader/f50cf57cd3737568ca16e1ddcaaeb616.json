{"ast":null,"code":"import _objectSpread from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/views/submit/find/Find.js\";\nimport React from 'react';\nimport Popup from 'reactjs-popup';\nimport styles from './find.module.scss';\nimport classNames from 'classnames';\nimport statesSource from '../../../../assets/featureCollections/states.json';\nimport Util from '../../../../components/misc/Util.js'; // Additional libraries\n\nimport SelectSearch from 'react-select-search'; // JSX for submit page.\n\nconst Find = ({\n  stepNum,\n  findInputs,\n  setFindInputs,\n  facilities,\n  selectedFacility,\n  setSelectedFacility\n}) => {\n  // Populate states in dropdown.\n  const stateOptions = statesSource.features.map(s => {\n    return _objectSpread({}, s.properties, {\n      // state data fields from state JSON static file\n      name: s.properties.name,\n      // \"Alabama\"\n      value: s.properties.abbr // \"AL\"\n\n    });\n  }).sort(Util.sortByName).reverse(); // A-Z sort\n  // Populate facility names in dropdown, if the state and type have been\n  // defined.\n\n  const stateAndTypeDefined = findInputs.state_abbr && findInputs.type;\n  const facilityNameOptions = stateAndTypeDefined ? facilities.map(f => {\n    return _objectSpread({}, f, {\n      // facility data fields from API response\n      name: Util.toTitleCase(f.name),\n      // Name of facility for display in search\n      value: f.facility_id // Unique ID of facility from API response.\n\n    });\n  }).filter(f => {\n    // If state or type haven't been defined, don't populate facilities.\n    return findInputs.state_abbr === f.state // \"AL\"\n    && findInputs.type === f.type; // \"Hospital\"\n  }).sort(Util.sortByName).reverse() // A-Z sort\n  : []; // Otherwise return no facilities.\n  // Populate facility types in dropdown.\n  // TODO dynamically based on data.\n\n  const facilityTypeOptions = [{\n    name: 'Hospital',\n    value: 'Hospital'\n  }, {\n    name: 'Large dialysis center',\n    value: 'Dialysis Facility'\n  }, {\n    name: 'Skilled nursing home',\n    value: 'Nursing Home'\n  }]; // onChange functions for the dropdowns in the Find section (state, type, and\n  // facility name).\n\n  const handleChange = {\n    // State dropdown onChange\n    state: (value, state, props) => {\n      const newFindInputs = _objectSpread({}, findInputs, {\n        state_abbr: value.value,\n        facility: {} // Clear selected facility if state is changed.\n\n      });\n\n      setFindInputs(newFindInputs);\n    },\n    // Type dropdown onChange\n    type: (value, state, props) => {\n      const newFindInputs = _objectSpread({}, findInputs, {\n        type: value.value,\n        facility: {} // Clear selected facility if type is changed.\n\n      });\n\n      setFindInputs(newFindInputs);\n    },\n    // Facility name dropdown onChange\n    facility: (value, state, props) => {\n      const newFindInputs = _objectSpread({}, findInputs, {\n        facility: value\n      });\n\n      setFindInputs(newFindInputs);\n    }\n  }; // Find component JSX.\n\n  return React.createElement(\"div\", {\n    className: styles.find,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, stepNum, \". Find a facility\"), React.createElement(\"span\", {\n    className: styles.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Choose a state, facility type (hospital, dialysis center, or nursing home) and a facility for which to submit data.\"), React.createElement(\"div\", {\n    className: styles.stateAndType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames({\n      'disabled': false\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"State\"), React.createElement(SelectSearch, {\n    options: stateOptions,\n    name: \"state\",\n    placeholder: \"Choose state\",\n    value: findInputs.state_abbr,\n    onChange: handleChange.state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classNames({\n      'disabled': false\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Facility type\"), React.createElement(SelectSearch, {\n    options: facilityTypeOptions,\n    name: \"type\",\n    placeholder: \"Choose facility type\",\n    value: findInputs.type,\n    onChange: handleChange.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: styles.facilityName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Facility name\")), React.createElement(Popup, {\n    trigger: open => React.createElement(\"div\", {\n      className: classNames('wide', styles.facilityNameSearch, {\n        'disabled': !stateAndTypeDefined\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(SelectSearch, {\n      options: facilityNameOptions,\n      name: \"facility\",\n      placeholder: \"Choose facility\",\n      value: findInputs.facility.facility_id,\n      onChange: handleChange.facility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })),\n    position: \"top center\",\n    on: \"hover\",\n    closeOnDocumentClick: true,\n    mouseEnterDelay: 500,\n    disabled: stateAndTypeDefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Please select a state and facility type above to continue.\")))), findInputs.facility.facility_id === undefined && React.createElement(\"span\", {\n    className: classNames(styles.instructions, styles.continue),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Please complete all required selections to continue.\"));\n};\n\nexport default Find;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/views/submit/find/Find.js"],"names":["React","Popup","styles","classNames","statesSource","Util","SelectSearch","Find","stepNum","findInputs","setFindInputs","facilities","selectedFacility","setSelectedFacility","stateOptions","features","map","s","properties","name","value","abbr","sort","sortByName","reverse","stateAndTypeDefined","state_abbr","type","facilityNameOptions","f","toTitleCase","facility_id","filter","state","facilityTypeOptions","handleChange","props","newFindInputs","facility","find","title","instructions","stateAndType","facilityName","open","facilityNameSearch","undefined","continue"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Popup from 'reactjs-popup'\nimport styles from './find.module.scss'\nimport classNames from 'classnames'\nimport statesSource from '../../../../assets/featureCollections/states.json'\nimport Util from '../../../../components/misc/Util.js'\n\n// Additional libraries\nimport SelectSearch from 'react-select-search'\n\n// JSX for submit page.\nconst Find = ({\n    stepNum,\n    findInputs,\n    setFindInputs,\n    facilities,\n    selectedFacility,\n    setSelectedFacility\n  }) => {\n\n  // Populate states in dropdown.\n  const stateOptions = statesSource.features.map(s => {\n    return {\n      ...s.properties, // state data fields from state JSON static file\n      name: s.properties.name, // \"Alabama\"\n      value: s.properties.abbr // \"AL\"\n    };\n  }).sort(Util.sortByName).reverse(); // A-Z sort\n\n  // Populate facility names in dropdown, if the state and type have been\n  // defined.\n  const stateAndTypeDefined = findInputs.state_abbr && findInputs.type;\n\n  const facilityNameOptions = stateAndTypeDefined ?\n    facilities.map(f => {\n      return {\n        ...f, // facility data fields from API response\n        name: Util.toTitleCase(f.name), // Name of facility for display in search\n        value: f.facility_id // Unique ID of facility from API response.\n      };\n    }).filter(f => {\n      // If state or type haven't been defined, don't populate facilities.\n      return findInputs.state_abbr === f.state // \"AL\"\n      && findInputs.type === f.type; // \"Hospital\"\n    }).sort(Util.sortByName).reverse() // A-Z sort\n    : []; // Otherwise return no facilities.\n\n  // Populate facility types in dropdown.\n  // TODO dynamically based on data.\n  const facilityTypeOptions = [\n    {\n      name: 'Hospital',\n      value: 'Hospital',\n    },\n    {\n      name: 'Large dialysis center',\n      value: 'Dialysis Facility',\n    },\n    {\n      name: 'Skilled nursing home',\n      value: 'Nursing Home',\n    },\n  ];\n\n  // onChange functions for the dropdowns in the Find section (state, type, and\n  // facility name).\n  const handleChange = {\n    // State dropdown onChange\n    state: (value, state, props) => {\n      const newFindInputs = {\n        ...findInputs,\n        state_abbr: value.value,\n        facility: {}, // Clear selected facility if state is changed.\n      };\n      setFindInputs(newFindInputs);\n    },\n    // Type dropdown onChange\n    type: (value, state, props) => {\n      const newFindInputs = {\n        ...findInputs,\n        type: value.value,\n        facility: {}, // Clear selected facility if type is changed.\n      };\n      setFindInputs(newFindInputs);\n    },\n    // Facility name dropdown onChange\n    facility: (value, state, props) => {\n      const newFindInputs = {\n        ...findInputs,\n        facility: value,\n      };\n      setFindInputs(newFindInputs);\n    },\n  };\n\n  // Find component JSX.\n  return (\n    <div className={styles.find}>\n      <h2 className={styles.title}>{stepNum}. Find a facility</h2>\n      <span className={styles.instructions}>Choose a state, facility type (hospital, dialysis center, or nursing home) and a facility for which to submit data.</span>\n      <div className={styles.stateAndType}>\n        <div className={classNames( { 'disabled': false } )}>\n          <h3>State</h3>\n          <SelectSearch options={stateOptions} name=\"state\" placeholder=\"Choose state\" value={findInputs.state_abbr} onChange={handleChange.state}/>\n        </div>\n        <div className={classNames( { 'disabled': false } )}>\n          <h3>Facility type</h3>\n          <SelectSearch options={facilityTypeOptions} name=\"type\" placeholder=\"Choose facility type\" value={findInputs.type} onChange={handleChange.type}/>\n        </div>\n      </div>\n      <div className={styles.facilityName}>\n        <div>\n          <h3>Facility name</h3>\n        </div>\n        <Popup\n          trigger={open => (\n            <div\n              className={\n                classNames(\n                  'wide',\n                  styles.facilityNameSearch,\n                  { 'disabled': !stateAndTypeDefined }\n                )\n              }\n              >\n              <SelectSearch options={facilityNameOptions} name=\"facility\" placeholder=\"Choose facility\" value={findInputs.facility.facility_id} onChange={handleChange.facility}/>\n            </div>\n          )}\n          position=\"top center\"\n          on=\"hover\"\n          closeOnDocumentClick\n          mouseEnterDelay={500}\n          disabled={stateAndTypeDefined}\n          >\n          <div>\n            <span>Please select a state and facility type above to continue.</span>\n          </div>\n      </Popup>\n      </div>\n      {\n        findInputs.facility.facility_id === undefined\n        && <span className={classNames(styles.instructions, styles.continue)}>\n            Please complete all required selections to continue.\n          </span>}\n    </div>\n  )\n}\n\nexport default Find\n"]},"metadata":{},"sourceType":"module"}