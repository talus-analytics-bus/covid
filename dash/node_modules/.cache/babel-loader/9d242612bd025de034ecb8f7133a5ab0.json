{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _fuse = _interopRequireDefault(require(\"fuse.js\"));\n\nvar _reactOnclickoutside = _interopRequireDefault(require(\"react-onclickoutside\"));\n\nvar _Bem = _interopRequireDefault(require(\"./Bem\"));\n\nvar _FlattenOptions = _interopRequireDefault(require(\"./FlattenOptions\"));\n\nvar _GroupOptions = _interopRequireDefault(require(\"./GroupOptions\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar SelectSearch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectSearch, _React$Component);\n  /**\n   * Component setup\n   * -------------------------------------------------------------------------*/\n\n\n  function SelectSearch(props) {\n    var _this;\n\n    _classCallCheck(this, SelectSearch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectSearch).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClickOutside\", function () {\n      _this.onBlur();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBlur\", function () {\n      if (_this.props.search && !_this.props.multiple) {\n        _this.search.current.blur();\n      }\n\n      var search = '';\n\n      if (_this.state.value && _this.props.search && !_this.props.multiple) {\n        var option = _this.findByValue(null, _this.state.value);\n\n        if (option) {\n          search = option.name;\n        }\n      }\n\n      _this.setState({\n        focus: false,\n        highlighted: null,\n        search: search\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onFocus\", function () {\n      _this.setState({\n        focus: true,\n        options: _this.state.defaultOptions,\n        search: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChange\", function (e) {\n      var value = e.target.value;\n\n      if (!value) {\n        value = '';\n      }\n\n      var options = _this.state.defaultOptions;\n      options = _this.getNewOptionsList(options, value);\n\n      _this.setState({\n        search: value,\n        options: options\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyPress\", function (e) {\n      if (!_this.state.options || _this.state.options.length < 1) {\n        return;\n      }\n      /** Enter */\n\n\n      if (e.keyCode === 13) {\n        _this.handleEnter();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyDown\", function (e) {\n      if (!_this.state.focus) {\n        return;\n      }\n      /** Tab */\n\n\n      if (e.keyCode === 9) {\n        _this.onBlur();\n\n        return;\n      }\n      /** Arrow Down */\n\n\n      if (e.keyCode === 40) {\n        _this.handleArrowDown();\n      }\n      /** Arrow Up */\n\n\n      if (e.keyCode === 38) {\n        _this.handleArrowUp();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onKeyUp\", function (e) {\n      /** Esc */\n      if (e.keyCode === 27) {\n        _this.handleEsc();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggle\", function () {\n      if (_this.state.focus) {\n        _this.onBlur();\n      } else {\n        _this.onFocus();\n      }\n    });\n\n    var _options = props.options,\n        _value = props.value,\n        multiple = props.multiple;\n    var stateValue = !_value && multiple ? [] : _value;\n    var flattenedOptions = (0, _FlattenOptions.default)(_options);\n    var _search = '';\n\n    if (stateValue) {\n      var option = _this.findByValue(flattenedOptions, stateValue);\n\n      if (option) {\n        _search = option.name;\n      }\n    }\n\n    _this.state = {\n      search: _search,\n      value: stateValue,\n      defaultOptions: flattenedOptions,\n      options: flattenedOptions,\n      highlighted: null,\n      focus: false\n    };\n    _this.classes = {\n      container: _this.props.multiple ? \"\".concat(_this.props.className, \" \").concat(_Bem.default.m(_this.props.className, 'multiple')) : _this.props.className,\n      search: _Bem.default.e(_this.props.className, 'search'),\n      select: _Bem.default.e(_this.props.className, 'select'),\n      options: _Bem.default.e(_this.props.className, 'options'),\n      option: _Bem.default.e(_this.props.className, 'option'),\n      row: _Bem.default.e(_this.props.className, 'row'),\n      group: _Bem.default.e(_this.props.className, 'group'),\n      groupHeader: _Bem.default.e(_this.props.className, 'group-header'),\n      out: _Bem.default.e(_this.props.className, 'out'),\n      label: _Bem.default.e(_this.props.className, 'label'),\n      focus: _this.props.multiple ? \"\".concat(_this.props.className, \" \").concat(_Bem.default.m(_this.props.className, 'multiple focus')) : \"\".concat(_this.props.className, \" \").concat(_Bem.default.m(_this.props.className, 'focus'))\n    };\n    _this.classes.focus += \" \".concat(_Bem.default.m(_this.props.className, 'select'));\n    _this.classes.container += \" \".concat(_Bem.default.m(_this.props.className, 'select'));\n    _this.container = _react.default.createRef();\n    _this.selectOptions = _react.default.createRef();\n    _this.select = _react.default.createRef();\n    _this.search = _react.default.createRef();\n    _this.outInput = _react.default.createRef();\n    return _this;\n  }\n  /**\n   * Component lifecycle\n   * -------------------------------------------------------------------------*/\n\n\n  _createClass(SelectSearch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onMount.call(null, this.publishOption(), this.state, this.props);\n      this.scrollToSelected();\n\n      if (this.search.current && this.props.autofocus === true) {\n        this.search.current.focus();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var nextState = {};\n      var _this$state = this.state,\n          defaultOptions = _this$state.defaultOptions,\n          value = _this$state.value;\n\n      if (nextProps.options !== defaultOptions) {\n        var flattenedOptions = (0, _FlattenOptions.default)(nextProps.options);\n        nextState.options = flattenedOptions;\n        nextState.defaultOptions = flattenedOptions;\n      }\n\n      if (nextProps.value !== value) {\n        var option = this.findByValue(defaultOptions, nextProps.value);\n\n        if (option) {\n          nextState.value = nextProps.value;\n          nextState.search = option.name;\n        } else {\n          nextState.value = [];\n          nextState.search = '';\n        }\n      }\n\n      this.setState(nextState);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      /* Fire callbacks */\n      if (this.state.focus && this.state.focus !== prevState.focus) {\n        this.handleFocus();\n        this.props.onFocus.call(null, this.publishOption(), this.state, this.props);\n      }\n\n      if (!this.state.focus && this.state.focus !== prevState.focus) {\n        this.handleBlur();\n        this.props.onBlur.call(null, this.publishOption(), this.state, this.props);\n      }\n\n      if (this.state.highlighted !== prevState.highlighted) {\n        this.props.onHighlight.call(null, this.state.options[this.state.highlighted], this.state, this.props);\n      }\n\n      this.scrollToSelected(true);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('keydown', this.onKeyDown);\n      document.removeEventListener('keypress', this.onKeyPress);\n      document.removeEventListener('keyup', this.onKeyUp);\n    }\n    /**\n     * DOM event handlers\n     * -------------------------------------------------------------------------*/\n\n  }, {\n    key: \"handleArrowDown\",\n\n    /**\n     * Keyboard actions\n     * -------------------------------------------------------------------------*/\n    value: function handleArrowDown() {\n      if (this.state.options.length < 1) {\n        return;\n      }\n\n      var highlighted = null;\n\n      if (this.state.highlighted != null) {\n        highlighted = this.state.highlighted + 1;\n      } else {\n        highlighted = 0;\n      }\n\n      if (highlighted > this.state.options.length - 1) {\n        highlighted = 0;\n      }\n\n      this.setState({\n        highlighted: highlighted\n      });\n    }\n  }, {\n    key: \"handleArrowUp\",\n    value: function handleArrowUp() {\n      if (this.state.options.length < 1) {\n        return;\n      }\n\n      var highlighted = this.state.options.length - 1;\n\n      if (this.state.highlighted != null) {\n        highlighted = this.state.highlighted - 1;\n      }\n\n      if (highlighted < 0) {\n        highlighted = this.state.options.length - 1;\n      }\n\n      this.setState({\n        highlighted: highlighted\n      });\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter() {\n      this.chooseOption();\n    }\n  }, {\n    key: \"handleEsc\",\n    value: function handleEsc() {\n      this.onBlur();\n    }\n    /**\n     * Custom methods\n     * -------------------------------------------------------------------------*/\n\n  }, {\n    key: \"publishOption\",\n    value: function publishOption(value) {\n      var publishValue = value;\n\n      if (typeof value === 'undefined') {\n        publishValue = this.state.value;\n      }\n\n      if (this.props.multiple) {\n        return this.publishOptionMultiple(publishValue);\n      }\n\n      return this.publishOptionSingle(publishValue);\n    }\n  }, {\n    key: \"publishOptionSingle\",\n    value: function publishOptionSingle(value) {\n      return this.findByValue(null, value);\n    }\n  }, {\n    key: \"publishOptionMultiple\",\n    value: function publishOptionMultiple(value) {\n      var _this2 = this;\n\n      return value.map(function (publishValue) {\n        return _this2.findByValue(null, publishValue);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      document.addEventListener('keydown', this.onKeyDown);\n      document.addEventListener('keypress', this.onKeyPress);\n      document.addEventListener('keyup', this.onKeyUp);\n\n      if (this.state.options.length > 0 && !this.props.multiple) {\n        var element = this.select.current;\n        var clientHeight = document.documentElement.clientHeight;\n        var viewportHeight = Math.max(clientHeight, window.innerHeight || 0);\n        var elementPos = element.getBoundingClientRect();\n        var selectHeight = viewportHeight - elementPos.top - 20;\n        element.style.maxHeight = \"\".concat(selectHeight, \"px\");\n        this.scrollToSelected(true, 'selected');\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      document.removeEventListener('keydown', this.onKeyDown);\n      document.removeEventListener('keypress', this.onKeyPress);\n      document.removeEventListener('keyup', this.onKeyUp);\n    }\n  }, {\n    key: \"findByValue\",\n    value: function findByValue(source, value) {\n      var findSource = source;\n\n      if (!source || source.length < 1) {\n        findSource = this.state.defaultOptions;\n      }\n\n      if (!findSource) {\n        return null;\n      }\n\n      return findSource.filter(function (object) {\n        return object.value === value;\n      })[0];\n    }\n  }, {\n    key: \"chooseOption\",\n    value: function chooseOption(value) {\n      var _this3 = this;\n\n      var currentValue = this.state.value;\n      var option;\n      var search;\n\n      if (!value) {\n        var index = this.state.highlighted;\n\n        if (!index || this.state.options.length - 1 < index) {\n          index = 0;\n        }\n\n        option = this.state.options[index];\n      } else {\n        option = this.findByValue(this.state.defaultOptions, value);\n      }\n\n      if (this.props.multiple) {\n        if (!currentValue) {\n          currentValue = [];\n        }\n\n        currentValue.push(option.value);\n        search = '';\n      } else {\n        currentValue = option.value;\n        search = option.name;\n      }\n\n      var options = this.state.defaultOptions;\n      var highlighted = this.props.multiple ? this.state.highlighted : null;\n      this.setState({\n        value: currentValue,\n        search: search,\n        options: options,\n        highlighted: highlighted,\n        focus: this.props.multiple\n      });\n      setTimeout(function () {\n        var publishOption = _this3.publishOption(currentValue);\n\n        _this3.props.onChange.call(null, publishOption, _this3.state, _this3.props);\n      }, 50);\n\n      if (this.props.search && !this.props.multiple) {\n        this.search.current.blur();\n      }\n    }\n  }, {\n    key: \"removeOption\",\n    value: function removeOption(value) {\n      var _this4 = this;\n\n      if (!value) {\n        return false;\n      }\n\n      var option = this.findByValue(this.state.defaultOptions, value);\n      var optionValue = this.state.value;\n\n      if (!option || optionValue.indexOf(option.value) < 0) {\n        return false;\n      }\n\n      optionValue.splice(optionValue.indexOf(option.value), 1);\n      this.setState({\n        value: optionValue,\n        search: ''\n      });\n      setTimeout(function () {\n        _this4.props.onChange.call(null, _this4.publishOption(optionValue), _this4.state, _this4.props);\n      }, 50);\n      return true;\n    }\n  }, {\n    key: \"getNewOptionsList\",\n    value: function getNewOptionsList(options, value) {\n      if (options && options.length > 0 && value && value.length > 0) {\n        var fuse = new _fuse.default(options, this.props.fuse);\n        return fuse.search(value).map(function (item, index) {\n          return Object.assign({}, item, {\n            index: index\n          });\n        });\n      }\n\n      return options;\n    }\n  }, {\n    key: \"scrollToSelected\",\n    value: function scrollToSelected() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hover';\n\n      if (!force && (this.props.multiple || this.state.highlighted == null || !this.select.current || !this.state.focus || this.state.options.length < 1) || !this.selectOptions.current) {\n        return;\n      }\n\n      var selectedItem = this.selectOptions.current.querySelector(\".\".concat(_Bem.default.m(this.classes.option, selected)));\n\n      if (selectedItem) {\n        var searchOffset = this.search.current ? this.search.current.clientHeight : 0;\n        this.select.current.scrollTop = selectedItem.offsetTop - searchOffset - this.props.height / 2 + selectedItem.clientHeight / 2;\n      }\n    }\n    /**\n     * Component render\n     * -------------------------------------------------------------------------*/\n\n  }, {\n    key: \"renderOption\",\n    value: function renderOption(option, stateValue, multiple) {\n      var _this5 = this;\n\n      var elementVal = option.value;\n      var element = null;\n      var className = this.classes.option;\n      className += \" \".concat(this.classes.row);\n\n      if (this.state.highlighted === option.index) {\n        className += \" \".concat(_Bem.default.m(this.classes.option, 'hover'));\n      }\n\n      if (multiple && stateValue.indexOf(elementVal) >= 0 || elementVal === stateValue) {\n        className += \" \".concat(_Bem.default.m(this.classes.option, 'selected'));\n      }\n\n      if (this.props.multiple) {\n        if (this.state.value.indexOf(option.value) < 0) {\n          element = _react.default.createElement(\"li\", {\n            role: \"menuitem\",\n            className: className,\n            onClick: function onClick() {\n              return _this5.chooseOption(option.value);\n            },\n            key: \"\".concat(option.value, \"-option\"),\n            \"data-value\": option.value\n          }, this.props.renderOption(option, this.state, this.props));\n        } else {\n          element = _react.default.createElement(\"li\", {\n            role: \"menuitem\",\n            className: className,\n            onClick: function onClick() {\n              return _this5.removeOption(option.value);\n            },\n            key: \"\".concat(option.value, \"-option\"),\n            \"data-value\": option.value\n          }, this.props.renderOption(option, this.state, this.props));\n        }\n      } else if (option.value === this.state.value) {\n        element = _react.default.createElement(\"li\", {\n          role: \"menuitem\",\n          className: className,\n          key: \"\".concat(option.value, \"-option\"),\n          \"data-value\": option.value\n        }, this.props.renderOption(option));\n      } else {\n        element = _react.default.createElement(\"li\", {\n          role: \"menuitem\",\n          className: className,\n          onClick: function onClick() {\n            return _this5.chooseOption(option.value);\n          },\n          key: \"\".concat(option.value, \"-option\"),\n          \"data-value\": option.value\n        }, this.props.renderOption(option, this.state, this.props));\n      }\n\n      return element;\n    }\n  }, {\n    key: \"renderOptions\",\n    value: function renderOptions() {\n      var _this6 = this;\n\n      var select = null;\n      var selectStyle = {};\n      var options = [];\n      var multiple = this.props.multiple;\n      var _this$state2 = this.state,\n          stateValue = _this$state2.value,\n          foundOptions = _this$state2.options;\n\n      if (foundOptions && foundOptions.length > 0) {\n        var groupedOptions = (0, _GroupOptions.default)(foundOptions);\n\n        if (groupedOptions && groupedOptions.length) {\n          groupedOptions.forEach(function (option) {\n            if ({}.hasOwnProperty.call(option, 'type') && option.type === 'group') {\n              var subOptions = [];\n              option.items.forEach(function (groupOption) {\n                subOptions.push(_this6.renderOption(groupOption, stateValue, multiple));\n              });\n              options.push(_react.default.createElement(\"li\", {\n                className: _this6.classes.row,\n                key: option.groupId\n              }, _react.default.createElement(\"div\", {\n                className: _this6.classes.group\n              }, _react.default.createElement(\"div\", {\n                className: _this6.classes.groupHeader\n              }, _this6.props.renderGroupHeader(option.name)), _react.default.createElement(\"ul\", {\n                className: _this6.classes.options\n              }, subOptions))));\n            } else {\n              options.push(_this6.renderOption(option, stateValue, multiple));\n            }\n          });\n\n          if (options.length > 0) {\n            select = _react.default.createElement(\"ul\", {\n              ref: this.selectOptions,\n              className: this.classes.options\n            }, options);\n          }\n        }\n      }\n\n      if (this.props.multiple) {\n        selectStyle.height = this.props.height;\n      }\n\n      var className = this.classes.select;\n\n      if (this.state.focus) {\n        className += \" \".concat(_Bem.default.m(this.classes.select, 'display'));\n      }\n\n      return _react.default.createElement(\"div\", {\n        ref: this.select,\n        className: className,\n        style: selectStyle\n      }, select);\n    }\n  }, {\n    key: \"renderOutElement\",\n    value: function renderOutElement() {\n      var _this7 = this;\n\n      var option = null;\n      var outElement;\n\n      if (this.props.multiple) {\n        if (this.state.value) {\n          var finalValueOptions = [];\n          this.state.value.forEach(function (value) {\n            option = _this7.findByValue(_this7.state.defaultOptions, value);\n            finalValueOptions.push(_react.default.createElement(\"option\", {\n              key: option.value,\n              value: option.value\n            }, option.name));\n          });\n          outElement = _react.default.createElement(\"select\", {\n            value: this.state.value,\n            className: this.classes.out,\n            name: this.props.name,\n            readOnly: true,\n            multiple: true\n          }, finalValueOptions);\n        } else {\n          outElement = _react.default.createElement(\"select\", {\n            className: this.classes.out,\n            name: this.props.name,\n            readOnly: true,\n            multiple: true\n          }, _react.default.createElement(\"option\", null, \"Nothing selected\"));\n        }\n      } else if (this.props.search) {\n        outElement = _react.default.createElement(\"input\", {\n          type: \"hidden\",\n          defaultValue: this.state.value,\n          ref: this.outInput,\n          name: this.props.name\n        });\n      } else {\n        var outStyle = {\n          opacity: 0,\n          position: 'absolute',\n          top: '-9999px',\n          left: '-9999px'\n        };\n        outElement = _react.default.createElement(\"input\", {\n          type: \"text\",\n          onFocus: this.onFocus,\n          style: outStyle,\n          value: this.state.value,\n          readOnly: true,\n          ref: this.outInput,\n          name: this.props.name\n        });\n      }\n\n      return outElement;\n    }\n  }, {\n    key: \"renderSearchField\",\n    value: function renderSearchField() {\n      var searchField = null;\n\n      if (this.props.search) {\n        var name = null;\n        searchField = _react.default.createElement(\"input\", {\n          name: name,\n          ref: this.search,\n          onFocus: this.onFocus,\n          onKeyPress: this.onKeyPress,\n          className: this.classes.search,\n          type: \"search\",\n          value: this.state.search,\n          onChange: this.onChange,\n          placeholder: this.props.placeholder\n        });\n      } else {\n        var option;\n        var labelValue;\n        var labelClassName;\n\n        if (!this.state.value) {\n          labelValue = this.props.placeholder;\n          labelClassName = \"\".concat(this.classes.search, \" \").concat(_Bem.default.m(this.classes.search, 'placeholder'));\n        } else {\n          option = this.findByValue(this.state.defaultOptions, this.state.value);\n\n          if (!option) {\n            option = this.state.defaultOptions[0];\n          }\n\n          labelValue = option.name;\n          labelClassName = this.classes.search;\n        }\n\n        searchField = _react.default.createElement(\"div\", {\n          tabIndex: 0,\n          role: \"button\",\n          onClick: this.toggle,\n          className: labelClassName\n        }, this.props.renderValue(labelValue, option, this.state, this.props));\n      }\n\n      return searchField;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.state.focus ? this.classes.focus : this.classes.container;\n      return _react.default.createElement(\"div\", {\n        className: className,\n        ref: this.container\n      }, this.renderOutElement(), this.renderSearchField(), this.renderOptions());\n    }\n  }]);\n\n  return SelectSearch;\n}(_react.default.Component);\n\n_defineProperty(SelectSearch, \"defaultProps\", {\n  className: 'select-search-box',\n  search: true,\n  value: '',\n  placeholder: null,\n  multiple: false,\n  height: 200,\n  name: null,\n  autofocus: false,\n  onHighlight: function onHighlight() {},\n  onMount: function onMount() {},\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {},\n  renderOption: function renderOption(option) {\n    return option.name;\n  },\n  renderGroupHeader: function renderGroupHeader(title) {\n    return title;\n  },\n  renderValue: function renderValue(label) {\n    return label;\n  },\n  fuse: {\n    keys: ['name', 'groupName'],\n    threshold: 0.3\n  }\n});\n\nvar _default = (0, _reactOnclickoutside.default)(SelectSearch);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}