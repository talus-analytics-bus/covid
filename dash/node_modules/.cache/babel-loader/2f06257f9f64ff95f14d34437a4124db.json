{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/dash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/dash/src/components/map/Map.js\";\nimport React from 'react';\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './map.scss';\nimport styles from './map.module.scss';\nimport initMap from './mapUtils';\nimport Legend from './legend/Legend';\nimport ResetZoom from './resetZoom/ResetZoom';\nimport Filter from './filter/Filter';\nimport GeomPopup from './geomPopup/GeomPopup.js';\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst Map = ({\n  fillObservations,\n  bubbleObservations,\n  mappedFacilityTypes,\n  setMappedFacilityTypes\n}) => {\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: 0,\n    latitude: 0,\n    zoom: 4.0\n  };\n\n  const _React$useState = React.useState(defaultViewport),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        viewport = _React$useState2[0],\n        setViewport = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedGeom = _React$useState4[0],\n        setSelectedGeom = _React$useState4[1];\n\n  const _React$useState5 = React.useState(-1),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedGeomID = _React$useState6[0],\n        setSelectedGeomID = _React$useState6[1];\n\n  const _React$useState7 = React.useState([0, 0]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        cursorLngLat = _React$useState8[0],\n        setCursorLngLat = _React$useState8[1];\n\n  const _React$useState9 = React.useState(false),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        showGeomPopup = _React$useState10[0],\n        setShowGeomPopup = _React$useState10[1]; // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n\n\n  const _React$useState11 = React.useState(false),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        showReset = _React$useState12[0],\n        setShowReset = _React$useState12[1];\n\n  let mapRef = React.createRef();\n  React.useEffect(() => {\n    const map = mapRef.getMap();\n    initMap(map, fillObservations, bubbleObservations);\n  }, []);\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n\n  const resetViewport = () => {\n    // Hide the reset button after click.\n    setShowReset(false); // Hide state tooltip\n\n    setShowGeomPopup(false);\n    const map = mapRef.getMap();\n    map.setFilter('selected-fill', ['!', true]);\n    map.setFilter('selected-border', ['!', true]); // Change viewport back to default.\n\n    setViewport(defaultViewport);\n  };\n  /**\n   * Fired when checkbox is changed; updates the state of the checkbox.\n   * @method handleCheck\n   * @param  {obj}    e Change event\n   */\n\n\n  const handleCheck = (e, checkboxList) => {\n    // get checkbox that was clicked\n    const clickedCheckbox = checkboxList.find(c => c.label === e.target.id); // update state\n\n    clickedCheckbox.state[1](e.target.checked); // update list of allowed facility types for mapping / bar chart. Note:\n    // \"concat\" must be used instead of \"push\" in order for React to detect a\n    // state change in the setter function of the hook that is called at the end\n    // of this code block.\n\n    let updatedFacilityTypes = mappedFacilityTypes;\n\n    if (e.target.checked) {\n      updatedFacilityTypes = updatedFacilityTypes.concat([e.target.value]);\n    } else {\n      updatedFacilityTypes = updatedFacilityTypes.filter(t => t !== e.target.value);\n    }\n\n    setMappedFacilityTypes(updatedFacilityTypes); // Get map object\n\n    const map = mapRef.getMap();\n  };\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n\n\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap(); // Get list of features under the mouse cursor.\n\n    const features = map.queryRenderedFeatures(e.point); // Use pointer cursor for any facility icons, grab cursor otherwise.\n\n    const onFacility = features.find(f => f['source'].endsWith('-facilities')) !== undefined;\n    const onState = viewport.zoom < 7 // don't show pointer if zoomed in too far over state\n    && features.find(f => f['source'] === 'states') !== undefined;\n    const showPointer = onFacility || onState;\n    map.getContainer().parentElement.parentElement.style.cursor = showPointer ? 'pointer' : 'grab';\n  };\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n\n\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = e => {\n      try {\n        if (e.target.className.includes('legend') || e.target.className.includes('filter') || e.target.offsetParent.className.includes('legend') || e.target.offsetParent.className.includes('filter')) {\n          return true;\n        }\n      } catch {\n        console.log('[Error] Unexpected click event: ');\n        console.log(e);\n        return false;\n      }\n\n      return false;\n    }; // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n\n\n    if (clickedMenus(e)) return; // If there is a highlighted country, turn it off\n\n    if (selectedGeomID > 0) {\n      map.setFeatureState({\n        source: 'geoms',\n        sourceLayer: 'countries_id-3n17an',\n        id: selectedGeomID\n      }, {\n        clicked: false\n      });\n      setShowGeomPopup(false);\n      setSelectedGeom('');\n      setSelectedGeomID(-1);\n    }\n\n    const clickedOnGeom = e.features.find(f => f.layer.id === 'geom-fills');\n    if (typeof clickedOnGeom === 'undefined') return;\n    console.log(clickedOnGeom); // Otherwise, highlight state and show its tooltip.\n\n    const map = mapRef.getMap();\n    const id = clickedOnGeom.id; // map.setFilter('selected-fill', ['==', 'ISO_A3', id])\n\n    map.setFeatureState({\n      source: 'geoms',\n      sourceLayer: 'countries_id-3n17an',\n      id: id\n    }, {\n      clicked: true\n    }); // map.setFilter('selected-border', ['==', 'ISO_A3', id])\n\n    console.log(map.featureState);\n    setSelectedGeom(clickedOnGeom.properties.ADMIN);\n    setSelectedGeomID(id);\n    setCursorLngLat(e.lngLat);\n    setShowGeomPopup(true);\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n      // Get current zoom level.\n      const curZoom = viewport.zoom; // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n\n      const flyZoom = finalZoom !== null ? finalZoom : Math.min(4, curZoom * 1.50); // Start off flying\n\n      let flying = true;\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n\n      function onFlyEnd() {\n        // Get map object reference.\n        const map = mapRef.getMap(); // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n\n        map.off('moveend', onFlyEnd); // If flying,\n\n        if (flying) {\n          // Stop flying,\n          flying = false; // Set viewport state to the flight destination and zoom level\n\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      }\n\n      ; // Get map object reference.\n\n      const map = mapRef.getMap(); // Assign event listener so viewport is updated when flight is over.\n\n      map.on('moveend', onFlyEnd); // Fly to the position occupied by the clicked cluster on the map.\n\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) {\n          return t;\n        }\n      });\n      setShowReset(true);\n    };\n  };\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap();\n    const id = selectedGeomID;\n    map.setFeatureState({\n      source: 'geoms',\n      sourceLayer: 'countries_id-3n17an',\n      id: id\n    }, {\n      clicked: false\n    });\n    setShowGeomPopup(false);\n    setSelectedGeom('');\n    setSelectedGeomID(-1); //map.setFilter('selected-fill', ['!', true])\n    //map.setFilter('selected-border', ['!', true])\n  }; // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n\n\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160,\n    // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1]\n  };\n  return React.createElement(ReactMapGL, Object.assign({\n    ref: map => mapRef = map,\n    mapboxApiAccessToken: TOKEN //mapStyle='mapbox://styles/mapbox/streets-v10'\n    ,\n    mapStyle: \"mapbox://styles/traethethird/ck0ia6pvc2cpc1cpe5nx5b7p5\"\n  }, viewport, {\n    maxZoom: 4,\n    minZoom: 2,\n    onViewportChange: v => {\n      // Update viewport.\n      setViewport(v); // If viewport deviates from the default zoom or longlat, show the\n      // \"Reset\" button in the bottom left. Otherwise, hide it.\n\n      if (v.zoom !== defaultViewport.zoom || v.longitude !== defaultViewport.longitude || v.latitude !== defaultViewport.latitude) setShowReset(true);else setShowReset(false);\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    doubleClickZoom: false //remove 300ms delay on clicking\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: '30px',\n      left: 0,\n      padding: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, React.createElement(NavigationControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  })), React.createElement(Filter, {\n    handleCheck: handleCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }), showReset && React.createElement(ResetZoom, {\n    handleClick: resetViewport,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }), showGeomPopup && React.createElement(Popup, {\n    color: \"#4286f4\",\n    style: {\n      margin: 0,\n      padding: 0,\n      backgroundColor: '#4286f4'\n    },\n    longitude: cursorLngLat[0],\n    latitude: cursorLngLat[1],\n    closeButton: true,\n    closeOnClick: true,\n    onClose: onPopupClose,\n    anchor: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, React.createElement(GeomPopup, {\n    geom: selectedGeom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  })));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/map/Map.js"],"names":["React","ReactMapGL","NavigationControl","Popup","axios","classNames","styles","initMap","Legend","ResetZoom","Filter","GeomPopup","TOKEN","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","Map","fillObservations","bubbleObservations","mappedFacilityTypes","setMappedFacilityTypes","defaultViewport","width","height","longitude","latitude","zoom","useState","viewport","setViewport","selectedGeom","setSelectedGeom","selectedGeomID","setSelectedGeomID","cursorLngLat","setCursorLngLat","showGeomPopup","setShowGeomPopup","showReset","setShowReset","mapRef","createRef","useEffect","map","getMap","resetViewport","setFilter","handleCheck","e","checkboxList","clickedCheckbox","find","c","label","target","id","state","checked","updatedFacilityTypes","concat","value","filter","t","handleMouseMove","features","queryRenderedFeatures","point","onFacility","f","endsWith","undefined","onState","showPointer","getContainer","parentElement","style","cursor","handleClick","clickedMenus","className","includes","offsetParent","console","log","setFeatureState","source","sourceLayer","clicked","clickedOnGeom","layer","featureState","properties","ADMIN","lngLat","flyToLongLat","longlat","finalZoom","callback","curZoom","flyZoom","Math","min","flying","onFlyEnd","off","newViewport","on","flyTo","center","bearing","speed","curve","easing","onPopupClose","limLon","limLat","limZoom","maxBounds","minLongitude","maxLongitude","minLatitude","maxLatitude","v","position","bottom","left","padding","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl'\nimport axios from 'axios'\n\nimport classNames from 'classnames'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport './map.scss'\nimport styles from './map.module.scss'\n\nimport initMap from './mapUtils'\n\nimport Legend from './legend/Legend'\nimport ResetZoom from './resetZoom/ResetZoom'\nimport Filter from './filter/Filter'\nimport GeomPopup from './geomPopup/GeomPopup.js'\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n\nconst Map = ({ fillObservations, bubbleObservations, mappedFacilityTypes, setMappedFacilityTypes }) => {\n\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: 0,\n    latitude: 0,\n    zoom: 4.0\n  };\n  const [viewport, setViewport] = React.useState(defaultViewport);\n  const [selectedGeom, setSelectedGeom] = React.useState('')\n  const [selectedGeomID, setSelectedGeomID] = React.useState(-1)\n  const [cursorLngLat, setCursorLngLat] = React.useState([0, 0])\n  const [showGeomPopup, setShowGeomPopup] = React.useState(false)\n\n  // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n  const [showReset, setShowReset] = React.useState(false);\n\n  let mapRef = React.createRef()\n  React.useEffect(() => {\n    const map = mapRef.getMap()\n    initMap(map, fillObservations, bubbleObservations)\n  }, [])\n\n\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n  const resetViewport = () => {\n\n    // Hide the reset button after click.\n    setShowReset(false);\n\n    // Hide state tooltip\n    setShowGeomPopup(false);\n    const map = mapRef.getMap();\n    map.setFilter('selected-fill', ['!', true])\n    map.setFilter('selected-border', ['!', true])\n\n    // Change viewport back to default.\n    setViewport(defaultViewport);\n  };\n\n  /**\n   * Fired when checkbox is changed; updates the state of the checkbox.\n   * @method handleCheck\n   * @param  {obj}    e Change event\n   */\n  const handleCheck = (e, checkboxList) => {\n\n    // get checkbox that was clicked\n    const clickedCheckbox = checkboxList.find(c => c.label === e.target.id);\n\n    // update state\n    clickedCheckbox.state[1](e.target.checked);\n\n    // update list of allowed facility types for mapping / bar chart. Note:\n    // \"concat\" must be used instead of \"push\" in order for React to detect a\n    // state change in the setter function of the hook that is called at the end\n    // of this code block.\n    let updatedFacilityTypes = mappedFacilityTypes;\n    if (e.target.checked) {\n      updatedFacilityTypes =\n        updatedFacilityTypes.concat([e.target.value]);\n    } else {\n      updatedFacilityTypes =\n        updatedFacilityTypes.filter(t => t !== e.target.value);\n    }\n    setMappedFacilityTypes(updatedFacilityTypes);\n\n    // Get map object\n    const map = mapRef.getMap();\n  };\n\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap();\n\n    // Get list of features under the mouse cursor.\n    const features = map.queryRenderedFeatures(e.point);\n\n    // Use pointer cursor for any facility icons, grab cursor otherwise.\n    const onFacility =\n      features.find(f => f['source'].endsWith('-facilities')) !== undefined;\n    const onState =\n      viewport.zoom < 7 // don't show pointer if zoomed in too far over state\n      && features.find(f => f['source'] === 'states') !== undefined;\n    const showPointer = onFacility || onState;\n    map.getContainer().parentElement.parentElement.style.cursor =\n      showPointer ? 'pointer' : 'grab';\n  };\n\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = (e) => {\n      try {\n        if (\n          e.target.className.includes('legend')\n          || e.target.className.includes('filter')\n          || e.target.offsetParent.className.includes('legend')\n          || e.target.offsetParent.className.includes('filter')) {\n            return true;\n          }\n        } catch {\n          console.log('[Error] Unexpected click event: ')\n          console.log(e);\n          return false;\n        }\n        return false;\n    };\n\n    // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n    if (clickedMenus(e)) return;\n\n    // If there is a highlighted country, turn it off\n    if (selectedGeomID > 0) {\n      map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: selectedGeomID }, {clicked: false});\n      setShowGeomPopup(false)\n      setSelectedGeom('')\n      setSelectedGeomID(-1)\n    }\n\n    const clickedOnGeom = e.features.find(f => f.layer.id === 'geom-fills')\n\n    if (typeof clickedOnGeom === 'undefined') return;\n\n    console.log(clickedOnGeom)\n\n    // Otherwise, highlight state and show its tooltip.\n    const map = mapRef.getMap()\n\n    const id = clickedOnGeom.id\n    // map.setFilter('selected-fill', ['==', 'ISO_A3', id])\n    map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: id }, {clicked: true});\n    // map.setFilter('selected-border', ['==', 'ISO_A3', id])\n\n    console.log(map.featureState)\n\n    setSelectedGeom(clickedOnGeom.properties.ADMIN)\n    setSelectedGeomID(id)\n    setCursorLngLat(e.lngLat)\n    setShowGeomPopup(true)\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n\n      // Get current zoom level.\n      const curZoom = viewport.zoom;\n\n      // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n      const flyZoom = finalZoom !== null ?\n        finalZoom : Math.min(4, curZoom*1.50);\n\n      // Start off flying\n      let flying = true;\n\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n      function onFlyEnd () {\n\n        // Get map object reference.\n        const map = mapRef.getMap();\n\n        // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n        map.off('moveend', onFlyEnd);\n\n        // If flying,\n        if (flying) {\n\n          // Stop flying,\n          flying = false;\n\n          // Set viewport state to the flight destination and zoom level\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom,\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      };\n\n      // Get map object reference.\n      const map = mapRef.getMap();\n\n      // Assign event listener so viewport is updated when flight is over.\n      map.on('moveend', onFlyEnd);\n\n      // Fly to the position occupied by the clicked cluster on the map.\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) { return t; }\n      });\n\n      setShowReset(true);\n    };\n  }\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap()\n    const id = selectedGeomID\n    map.setFeatureState({source: 'geoms', sourceLayer: 'countries_id-3n17an', id: id }, {clicked: false});\n    setShowGeomPopup(false)\n    setSelectedGeom('')\n    setSelectedGeomID(-1)\n\n    //map.setFilter('selected-fill', ['!', true])\n    //map.setFilter('selected-border', ['!', true])\n  }\n\n  // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160, // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1],\n  };\n\n  return (\n    <ReactMapGL\n      ref={map => (mapRef = map)}\n      mapboxApiAccessToken={TOKEN}\n      //mapStyle='mapbox://styles/mapbox/streets-v10'\n      mapStyle='mapbox://styles/traethethird/ck0ia6pvc2cpc1cpe5nx5b7p5'\n      {...viewport}\n      maxZoom = {4}\n      minZoom = {2}\n      onViewportChange={v => {\n        // Update viewport.\n        setViewport(v);\n\n        // If viewport deviates from the default zoom or longlat, show the\n        // \"Reset\" button in the bottom left. Otherwise, hide it.\n        if (\n            v.zoom !== defaultViewport.zoom\n            || v.longitude !== defaultViewport.longitude\n            || v.latitude !== defaultViewport.latitude\n          ) setShowReset(true);\n        else setShowReset(false);\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      doubleClickZoom={false} //remove 300ms delay on clicking\n    >\n      <div\n        style={{\n          position: 'absolute',\n          bottom: '30px',\n          left: 0,\n          padding: '10px'\n        }}\n      >\n      <NavigationControl />\n      </div>\n      <Filter handleCheck={handleCheck} />\n      <Legend />\n      {showReset && (<ResetZoom handleClick={resetViewport}/>)}\n      {showGeomPopup && (\n        <Popup\n          color='#4286f4'\n          style={{ margin: 0, padding: 0, backgroundColor: '#4286f4' }}\n          longitude={cursorLngLat[0]}\n          latitude={cursorLngLat[1]}\n          closeButton={true}\n          closeOnClick={true}\n          onClose={onPopupClose}\n          anchor='top'\n        >\n          <GeomPopup\n            geom={selectedGeom}\n          />\n        </Popup>\n      )}\n    </ReactMapGL>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}