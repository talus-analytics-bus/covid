{"ast":null,"code":"import axios from 'axios';\nvar API_BASE = process.env.REACT_APP_API_BASE_URL;\n\nif (typeof API_BASE === 'undefined') {\n  API_BASE = 'http://localhost:5002';\n}\n/**\n * Get observation data from API. Updates the observation data and loading status\n * when complete.\n * @method getObservations\n */\n\n\nconst Query = async function (metric_id, temporal_resolution, start_date, end_date, country) {\n  end_date = typeof end_date !== 'undefined' ? end_date : start_date;\n  country = typeof country !== 'undefined' ? country : 'all';\n  var params = {\n    metric_id: metric_id,\n    temporal_resolution: temporal_resolution,\n    spatial_resolution: 'country',\n    start: start_date,\n    end: end_date\n  };\n\n  if (country !== 'all') {\n    params['place_id'] = country;\n  }\n\n  ;\n  const res = await axios(\"\".concat(API_BASE, \"/observations\"), {\n    params\n  });\n  return res.data.data;\n};\n\nexport default Query;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/misc/Query.js"],"names":["axios","API_BASE","process","env","REACT_APP_API_BASE_URL","Query","metric_id","temporal_resolution","start_date","end_date","country","params","spatial_resolution","start","end","res","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA3B;;AACA,IAAI,OAAOH,QAAP,KAAoB,WAAxB,EAAqC;AACnCA,EAAAA,QAAQ,GAAG,uBAAX;AACD;AAED;;;;;;;AAMA,MAAMI,KAAK,GAAG,gBAAgBC,SAAhB,EAA2BC,mBAA3B,EAAgDC,UAAhD,EAA4DC,QAA5D,EAAsEC,OAAtE,EAA+E;AAC3FD,EAAAA,QAAQ,GAAG,OAAOA,QAAP,KAAoB,WAApB,GAAkCA,QAAlC,GAA6CD,UAAxD;AACAE,EAAAA,OAAO,GAAG,OAAOA,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C,KAArD;AAEA,MAAIC,MAAM,GAAG;AACXL,IAAAA,SAAS,EAAEA,SADA;AAEXC,IAAAA,mBAAmB,EAAEA,mBAFV;AAGXK,IAAAA,kBAAkB,EAAE,SAHT;AAIXC,IAAAA,KAAK,EAAEL,UAJI;AAKXM,IAAAA,GAAG,EAAEL;AALM,GAAb;;AAQA,MAAIC,OAAO,KAAK,KAAhB,EAAuB;AAAEC,IAAAA,MAAM,CAAC,UAAD,CAAN,GAAqBD,OAArB;AAA6B;;AAAA;AAEtD,QAAMK,GAAG,GAAG,MAAMf,KAAK,WAAIC,QAAJ,oBAA6B;AAClDU,IAAAA;AADkD,GAA7B,CAAvB;AAIA,SAAOI,GAAG,CAACC,IAAJ,CAASA,IAAhB;AACD,CAnBD;;AAqBA,eAAeX,KAAf","sourcesContent":["import axios from 'axios'\n\nvar API_BASE = process.env.REACT_APP_API_BASE_URL\nif (typeof API_BASE === 'undefined') {\n  API_BASE = 'http://localhost:5002'\n}\n\n/**\n * Get observation data from API. Updates the observation data and loading status\n * when complete.\n * @method getObservations\n */\n\nconst Query = async function (metric_id, temporal_resolution, start_date, end_date, country) {\n  end_date = typeof end_date !== 'undefined' ? end_date : start_date;\n  country = typeof country !== 'undefined' ? country : 'all';\n\n  var params = {\n    metric_id: metric_id,\n    temporal_resolution: temporal_resolution,\n    spatial_resolution: 'country',\n    start: start_date,\n    end: end_date\n  };\n\n  if (country !== 'all') { params['place_id'] = country};\n\n  const res = await axios(`${API_BASE}/observations`, {\n    params\n  });\n\n  return res.data.data\n};\n\nexport default Query;\n"]},"metadata":{},"sourceType":"module"}