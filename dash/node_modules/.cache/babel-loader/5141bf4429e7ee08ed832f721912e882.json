{"ast":null,"code":"// Utility functions.\nconst Util = {}; // Sorting functions to sort alerts and statuses data by datetime and by\n// unique ID (sequential relative to submission order).\n\nUtil.sortByDatetime = (a, b) => {\n  const dateA = new Date(a.effective_dtm);\n  const dateB = new Date(b.effective_dtm);\n  if (dateA > dateB) return -1;\n  if (dateA < dateB) return 1;\n  return 0;\n};\n\nUtil.sortByAlertId = (a, b) => {\n  if (a.alert_id > b.alert_id) return -1;\n  if (a.alert_id < b.alert_id) return 1;\n  return 0;\n};\n\nUtil.sortByDetailsId = (a, b) => {\n  if (a.details_id > b.details_id) return -1;\n  if (a.details_id < b.details_id) return 1;\n  return 0;\n};\n\nUtil.sortByName = (a, b) => {\n  if (a.name > b.name) return -1;\n  if (a.name < b.name) return 1;\n  return 0;\n};\n/**\n * Capitalizes each word in the input text and returns the result.\n * @method toTitleCase\n * @param  {[string]}    str [Input string.]\n * @return {[string]}        [Capitalized input string]\n */\n\n\nUtil.toTitleCase = str => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}; // Formatting functions for dates and datetimes.\n\n\nUtil.formatDatetime = input => {\n  return input.toLocaleString('en-us', {\n    month: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    year: 'numeric',\n    day: 'numeric'\n  });\n};\n\nUtil.formatDate = input => {\n  return input.toLocaleString('en-us', {\n    month: 'long',\n    year: 'numeric',\n    day: 'numeric'\n  });\n};\n\nUtil.formatDatetimeApi = dt => {\n  const year = dt.getFullYear();\n  const monthTmp = dt.getMonth() + 1;\n  const month = monthTmp > 10 ? '' + monthTmp : '0' + monthTmp;\n  const dateTmp = dt.getDate();\n  const date = dateTmp > 10 ? '' + dateTmp : '0' + dateTmp;\n  const hoursTmp = dt.getHours();\n  const hours = hoursTmp > 10 ? '' + hoursTmp : '0' + hoursTmp;\n  const minutesTmp = dt.getMinutes();\n  const minutes = minutesTmp > 10 ? '' + minutesTmp : '0' + minutesTmp;\n  const secondsTmp = dt.getSeconds();\n  const seconds = secondsTmp > 10 ? '' + secondsTmp : '0' + secondsTmp;\n  const yyyymmdd = \"\".concat(year, \"-\").concat(month, \"-\").concat(date);\n  const hhmmss = \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n  return \"\".concat(yyyymmdd, \"T\").concat(hhmmss);\n};\n\nexport default Util;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/misc/Util.js"],"names":["Util","sortByDatetime","a","b","dateA","Date","effective_dtm","dateB","sortByAlertId","alert_id","sortByDetailsId","details_id","sortByName","name","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","formatDatetime","input","toLocaleString","month","hour","minute","second","year","day","formatDate","formatDatetimeApi","dt","getFullYear","monthTmp","getMonth","dateTmp","getDate","date","hoursTmp","getHours","hours","minutesTmp","getMinutes","minutes","secondsTmp","getSeconds","seconds","yyyymmdd","hhmmss"],"mappings":"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","sourcesContent":["// Utility functions.\nconst Util = {};\n\n// Sorting functions to sort alerts and statuses data by datetime and by\n// unique ID (sequential relative to submission order).\nUtil.sortByDatetime = (a, b) => {\n  const dateA = new Date(a.effective_dtm);\n  const dateB = new Date(b.effective_dtm);\n  if (dateA > dateB) return -1;\n  if (dateA < dateB) return 1;\n  return 0;\n};\nUtil.sortByAlertId = (a, b) => {\n  if (a.alert_id > b.alert_id) return -1;\n  if (a.alert_id < b.alert_id) return 1;\n  return 0;\n};\nUtil.sortByDetailsId = (a, b) => {\n  if (a.details_id > b.details_id) return -1;\n  if (a.details_id < b.details_id) return 1;\n  return 0;\n};\nUtil.sortByName = (a, b) => {\n  if (a.name > b.name) return -1;\n  if (a.name < b.name) return 1;\n  return 0;\n};\n\n/**\n * Capitalizes each word in the input text and returns the result.\n * @method toTitleCase\n * @param  {[string]}    str [Input string.]\n * @return {[string]}        [Capitalized input string]\n */\nUtil.toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt){\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n\n// Formatting functions for dates and datetimes.\nUtil.formatDatetime = (input) => {\n    return input.toLocaleString('en-us', {\n      month: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      year: 'numeric',\n      day: 'numeric'\n    }\n  );\n}\nUtil.formatDate = (input) => {\n    return input.toLocaleString('en-us', {\n      month: 'long',\n      year: 'numeric',\n      day: 'numeric'\n    }\n  );\n}\nUtil.formatDatetimeApi = (dt) => {\n  const year = dt.getFullYear();\n  const monthTmp = dt.getMonth() + 1;\n  const month = monthTmp > 10 ? ('' + monthTmp) : ('0' + monthTmp);\n  const dateTmp = dt.getDate();\n  const date = dateTmp > 10 ? ('' + dateTmp) : ('0' + dateTmp);\n  const hoursTmp = dt.getHours();\n  const hours = hoursTmp > 10 ? ('' + hoursTmp) : ('0' + hoursTmp);\n  const minutesTmp = dt.getMinutes();\n  const minutes = minutesTmp > 10 ? ('' + minutesTmp) : ('0' + minutesTmp);\n  const secondsTmp = dt.getSeconds();\n  const seconds = secondsTmp > 10 ? ('' + secondsTmp) : ('0' + secondsTmp);\n  const yyyymmdd = `${year}-${month}-${date}`;\n  const hhmmss = `${hours}:${minutes}:${seconds}`;\n  return `${yyyymmdd}T${hhmmss}`;\n};\n\nexport default Util;\n"]},"metadata":{},"sourceType":"module"}