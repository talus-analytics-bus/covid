{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/views/details/Details.tsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport SimpleMap from '../../map/SimpleMap';\nimport Content from './content/Content'; // Utilities (date formatting, etc.) and infographic data functions.\n\nimport Util from '../../../components/misc/Util.js';\nimport Infographic from '../../../components/misc/Infographic.js';\nimport classNames from 'classnames';\nimport styles from './details.module.scss';\nimport dialysisIcon from '../../../assets/images/markers/dialysis-blue.png';\nimport hospitalIcon from '../../../assets/images/markers/hospital-blue.png';\nimport nursingIcon from '../../../assets/images/markers/nursing-blue.png'; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // import { facility } from '../../../types/index'\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL; // Function get get facility icon, H, N, or D\n\nconst getFacilityIcon = facility => {\n  switch (facility.type) {\n    case 'Nursing Home':\n      return nursingIcon;\n      break;\n\n    case 'Hospital':\n      return hospitalIcon;\n      break;\n\n    case 'Dialysis Facility':\n      return dialysisIcon;\n      break;\n  }\n}; // FC for Details.\n\n\nconst Details = props => {\n  // Manage loading state (don't show if loading, etc.)\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loading = _React$useState2[0],\n        setLoading = _React$useState2[1]; // Get data for current facility.\n\n\n  const facility = props.selectedFacility; // Retrieve state variables describing alerts, statuses, and details.\n  // Current alerts, used in middle infographic.\n\n  const _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        curFacilityAlerts = _React$useState4[0],\n        setCurFacilityAlerts = _React$useState4[1]; // Submitted details, used in first table.\n\n\n  const _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        detailsUpdates = _React$useState6[0],\n        setDetails = _React$useState6[1]; // Alert history, used in second table.\n\n\n  const _React$useState7 = React.useState(),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        alertHistory = _React$useState8[0],\n        setAlerts = _React$useState8[1]; // Status history, used to determine datetime stamp for facility status.\n\n\n  const _React$useState9 = React.useState([]),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        statusHistory = _React$useState10[0],\n        setStatusHistory = _React$useState10[1]; // Function to make API calls to get data for the four state variables above.\n\n\n  const getDetailsData = async () => {\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const res1 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts/history\"));\n    const res2 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/details\"));\n    const alertsUrl = DEMO_DATE !== undefined ? \"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts?date=\").concat(DEMO_DATE) : \"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts\");\n    const res3 = await axios(alertsUrl);\n    const res4 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/status/history\")); // Update the state variables with the response data.\n\n    setAlerts(res1.data.data);\n    setDetails(res2.data.data);\n    const sortedAlerts = res3.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n    setCurFacilityAlerts(sortedAlerts);\n    setStatusHistory(res4.data.data); // Set state to loaded so JSX renders.\n\n    setLoading(false);\n  }; // Effect hook to load API data.\n\n\n  React.useEffect(() => {\n    getDetailsData();\n  }, []); // If loading do not show JSX content.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  });else {\n    // Function to get icon paths, systems, and most recent updated on from active\n    // alerts.\n    const infographicData = Infographic.getInfographicData(curFacilityAlerts, facility, DEMO_DATE); // Function to get data for populating the time infographic that says how long\n    // a facility has been without power or if it is totally without power.\n\n    const timeInfographicData = Infographic.getTimeInfographicData(curFacilityAlerts, facility); // Get datetime stamp for facility status and other elements\n\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n    const datetimes = {\n      facilityStatus: Infographic.getFacilityStatusDatetimeStamp(statusHistory, timeThreshold),\n      alert: infographicData.updatedOn,\n      time: timeInfographicData.updatedOn\n    };\n    const datetimeStamps = {\n      facilityStatus: Util.formatDate(datetimes.facilityStatus),\n      alert: Util.formatDate(datetimes.alert),\n      time: Util.formatDate(datetimes.time),\n      mostRecent: Util.formatDate(Object.values(datetimes).sort().reverse()[0])\n    }; // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n\n    const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime).filter(d => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true;\n    });\n    const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime).filter(d => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true;\n    }); // Return JSX for details.\n\n    return React.createElement(\"div\", {\n      className: styles.details,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames(styles.mapTitle, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: styles.facilityIcon,\n      src: getFacilityIcon(facility),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: styles.facilityName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, facility.name), React.createElement(\"div\", {\n      className: classNames(styles.location, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, facility.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, facility.city, \", \", facility.state, \" \", facility.zip), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, facility.telephone))), React.createElement(\"div\", {\n      className: classNames(styles.detailsTitle, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Facility status\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, Util.formatDate(now)), React.createElement(\"span\", {\n      className: styles.lastUpdated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" last updated \", datetimeStamps.mostRecent)))), React.createElement(Link, {\n      to: '/submit/update/' + facility.facility_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Update status\", React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"edit\")))), React.createElement(SimpleMap, {\n      selectedFacility: facility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(Content, {\n      datetimeStamps: datetimeStamps,\n      infographicData: infographicData,\n      timeInfographicData: timeInfographicData,\n      alertHistory: alertHistory,\n      detailsUpdates: detailsUpdates,\n      selectedFacility: facility,\n      curFacilityAlerts: curFacilityAlerts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default Details;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/views/details/Details.tsx"],"names":["React","axios","Link","SimpleMap","Content","Util","Infographic","classNames","styles","dialysisIcon","hospitalIcon","nursingIcon","DEMO_DATE","process","env","now","undefined","Date","API_BASE","REACT_APP_API_BASE_URL","getFacilityIcon","facility","type","Details","props","useState","loading","setLoading","selectedFacility","curFacilityAlerts","setCurFacilityAlerts","detailsUpdates","setDetails","alertHistory","setAlerts","statusHistory","setStatusHistory","getDetailsData","res1","facility_id","res2","alertsUrl","res3","res4","data","sortedAlerts","sort","sortByAlertId","sortByDatetime","useEffect","infographicData","getInfographicData","timeInfographicData","getTimeInfographicData","timeThreshold","datetimes","facilityStatus","getFacilityStatusDatetimeStamp","alert","updatedOn","time","datetimeStamps","formatDate","mostRecent","Object","values","reverse","details","sortByDetailsId","filter","d","statusDate","effective_dtm","alerts","mapTitle","severity","facilityIcon","facilityName","name","location","address","city","state","zip","telephone","detailsTitle","lastUpdated"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Popup from 'reactjs-popup'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport SimpleMap from '../../map/SimpleMap'\nimport Content from './content/Content'\n\n// Utilities (date formatting, etc.) and infographic data functions.\nimport Util from '../../../components/misc/Util.js'\nimport Infographic from '../../../components/misc/Infographic.js'\n\nimport classNames from 'classnames'\nimport styles from './details.module.scss'\nimport dialysisIcon from '../../../assets/images/markers/dialysis-blue.png'\nimport hospitalIcon from '../../../assets/images/markers/hospital-blue.png'\nimport nursingIcon from '../../../assets/images/markers/nursing-blue.png'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n// import { facility } from '../../../types/index'\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\n\n// Function get get facility icon, H, N, or D\nconst getFacilityIcon = (facility: any) => {\n  switch (facility.type) {\n    case 'Nursing Home':\n      return nursingIcon;\n      break;\n    case 'Hospital':\n      return hospitalIcon;\n      break;\n    case 'Dialysis Facility':\n      return dialysisIcon;\n      break;\n  }\n};\n\n// FC for Details.\nconst Details = (props: any) => {\n\n  // Manage loading state (don't show if loading, etc.)\n  const [loading, setLoading] = React.useState(true)\n\n  // Get data for current facility.\n  const facility = props.selectedFacility;\n\n  // Retrieve state variables describing alerts, statuses, and details.\n  // Current alerts, used in middle infographic.\n  const [curFacilityAlerts, setCurFacilityAlerts] = React.useState();\n\n  // Submitted details, used in first table.\n  const [detailsUpdates, setDetails] = React.useState();\n\n  // Alert history, used in second table.\n  const [alertHistory, setAlerts] = React.useState();\n\n  // Status history, used to determine datetime stamp for facility status.\n  const [statusHistory, setStatusHistory] = React.useState([])\n\n  // Function to make API calls to get data for the four state variables above.\n  const getDetailsData = async () => {\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const res1 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/alerts/history`\n    )\n    const res2 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/details`\n    )\n    const alertsUrl = DEMO_DATE !== undefined ?\n      `${API_BASE}/facilities/${props.facility_id}/alerts?date=${DEMO_DATE}` :\n      `${API_BASE}/facilities/${props.facility_id}/alerts`;\n    const res3 = await axios(alertsUrl);\n    const res4 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/status/history`\n    );\n\n    // Update the state variables with the response data.\n    setAlerts(res1.data.data);\n    setDetails(res2.data.data);\n    const sortedAlerts = res3.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n    setCurFacilityAlerts(sortedAlerts);\n    setStatusHistory(res4.data.data);\n\n    // Set state to loaded so JSX renders.\n    setLoading(false);\n  }\n\n  // Effect hook to load API data.\n  React.useEffect(() => {\n    getDetailsData();\n  }, [])\n\n  // If loading do not show JSX content.\n  if (loading) return (<div></div>);\n  else {\n    // Function to get icon paths, systems, and most recent updated on from active\n    // alerts.\n    const infographicData =\n      Infographic.getInfographicData(curFacilityAlerts, facility, DEMO_DATE);\n\n    // Function to get data for populating the time infographic that says how long\n    // a facility has been without power or if it is totally without power.\n    const timeInfographicData =\n      Infographic.getTimeInfographicData(curFacilityAlerts, facility);\n\n    // Get datetime stamp for facility status and other elements\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n    const datetimes = {\n      facilityStatus: Infographic.getFacilityStatusDatetimeStamp(statusHistory, timeThreshold),\n      alert: infographicData.updatedOn,\n      time: timeInfographicData.updatedOn,\n    };\n    const datetimeStamps = {\n      facilityStatus: Util.formatDate(\n        datetimes.facilityStatus\n      ),\n      alert: Util.formatDate(\n        datetimes.alert\n      ),\n      time: Util.formatDate(\n        datetimes.time\n      ),\n      mostRecent: Util.formatDate(\n        Object.values(datetimes).sort().reverse()[0],\n      ),\n    };\n\n    // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n    const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime)\n      .filter((d: any) => {\n        const statusDate = new Date(d.effective_dtm);\n        if (timeThreshold < statusDate) return false;\n        return true\n      });\n    const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime)\n    .filter((d: any) => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true\n    });\n\n    // Return JSX for details.\n    return (<div className={styles.details}>\n      <div className={classNames(styles.mapTitle, styles[facility.severity])}>\n        <img className={styles.facilityIcon} src={getFacilityIcon(facility)} />\n        <p className={styles.facilityName}>{facility.name}</p>\n        <div className={classNames(styles.location, styles[facility.severity])}>\n          <p>{facility.address}</p>\n          <p>{facility.city}, {facility.state} {facility.zip}</p>\n          <p>{facility.telephone}</p>\n        </div>\n      </div>\n      <div className={classNames(styles.detailsTitle, styles[facility.severity])}>\n        <div>\n          <div>\n            <p>\n              <span>Facility status</span>\n            </p>\n            <p>\n              <span>{Util.formatDate(now)}</span>\n              <span className={styles.lastUpdated}> last updated {datetimeStamps.mostRecent}</span>\n            </p>\n          </div>\n        </div>\n\n        <Link to={'/submit/update/' + facility.facility_id}>\n          <button>\n            Update status\n            <i className='material-icons'>edit</i>\n          </button>\n        </Link>\n\n      </div>\n      <SimpleMap selectedFacility={facility}/>\n      <Content\n        datetimeStamps={datetimeStamps}\n        infographicData={infographicData}\n        timeInfographicData={timeInfographicData}\n        alertHistory={alertHistory}\n        detailsUpdates={detailsUpdates}\n        selectedFacility={facility}\n        curFacilityAlerts={curFacilityAlerts}/>\n    </div>);\n  }\n};\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}