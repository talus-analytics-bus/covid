{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/map/facilityPopup/FacilityPopup.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport styles from './facilityPopup.module.scss';\nimport Popup from 'reactjs-popup';\nimport BootstrapTable from 'react-bootstrap-table-next'; // Utilities (date formatting, etc.) and infographic data functions.\n\nimport Util from '../../../components/misc/Util.js';\nimport Infographic from '../../../components/misc/Infographic.js'; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL; // : React.FC\n\nconst FacilityPopup = ({\n  facility\n}) => {\n  // Load state\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loaded = _React$useState2[0],\n        setLoaded = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        open = _React$useState4[0],\n        setOpen = _React$useState4[1];\n\n  let _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      statuses = _React$useState6[0],\n      setStatuses = _React$useState6[1];\n\n  let _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      alerts = _React$useState8[0],\n      setAlerts = _React$useState8[1];\n\n  const _React$useState9 = React.useState([]),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        curFacilityAlerts = _React$useState10[0],\n        setCurFacilityAlerts = _React$useState10[1]; // Define effect hook to load API data\n\n\n  React.useEffect(() => {\n    const getData = async () => {\n      const alertsUrl = DEMO_DATE !== undefined ? \"\".concat(API_BASE, \"/facilities/\").concat(facility.facility_id, \"/alerts?date=\").concat(DEMO_DATE) : \"\".concat(API_BASE, \"/facilities/\").concat(facility.facility_id, \"/alerts\");\n      const res1 = await axios(alertsUrl); // Get most recent facility status (alert)\n\n      const sortedAlerts = res1.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n      const res2 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(facility.facility_id, \"/alerts\"));\n      const res3 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(facility.facility_id, \"/status/history\"));\n      setCurFacilityAlerts(sortedAlerts);\n      setAlerts(res2.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime));\n      setStatuses(res3.data.data.sort(Util.sortByDetailsId).sort(Util.sortByDatetime));\n      setLoaded(true);\n    };\n\n    getData();\n  }, []); // If API data not loaded, wait.\n\n  if (!loaded) return ''; // statuses = statuses.sort(Util.sortByDetailsId).sort(Util.sortByDatetime);\n\n  alerts = curFacilityAlerts; // alerts = curFacilityAlerts.sort(Util.sortByDetailsId).sort(Util.sortByDatetime);\n\n  const detailsPath = '/details/' + facility.facility_id;\n  const severity = facility.severity.toLowerCase(); // Ignore statuses that are after the demo date or today's date.\n\n  const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n  const statusTableRows = [];\n  statuses.forEach(s => {\n    const statusDate = new Date(s.effective_dtm);\n    if (timeThreshold < statusDate) return;\n    statusTableRows.push(React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, s.submitted_by === 'hospital_employee' ? 'Hospital employee' : s.submitted_by), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, s.details), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, Util.formatDatetime(statusDate))));\n  }); // Ignore alerts that are after the demo date or today's date.\n\n  const columnsAlerts = [{\n    dataField: 'severity',\n    text: 'Status',\n    sort: true\n  }, {\n    dataField: 'description',\n    text: 'Alert description',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt',\n    // to format\n    text: 'Date / Time',\n    sort: true\n  }]; // Define classes for rows so that cleared alerts are grayed out.\n\n  const alertRowClasses = (row, rowIndex) => {\n    let classes = null;\n\n    if (row.active === 'Cleared') {\n      classes = styles['cleared'];\n    }\n\n    return classes;\n  }; // Process alerts data for inclusion in table.\n\n\n  alerts.forEach(s => {\n    // If status date (alert date) occurs after the time threshold for the\n    // notional data, then don't display it.\n    // TODO ensure this is turned off when real data are used, or that it at\n    // least doesn't delete data errantly.\n    s.display = true;\n    const statusDate = new Date(s.effective_dtm);\n    if (timeThreshold < statusDate) s.display = false; // True if the alert is active, false if it is cleared. Don't display\n    // cleared alerts in the tooltip.\n\n    const clearedDate = s.cleared_dtm !== null ? new Date(s.cleared_dtm) : Infinity;\n    s.active = clearedDate >= timeThreshold ? 'Active' : 'Cleared';\n    if (s.active === 'Cleared') s.display = false; // Format the status date\n\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  });\n  const alertsInTable = alerts.filter(s => s.display); // Set default sort parameters for tables\n\n  const defaultSorted = [{\n    dataField: 'statusDateFmt',\n    order: 'desc'\n  }]; // Define status table JSX\n\n  const alertTable = React.createElement(BootstrapTable, {\n    keyField: \"alert_id\",\n    data: alertsInTable,\n    columns: columnsAlerts,\n    defaultSorted: defaultSorted,\n    rowClasses: alertRowClasses,\n    classes: \"alertHistory\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }); // Function to get icon paths, systems, and most recent updated on from active\n  // alerts.\n\n  const infographicData = Infographic.getInfographicData(curFacilityAlerts, facility, DEMO_DATE); // Function to get data for populating the time infographic that says how long\n  // a facility has been without power or if it is totally without power.\n\n  const timeInfographicData = Infographic.getTimeInfographicData(curFacilityAlerts, facility); // JSX for facility popups\n\n  const multiIconsClass = infographicData.multiIcons ? styles.multi : '';\n  const tripleIconsClass = infographicData.tripleIcons ? styles.triple : ''; // Get datetime stamp for facility status and other elements\n\n  const facilityStatusDatetimeStamp = Util.formatDate(Infographic.getFacilityStatusDatetimeStamp(statuses, timeThreshold));\n  const alertDatetimeStamp = Util.formatDate(infographicData.updatedOn);\n  const powerDatetimeStamp = Util.formatDate(timeInfographicData.updatedOn);\n  return React.createElement(\"div\", {\n    className: styles.grid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.headerLeft,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, facility.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, facility.address), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"\".concat(facility.city, \", \").concat(facility.state)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, facility.telephone)), React.createElement(\"div\", {\n    className: styles.headerRight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles[severity],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, facility.severity.toUpperCase())), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Facility status\"), React.createElement(\"p\", {\n    className: styles.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"updated on \", facilityStatusDatetimeStamp)), React.createElement(\"div\", {\n    className: classNames(styles.colorBar, styles[severity]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classNames(styles.alertIcons, multiIconsClass, tripleIconsClass),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, infographicData.iconPaths.map(d => {\n    return React.createElement(\"img\", {\n      src: d,\n      className: styles.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: styles.bodyLeft,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.alertGraphic,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classNames(styles.title),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, infographicData.title), React.createElement(\"p\", {\n    className: styles.highlighted,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, infographicData.systemJsx), React.createElement(\"p\", {\n    className: styles.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"updated on \", alertDatetimeStamp))), React.createElement(\"div\", {\n    className: styles.bodyRight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, timeInfographicData.circle.use && React.createElement(\"div\", {\n    className: classNames(styles.circle, styles[facility.severity]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, timeInfographicData.circle.value)), !timeInfographicData.circle.use && React.createElement(\"img\", {\n    src: timeInfographicData.iconPath,\n    className: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, timeInfographicData.title), React.createElement(\"p\", {\n    className: styles.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \"updated on \", powerDatetimeStamp))), React.createElement(\"div\", {\n    className: styles.alerts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => setOpen(!open),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"Facility active alerts (\", alertsInTable.length, \")\"), React.createElement(\"i\", {\n    className: classNames('material-icons-outlined', {\n      [styles.open]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"expand_less\")), React.createElement(\"div\", {\n    className: classNames({\n      [styles.open]: open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, \"Click \\\"View\\\" below for detailed facility status and full alert history.\"), alertTable)), React.createElement(\"div\", {\n    className: styles.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: '/submit/update/' + facility.facility_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: styles['button-secondary'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, \"Update\")), React.createElement(Link, {\n    to: detailsPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \"View\"))));\n};\n\nexport default FacilityPopup;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/map/facilityPopup/FacilityPopup.js"],"names":["React","Link","axios","classNames","styles","Popup","BootstrapTable","Util","Infographic","DEMO_DATE","process","env","API_BASE","REACT_APP_API_BASE_URL","FacilityPopup","facility","useState","loaded","setLoaded","open","setOpen","statuses","setStatuses","alerts","setAlerts","curFacilityAlerts","setCurFacilityAlerts","useEffect","getData","alertsUrl","undefined","facility_id","res1","sortedAlerts","data","sort","sortByAlertId","sortByDatetime","res2","res3","sortByDetailsId","detailsPath","severity","toLowerCase","timeThreshold","Date","statusTableRows","forEach","s","statusDate","effective_dtm","push","submitted_by","details","formatDatetime","columnsAlerts","dataField","text","alertRowClasses","row","rowIndex","classes","active","display","clearedDate","cleared_dtm","Infinity","statusDateFmt","alertsInTable","filter","defaultSorted","order","alertTable","infographicData","getInfographicData","timeInfographicData","getTimeInfographicData","multiIconsClass","multiIcons","multi","tripleIconsClass","tripleIcons","triple","facilityStatusDatetimeStamp","formatDate","getFacilityStatusDatetimeStamp","alertDatetimeStamp","updatedOn","powerDatetimeStamp","grid","headerLeft","title","name","address","city","state","telephone","headerRight","toUpperCase","date","colorBar","alertIcons","iconPaths","map","d","img","bodyLeft","alertGraphic","highlighted","systemJsx","bodyRight","circle","use","value","iconPath","image","length","instructions","buttons"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport classNames from 'classnames'\nimport styles from './facilityPopup.module.scss'\nimport Popup from 'reactjs-popup'\nimport BootstrapTable from 'react-bootstrap-table-next';\n\n// Utilities (date formatting, etc.) and infographic data functions.\nimport Util from '../../../components/misc/Util.js'\nimport Infographic from '../../../components/misc/Infographic.js'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL\n\n// : React.FC\nconst FacilityPopup = ({ facility }) => {\n  // Load state\n  const [loaded, setLoaded] = React.useState(false)\n  const [open, setOpen] = React.useState(false)\n  let [statuses, setStatuses] = React.useState([])\n  let [alerts, setAlerts] = React.useState([])\n  const [curFacilityAlerts, setCurFacilityAlerts] = React.useState([])\n\n  // Define effect hook to load API data\n  React.useEffect(() => {\n    const getData = async () => {\n      const alertsUrl =\n        DEMO_DATE !== undefined\n          ? `${API_BASE}/facilities/${\n              facility.facility_id\n            }/alerts?date=${DEMO_DATE}`\n          : `${API_BASE}/facilities/${facility.facility_id}/alerts`\n      const res1 = await axios(alertsUrl)\n\n      // Get most recent facility status (alert)\n      const sortedAlerts = res1.data.data\n        .sort(Util.sortByAlertId)\n        .sort(Util.sortByDatetime)\n\n      const res2 = await axios(\n        `${API_BASE}/facilities/${facility.facility_id}/alerts`\n      )\n\n      const res3 = await axios(\n        `${API_BASE}/facilities/${facility.facility_id}/status/history`\n      )\n      setCurFacilityAlerts(sortedAlerts)\n      setAlerts(\n        res2.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime)\n      )\n      setStatuses(\n        res3.data.data.sort(Util.sortByDetailsId).sort(Util.sortByDatetime)\n      )\n      setLoaded(true)\n    }\n\n    getData()\n  }, [])\n\n  // If API data not loaded, wait.\n  if (!loaded) return ''\n  // statuses = statuses.sort(Util.sortByDetailsId).sort(Util.sortByDatetime);\n  alerts = curFacilityAlerts\n  // alerts = curFacilityAlerts.sort(Util.sortByDetailsId).sort(Util.sortByDatetime);\n\n  const detailsPath = '/details/' + facility.facility_id\n  const severity = facility.severity.toLowerCase()\n\n  // Ignore statuses that are after the demo date or today's date.\n  const timeThreshold =\n    DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date()\n  const statusTableRows = []\n  statuses.forEach(s => {\n    const statusDate = new Date(s.effective_dtm)\n    if (timeThreshold < statusDate) return\n    statusTableRows.push(\n      <tr>\n        <td>\n          {s.submitted_by === 'hospital_employee'\n            ? 'Hospital employee'\n            : s.submitted_by}\n        </td>\n        <td>{s.details}</td>\n        <td>{Util.formatDatetime(statusDate)}</td>\n      </tr>\n    )\n  })\n\n  // Ignore alerts that are after the demo date or today's date.\n  const columnsAlerts = [{\n    dataField: 'severity',\n    text: 'Status',\n    sort: true\n  }, {\n    dataField: 'description',\n    text: 'Alert description',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt', // to format\n    text: 'Date / Time',\n    sort: true\n  }];\n\n  // Define classes for rows so that cleared alerts are grayed out.\n  const alertRowClasses = (row, rowIndex) => {\n    let classes = null;\n    if (row.active === 'Cleared') {\n      classes = styles['cleared'];\n    }\n    return classes;\n  };\n\n  // Process alerts data for inclusion in table.\n  alerts.forEach((s) => {\n\n    // If status date (alert date) occurs after the time threshold for the\n    // notional data, then don't display it.\n    // TODO ensure this is turned off when real data are used, or that it at\n    // least doesn't delete data errantly.\n    s.display = true;\n    const statusDate = new Date(s.effective_dtm);\n    if (timeThreshold < statusDate) s.display = false;\n\n    // True if the alert is active, false if it is cleared. Don't display\n    // cleared alerts in the tooltip.\n    const clearedDate = s.cleared_dtm !== null ?\n      new Date(s.cleared_dtm) : Infinity;\n    s.active = clearedDate >= timeThreshold ? 'Active' : 'Cleared';\n    if (s.active === 'Cleared') s.display = false;\n\n    // Format the status date\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  })\n  const alertsInTable = alerts.filter((s) => s.display);\n\n  // Set default sort parameters for tables\n  const defaultSorted = [{\n    dataField: 'statusDateFmt',\n    order: 'desc'\n  }];\n\n  // Define status table JSX\n  const alertTable =\n    (<BootstrapTable\n      keyField='alert_id'\n      data={ alertsInTable }\n      columns={ columnsAlerts }\n      defaultSorted={ defaultSorted }\n      rowClasses={ alertRowClasses }\n      classes=\"alertHistory\"\n    />);\n\n  // Function to get icon paths, systems, and most recent updated on from active\n  // alerts.\n  const infographicData = Infographic.getInfographicData(\n    curFacilityAlerts,\n    facility,\n    DEMO_DATE\n  )\n\n  // Function to get data for populating the time infographic that says how long\n  // a facility has been without power or if it is totally without power.\n  const timeInfographicData = Infographic.getTimeInfographicData(\n    curFacilityAlerts,\n    facility\n  )\n\n  // JSX for facility popups\n  const multiIconsClass = infographicData.multiIcons ? styles.multi : ''\n  const tripleIconsClass = infographicData.tripleIcons ? styles.triple : ''\n\n  // Get datetime stamp for facility status and other elements\n  const facilityStatusDatetimeStamp = Util.formatDate(\n    Infographic.getFacilityStatusDatetimeStamp(statuses, timeThreshold)\n  )\n  const alertDatetimeStamp = Util.formatDate(infographicData.updatedOn)\n  const powerDatetimeStamp = Util.formatDate(timeInfographicData.updatedOn)\n\n  return (\n    <div className={styles.grid}>\n      <div className={styles.headerLeft}>\n        <p className={styles.title}>{facility.name}</p>\n        <p>{facility.address}</p>\n        <p>{`${facility.city}, ${facility.state}`}</p>\n        <p>{facility.telephone}</p>\n      </div>\n      <div className={styles.headerRight}>\n        <div className={styles[severity]}>\n          <p>{facility.severity.toUpperCase()}</p>\n        </div>\n        <p>Facility status</p>\n        <p className={styles.date}>updated on {facilityStatusDatetimeStamp}</p>\n      </div>\n      <div className={classNames(styles.colorBar, styles[severity])} />\n\n      <div\n        className={classNames(\n          styles.alertIcons,\n          multiIconsClass,\n          tripleIconsClass\n        )}\n      >\n        {infographicData.iconPaths.map(d => {\n          return <img src={d} className={styles.img} />\n        })}\n      </div>\n\n      <div className={styles.bodyLeft}>\n        <div className={styles.alertGraphic}>\n          <p className={classNames(styles.title)}>{infographicData.title}</p>\n          <p className={styles.highlighted}>{infographicData.systemJsx}</p>\n          <p className={styles.date}>updated on {alertDatetimeStamp}</p>\n        </div>\n      </div>\n\n      <div className={styles.bodyRight}>\n        {timeInfographicData.circle.use && (\n          <div className={classNames(styles.circle, styles[facility.severity])}>\n            <span>{timeInfographicData.circle.value}</span>\n          </div>\n        )}\n        {!timeInfographicData.circle.use && (\n          <img src={timeInfographicData.iconPath} className={styles.image} />\n        )}\n        <div>\n          <p className={styles.title}>{timeInfographicData.title}</p>\n          <p className={styles.date}>updated on {powerDatetimeStamp}</p>\n        </div>\n      </div>\n\n      <div className={styles.alerts}>\n        <div onClick={() => setOpen(!open)}>\n          <p>Facility active alerts ({alertsInTable.length})</p>\n          <i\n            className={classNames('material-icons-outlined', {\n              [styles.open]: open\n            })}\n          >\n            expand_less\n          </i>\n        </div>\n        <div\n          className={classNames({\n            [styles.open]: open\n          })}\n        >\n          <p className={styles.instructions}>\n            Click \"View\" below for detailed facility status and full alert\n            history.\n          </p>\n          {alertTable}\n        </div>\n      </div>\n      <div className={styles.buttons}>\n        <Link to={'/submit/update/' + facility.facility_id}>\n          <button className={styles['button-secondary']}>Update</button>\n        </Link>\n        {\n          <Link to={detailsPath}>\n            <button>View</button>\n          </Link>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default FacilityPopup\n"]},"metadata":{},"sourceType":"module"}