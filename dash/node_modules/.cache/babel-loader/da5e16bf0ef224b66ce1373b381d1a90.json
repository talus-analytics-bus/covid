{"ast":null,"code":"var _jsxFileName = \"/Users/trae/git_repositories/measles/dash/src/components/views/details/content/Content.tsx\";\n// Libraries\nimport React from 'react';\nimport classNames from 'classnames';\nimport styles from './content.module.scss';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator'; // Utilities (date formatting, etc.)\n\nimport Util from '../../../../components/misc/Util.js'; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n} // Function to return JSX for content of details page.\n// props keys:\n// alertHistory\n// detailsUpdates\n\n\nconst Content = props => {\n  // Get the current facility (facility) and its severity level.\n  const facility = props.selectedFacility; // Set default sort parameters for tables\n\n  const defaultSorted = [{\n    dataField: 'statusDateFmt',\n    order: 'desc'\n  }]; // Ignore statuses that are after the demo date or today's date.\n\n  const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n  const statuses = props.detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime); // Define sorting function for date columns.\n\n  /**\n   * [dateSortFunc description]\n   * @method dateSortFunc\n   * @param  {[type]}     aTmp  [description]\n   * @param  {[type]}     bTmp  [description]\n   * @param  {[type]}     order [description]\n   * @return {[type]}           [description]\n   */\n\n  const dateSortFunc = (aTmp, bTmp, order) => {\n    const a = new Date(aTmp);\n    const b = new Date(bTmp);\n\n    if (order === 'desc') {\n      return b - a;\n    }\n\n    return a - b; // desc\n  }; // Define columns for status table\n\n\n  const columnsStatuses = [{\n    dataField: 'submittedByName',\n    text: 'Submitted by',\n    sort: true\n  }, {\n    dataField: 'details',\n    text: 'Description',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt',\n    text: 'Date / Time',\n    sort: true,\n    sortFunc: dateSortFunc\n  }]; // Prepare status data for display in table.\n\n  statuses.forEach(s => {\n    console.log(s); // If status occurs after the cut-off date for dashboard data, don't show.\n\n    const statusDate = new Date(s.effective_dtm);\n    s.display = timeThreshold >= statusDate; // Determine name to put in table\n    // TODO ensure this works with real data\n\n    s.submittedByName = s.submitted_by === 'hospital_employee' ? 'Hospital employee' : s.submitted_by; // Format the status date\n\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  });\n  const statusesInTable = statuses.filter(s => s.display); // Define status table JSX\n\n  const paginationParams = {\n    sizePerPage: 5,\n    hideSizePerPage: true\n  };\n  const statusTable = React.createElement(BootstrapTable, {\n    keyField: \"status_id\",\n    data: statusesInTable,\n    columns: columnsStatuses,\n    defaultSorted: defaultSorted,\n    pagination: statusesInTable.length > 5 ? paginationFactory(paginationParams) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }); // Ignore alerts that are after the demo date or today's date.\n\n  const alerts = props.alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n  const columnsAlerts = [{\n    dataField: 'severity',\n    text: 'Status',\n    sort: true\n  }, {\n    dataField: 'description',\n    text: 'Alert description',\n    sort: true\n  }, {\n    dataField: 'active',\n    text: 'Active or cleared?',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt',\n    // to format\n    text: 'Date / Time',\n    sort: true,\n    sortFunc: dateSortFunc\n  }]; // Define classes for rows so that cleared alerts are grayed out.\n\n  const alertRowClasses = (row, rowIndex) => {\n    let classes = null;\n\n    if (row.active === 'Cleared') {\n      classes = styles['cleared'];\n    }\n\n    return classes;\n  }; // Process alerts data for inclusion in table.\n\n\n  alerts.forEach(s => {\n    // If status date (alert date) occurs after the time threshold for the\n    // notional data, then don't display it.\n    // TODO ensure this is turned off when real data are used, or that it at\n    // least doesn't delete data errantly.\n    s.display = true;\n    const statusDate = new Date(s.effective_dtm);\n    if (timeThreshold < statusDate) s.display = false; // True if the alert is active, false if it is cleared.\n\n    const clearedDate = s.cleared_dtm !== null ? new Date(s.cleared_dtm) : Infinity;\n    s.active = clearedDate >= timeThreshold ? 'Active' : 'Cleared'; // Format the status date\n\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  });\n  const alertsInTable = alerts.filter(s => s.display); // Define status table JSX\n\n  const alertTable = React.createElement(BootstrapTable, {\n    keyField: \"alert_id\",\n    data: alertsInTable,\n    columns: columnsAlerts,\n    defaultSorted: defaultSorted,\n    rowClasses: alertRowClasses,\n    pagination: alertsInTable.length > 5 ? paginationFactory(paginationParams) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }); // Get datetime stamp for facility status and other elements.\n\n  const datetimeStamps = props.datetimeStamps; // JSX for details page content.\n\n  return React.createElement(\"div\", {\n    className: styles.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames(styles.status, styles[facility.severity]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, facility.severity)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Facility status\"), React.createElement(\"p\", {\n    className: styles.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"updated on \", datetimeStamps.facilityStatus)))), React.createElement(\"div\", {\n    className: styles.detailsUpdates,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classNames(styles.highlighted, styles[facility.severity]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Status updates\"), statusTable), React.createElement(\"div\", {\n    className: styles.alertHistory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classNames(styles.highlighted, styles[facility.severity]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Alert history\"), alertTable));\n};\n\nexport default Content;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/views/details/content/Content.tsx"],"names":["React","classNames","styles","BootstrapTable","paginationFactory","Util","DEMO_DATE","process","env","Content","props","facility","selectedFacility","defaultSorted","dataField","order","timeThreshold","undefined","Date","statuses","detailsUpdates","sort","sortByDetailsId","sortByDatetime","dateSortFunc","aTmp","bTmp","a","b","columnsStatuses","text","sortFunc","forEach","s","console","log","statusDate","effective_dtm","display","submittedByName","submitted_by","statusDateFmt","formatDatetime","statusesInTable","filter","paginationParams","sizePerPage","hideSizePerPage","statusTable","length","alerts","alertHistory","sortByAlertId","columnsAlerts","alertRowClasses","row","rowIndex","classes","active","clearedDate","cleared_dtm","Infinity","alertsInTable","alertTable","datetimeStamps","content","summary","status","severity","title","date","facilityStatus","highlighted"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,qCAAjB,C,CAEA;AACA;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYF,SAA5B;;AACA,IAAI,OAAOA,SAAP,KAAqB,WAAzB,EAAsC;AACpCA,EAAAA,SAAS,GAAG,qBAAZ;AACD,C,CAED;AACA;AACE;AACA;;;AACF,MAAMG,OAAO,GAAIC,KAAD,IAAgB;AAE9B;AACA,QAAMC,QAAQ,GAAGD,KAAK,CAACE,gBAAvB,CAH8B,CAK9B;;AACA,QAAMC,aAAa,GAAG,CAAC;AACrBC,IAAAA,SAAS,EAAE,eADU;AAErBC,IAAAA,KAAK,EAAE;AAFc,GAAD,CAAtB,CAN8B,CAW9B;;AACA,QAAMC,aAAa,GAAGV,SAAS,KAAKW,SAAd,GAA0B,IAAIC,IAAJ,CAASZ,SAAT,CAA1B,GAAgD,IAAIY,IAAJ,EAAtE;AACA,QAAMC,QAAQ,GAAGT,KAAK,CAACU,cAAN,CAAqBC,IAArB,CAA0BhB,IAAI,CAACiB,eAA/B,EAAgDD,IAAhD,CAAqDhB,IAAI,CAACkB,cAA1D,CAAjB,CAb8B,CAe9B;;AACA;;;;;;;;;AAQA,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAYC,IAAZ,EAAuBX,KAAvB,KAAsC;AACzD,UAAMY,CAAM,GAAG,IAAIT,IAAJ,CAASO,IAAT,CAAf;AACA,UAAMG,CAAM,GAAG,IAAIV,IAAJ,CAASQ,IAAT,CAAf;;AACA,QAAIX,KAAK,KAAK,MAAd,EAAsB;AACpB,aAAOa,CAAC,GAAGD,CAAX;AACD;;AACD,WAAOA,CAAC,GAAGC,CAAX,CANyD,CAM3C;AACf,GAPD,CAxB8B,CAiC9B;;;AACA,QAAMC,eAAe,GAAG,CAAC;AACvBf,IAAAA,SAAS,EAAE,iBADY;AAEvBgB,IAAAA,IAAI,EAAE,cAFiB;AAGvBT,IAAAA,IAAI,EAAE;AAHiB,GAAD,EAIrB;AACDP,IAAAA,SAAS,EAAE,SADV;AAEDgB,IAAAA,IAAI,EAAE,aAFL;AAGDT,IAAAA,IAAI,EAAE;AAHL,GAJqB,EAQrB;AACDP,IAAAA,SAAS,EAAE,eADV;AAEDgB,IAAAA,IAAI,EAAE,aAFL;AAGDT,IAAAA,IAAI,EAAE,IAHL;AAIDU,IAAAA,QAAQ,EAAEP;AAJT,GARqB,CAAxB,CAlC8B,CAiD9B;;AACAL,EAAAA,QAAQ,CAACa,OAAT,CAAkBC,CAAD,IAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAD2B,CAE3B;;AACA,UAAMG,UAAU,GAAG,IAAIlB,IAAJ,CAASe,CAAC,CAACI,aAAX,CAAnB;AACAJ,IAAAA,CAAC,CAACK,OAAF,GAAYtB,aAAa,IAAIoB,UAA7B,CAJ2B,CAM3B;AACA;;AACAH,IAAAA,CAAC,CAACM,eAAF,GACEN,CAAC,CAACO,YAAF,KAAmB,mBAAnB,GACE,mBADF,GACwBP,CAAC,CAACO,YAF5B,CAR2B,CAY3B;;AACAP,IAAAA,CAAC,CAACQ,aAAF,GAAkBpC,IAAI,CAACqC,cAAL,CAAoBN,UAApB,CAAlB;AACD,GAdD;AAeA,QAAMO,eAAe,GAAGxB,QAAQ,CAACyB,MAAT,CAAiBX,CAAD,IAAYA,CAAC,CAACK,OAA9B,CAAxB,CAjE8B,CAmE9B;;AACA,QAAMO,gBAAgB,GAAG;AACvBC,IAAAA,WAAW,EAAE,CADU;AAEvBC,IAAAA,eAAe,EAAE;AAFM,GAAzB;AAIA,QAAMC,WAAW,GACd,oBAAC,cAAD;AACC,IAAA,QAAQ,EAAC,WADV;AAEC,IAAA,IAAI,EAAGL,eAFR;AAGC,IAAA,OAAO,EAAGd,eAHX;AAIC,IAAA,aAAa,EAAGhB,aAJjB;AAKC,IAAA,UAAU,EAAG8B,eAAe,CAACM,MAAhB,GAAyB,CAAzB,GACX7C,iBAAiB,CAACyC,gBAAD,CADN,GAC2B,IANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAxE8B,CAmF9B;;AACA,QAAMK,MAAM,GAAGxC,KAAK,CAACyC,YAAN,CAAmB9B,IAAnB,CAAwBhB,IAAI,CAAC+C,aAA7B,EAA4C/B,IAA5C,CAAiDhB,IAAI,CAACkB,cAAtD,CAAf;AACA,QAAM8B,aAAa,GAAG,CAAC;AACrBvC,IAAAA,SAAS,EAAE,UADU;AAErBgB,IAAAA,IAAI,EAAE,QAFe;AAGrBT,IAAAA,IAAI,EAAE;AAHe,GAAD,EAInB;AACDP,IAAAA,SAAS,EAAE,aADV;AAEDgB,IAAAA,IAAI,EAAE,mBAFL;AAGDT,IAAAA,IAAI,EAAE;AAHL,GAJmB,EAQnB;AACDP,IAAAA,SAAS,EAAE,QADV;AAEDgB,IAAAA,IAAI,EAAE,oBAFL;AAGDT,IAAAA,IAAI,EAAE;AAHL,GARmB,EAYnB;AACDP,IAAAA,SAAS,EAAE,eADV;AAC2B;AAC5BgB,IAAAA,IAAI,EAAE,aAFL;AAGDT,IAAAA,IAAI,EAAE,IAHL;AAIDU,IAAAA,QAAQ,EAAEP;AAJT,GAZmB,CAAtB,CArF8B,CAwG9B;;AACA,QAAM8B,eAAe,GAAG,CAACC,GAAD,EAAWC,QAAX,KAA6B;AACnD,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAIF,GAAG,CAACG,MAAJ,KAAe,SAAnB,EAA8B;AAC5BD,MAAAA,OAAO,GAAGvD,MAAM,CAAC,SAAD,CAAhB;AACD;;AACD,WAAOuD,OAAP;AACD,GAND,CAzG8B,CAiH9B;;;AACAP,EAAAA,MAAM,CAAClB,OAAP,CAAgBC,CAAD,IAAY;AAEzB;AACA;AACA;AACA;AACAA,IAAAA,CAAC,CAACK,OAAF,GAAY,IAAZ;AACA,UAAMF,UAAU,GAAG,IAAIlB,IAAJ,CAASe,CAAC,CAACI,aAAX,CAAnB;AACA,QAAIrB,aAAa,GAAGoB,UAApB,EAAgCH,CAAC,CAACK,OAAF,GAAY,KAAZ,CARP,CAUzB;;AACA,UAAMqB,WAAW,GAAG1B,CAAC,CAAC2B,WAAF,KAAkB,IAAlB,GAAyB,IAAI1C,IAAJ,CAASe,CAAC,CAAC2B,WAAX,CAAzB,GAAmDC,QAAvE;AACA5B,IAAAA,CAAC,CAACyB,MAAF,GAAWC,WAAW,IAAI3C,aAAf,GAA+B,QAA/B,GAA0C,SAArD,CAZyB,CAczB;;AACAiB,IAAAA,CAAC,CAACQ,aAAF,GAAkBpC,IAAI,CAACqC,cAAL,CAAoBN,UAApB,CAAlB;AACD,GAhBD;AAiBA,QAAM0B,aAAa,GAAGZ,MAAM,CAACN,MAAP,CAAeX,CAAD,IAAYA,CAAC,CAACK,OAA5B,CAAtB,CAnI8B,CAqI9B;;AACA,QAAMyB,UAAU,GACb,oBAAC,cAAD;AACC,IAAA,QAAQ,EAAC,UADV;AAEC,IAAA,IAAI,EAAGD,aAFR;AAGC,IAAA,OAAO,EAAGT,aAHX;AAIC,IAAA,aAAa,EAAGxC,aAJjB;AAKC,IAAA,UAAU,EAAGyC,eALd;AAMC,IAAA,UAAU,EAAGQ,aAAa,CAACb,MAAd,GAAuB,CAAvB,GACX7C,iBAAiB,CAACyC,gBAAD,CADN,GAC2B,IAPzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAtI8B,CAkJ9B;;AACA,QAAMmB,cAAc,GAAGtD,KAAK,CAACsD,cAA7B,CAnJ8B,CAqJ9B;;AACA,SACA;AAAK,IAAA,SAAS,EAAE9D,MAAM,CAAC+D,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE/D,MAAM,CAACgE,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEjE,UAAU,CAACC,MAAM,CAACiE,MAAR,EAAgBjE,MAAM,CAACS,QAAQ,CAACyD,QAAV,CAAtB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIzD,QAAQ,CAACyD,QAAb,CADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAElE,MAAM,CAACmE,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAG,IAAA,SAAS,EAAEnE,MAAM,CAACoE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuCN,cAAc,CAACO,cAAtD,CAFF,CAJF,CADF,CADF,EAYE;AAAK,IAAA,SAAS,EAAErE,MAAM,CAACkB,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAEnB,UAAU,CAACC,MAAM,CAACsE,WAAR,EAAqBtE,MAAM,CAACS,QAAQ,CAACyD,QAAV,CAA3B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGpB,WAFH,CAZF,EAgBE;AAAK,IAAA,SAAS,EAAE9C,MAAM,CAACiD,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAElD,UAAU,CAACC,MAAM,CAACsE,WAAR,EAAqBtE,MAAM,CAACS,QAAQ,CAACyD,QAAV,CAA3B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGL,UAFH,CAhBF,CADA;AAuBD,CA7KD;;AA+KA,eAAetD,OAAf","sourcesContent":["// Libraries\nimport React from 'react'\nimport classNames from 'classnames'\nimport styles from './content.module.scss'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\n// Utilities (date formatting, etc.)\nimport Util from '../../../../components/misc/Util.js'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\n\n// Function to return JSX for content of details page.\n// props keys:\n  // alertHistory\n  // detailsUpdates\nconst Content = (props: any) => {\n\n  // Get the current facility (facility) and its severity level.\n  const facility = props.selectedFacility;\n\n  // Set default sort parameters for tables\n  const defaultSorted = [{\n    dataField: 'statusDateFmt',\n    order: 'desc'\n  }];\n\n  // Ignore statuses that are after the demo date or today's date.\n  const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n  const statuses = props.detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime);\n\n  // Define sorting function for date columns.\n  /**\n   * [dateSortFunc description]\n   * @method dateSortFunc\n   * @param  {[type]}     aTmp  [description]\n   * @param  {[type]}     bTmp  [description]\n   * @param  {[type]}     order [description]\n   * @return {[type]}           [description]\n   */\n  const dateSortFunc = (aTmp: any, bTmp: any, order: any) => {\n    const a: any = new Date(aTmp);\n    const b: any = new Date(bTmp);\n    if (order === 'desc') {\n      return b - a;\n    }\n    return a - b; // desc\n  }\n\n  // Define columns for status table\n  const columnsStatuses = [{\n    dataField: 'submittedByName',\n    text: 'Submitted by',\n    sort: true\n  }, {\n    dataField: 'details',\n    text: 'Description',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt',\n    text: 'Date / Time',\n    sort: true,\n    sortFunc: dateSortFunc,\n  }];\n\n  // Prepare status data for display in table.\n  statuses.forEach((s: any) => {\n    console.log(s)\n    // If status occurs after the cut-off date for dashboard data, don't show.\n    const statusDate = new Date(s.effective_dtm);\n    s.display = timeThreshold >= statusDate;\n\n    // Determine name to put in table\n    // TODO ensure this works with real data\n    s.submittedByName =\n      s.submitted_by === 'hospital_employee' ?\n        'Hospital employee' : s.submitted_by;\n\n    // Format the status date\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  });\n  const statusesInTable = statuses.filter((s: any) => s.display);\n\n  // Define status table JSX\n  const paginationParams = {\n    sizePerPage: 5,\n    hideSizePerPage: true,\n  }\n  const statusTable =\n    (<BootstrapTable\n      keyField='status_id'\n      data={ statusesInTable }\n      columns={ columnsStatuses }\n      defaultSorted={ defaultSorted }\n      pagination={ statusesInTable.length > 5 ?\n        paginationFactory(paginationParams) : null\n      }\n    />);\n\n  // Ignore alerts that are after the demo date or today's date.\n  const alerts = props.alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n  const columnsAlerts = [{\n    dataField: 'severity',\n    text: 'Status',\n    sort: true\n  }, {\n    dataField: 'description',\n    text: 'Alert description',\n    sort: true\n  }, {\n    dataField: 'active',\n    text: 'Active or cleared?',\n    sort: true\n  }, {\n    dataField: 'statusDateFmt', // to format\n    text: 'Date / Time',\n    sort: true,\n    sortFunc: dateSortFunc,\n  }];\n\n  // Define classes for rows so that cleared alerts are grayed out.\n  const alertRowClasses = (row: any, rowIndex: any) => {\n    let classes = null;\n    if (row.active === 'Cleared') {\n      classes = styles['cleared'];\n    }\n    return classes;\n  };\n\n  // Process alerts data for inclusion in table.\n  alerts.forEach((s: any) => {\n\n    // If status date (alert date) occurs after the time threshold for the\n    // notional data, then don't display it.\n    // TODO ensure this is turned off when real data are used, or that it at\n    // least doesn't delete data errantly.\n    s.display = true;\n    const statusDate = new Date(s.effective_dtm);\n    if (timeThreshold < statusDate) s.display = false;\n\n    // True if the alert is active, false if it is cleared.\n    const clearedDate = s.cleared_dtm !== null ? new Date(s.cleared_dtm) : Infinity;\n    s.active = clearedDate >= timeThreshold ? 'Active' : 'Cleared';\n\n    // Format the status date\n    s.statusDateFmt = Util.formatDatetime(statusDate);\n  })\n  const alertsInTable = alerts.filter((s: any) => s.display);\n\n  // Define status table JSX\n  const alertTable =\n    (<BootstrapTable\n      keyField='alert_id'\n      data={ alertsInTable }\n      columns={ columnsAlerts }\n      defaultSorted={ defaultSorted }\n      rowClasses={ alertRowClasses }\n      pagination={ alertsInTable.length > 5 ?\n        paginationFactory(paginationParams) : null\n      }\n    />);\n\n  // Get datetime stamp for facility status and other elements.\n  const datetimeStamps = props.datetimeStamps;\n\n  // JSX for details page content.\n  return (\n  <div className={styles.content}>\n    <div className={styles.summary}>\n      <div>\n        <div className={classNames(styles.status, styles[facility.severity])}>\n          <p>{facility.severity}</p>\n        </div>\n        <div>\n          <p className={styles.title}>Facility status</p>\n          <p className={styles.date}>updated on {datetimeStamps.facilityStatus}</p>\n        </div>\n      </div>\n    </div>\n    <div className={styles.detailsUpdates}>\n      <p className={classNames(styles.highlighted, styles[facility.severity])}>Status updates</p>\n      {statusTable}\n    </div>\n    <div className={styles.alertHistory}>\n      <p className={classNames(styles.highlighted, styles[facility.severity])}>Alert history</p>\n      {alertTable}\n    </div>\n  </div>\n)\n}\n\nexport default Content\n"]},"metadata":{},"sourceType":"module"}