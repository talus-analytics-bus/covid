{"ast":null,"code":"import axios from 'axios';\n/**\n * Get observation data from API. Updates the observation data and loading status\n * when complete.\n * @method getObservations\n */\n\nconst Query = async function getObservations(metric_id, temporal_resolution, start_date, end_date = null, country = 'all') {\n  if (end_date === null) {\n    end_date = start_date;\n  }\n\n  ;\n  var params = {\n    metric_id: metric_id,\n    temporal_resolution: temporal_resolution,\n    spatial_resolution: 'country',\n    start: start_date,\n    end: end_date\n  };\n\n  if (country !== 'all') {\n    params['place_id'] = 'country';\n  }\n\n  ;\n  const res = await axios(\"\".concat(API_BASE, \"/observations\"), {\n    params\n  });\n  return res.data.data;\n};\n\nexport default Query;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/misc/Query.js"],"names":["axios","Query","getObservations","metric_id","temporal_resolution","start_date","end_date","country","params","spatial_resolution","start","end","res","API_BASE","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;AAKA,MAAMC,KAAK,GAAG,eAAeC,eAAf,CAA+BC,SAA/B,EAA0CC,mBAA1C,EAA+DC,UAA/D,EAA2EC,QAAQ,GAAC,IAApF,EAA0FC,OAAO,GAAC,KAAlG,EAAyG;AACrH,MAAID,QAAQ,KAAK,IAAjB,EAAuB;AAACA,IAAAA,QAAQ,GAAGD,UAAX;AAAsB;;AAAA;AAE9C,MAAIG,MAAM,GAAG;AACXL,IAAAA,SAAS,EAAEA,SADA;AAEXC,IAAAA,mBAAmB,EAAEA,mBAFV;AAGXK,IAAAA,kBAAkB,EAAE,SAHT;AAIXC,IAAAA,KAAK,EAAEL,UAJI;AAKXM,IAAAA,GAAG,EAAEL;AALM,GAAb;;AAQA,MAAIC,OAAO,KAAK,KAAhB,EAAuB;AAAEC,IAAAA,MAAM,CAAC,UAAD,CAAN,GAAqB,SAArB;AAA+B;;AAAA;AAExD,QAAMI,GAAG,GAAG,MAAMZ,KAAK,WAAIa,QAAJ,oBAA6B;AAClDL,IAAAA;AADkD,GAA7B,CAAvB;AAIA,SAAOI,GAAG,CAACE,IAAJ,CAASA,IAAhB;AACD,CAlBD;;AAoBA,eAAeb,KAAf","sourcesContent":["import axios from 'axios'\n\n/**\n * Get observation data from API. Updates the observation data and loading status\n * when complete.\n * @method getObservations\n */\nconst Query = async function getObservations(metric_id, temporal_resolution, start_date, end_date=null, country='all') {\n  if (end_date === null) {end_date = start_date};\n\n  var params = {\n    metric_id: metric_id,\n    temporal_resolution: temporal_resolution,\n    spatial_resolution: 'country',\n    start: start_date,\n    end: end_date\n  };\n\n  if (country !== 'all') { params['place_id'] = 'country'};\n\n  const res = await axios(`${API_BASE}/observations`, {\n    params\n  });\n\n  return res.data.data\n};\n\nexport default Query;\n"]},"metadata":{},"sourceType":"module"}