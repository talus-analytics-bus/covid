{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/dash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/dash/src/components/views/details/Details.tsx\";\nimport React from 'react';\nimport getObservations from '../../../components/misc/Query.js';\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // import { facility } from '../../../types/index'\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL; // FC for Details.\n\nconst Details = props => {\n  // Manage loading state (don't show if loading, etc.)\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loading = _React$useState2[0],\n        setLoading = _React$useState2[1]; // Get data for current country.\n\n\n  const country = props.selectedCountry; // total population\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        countryPop = _React$useState4[0],\n        setCountryPop = _React$useState4[1]; // GDP per capita\n\n\n  const _React$useState5 = React.useState(0),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        countryGDP = _React$useState6[0],\n        setCountryGDP = _React$useState6[1]; // JEE Score\n\n\n  const _React$useState7 = React.useState(0),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        countryJEE = _React$useState8[0],\n        setCountryJEE = _React$useState8[1]; //Policies (doubt we get this by October?)\n  // Vaccination coverage\n\n\n  const coverage = props.coverage; // Reported cases\n\n  const cases = props.cases; // Reported cases over time\n\n  const _React$useState9 = React.useState([]),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        caseHistory = _React$useState10[0],\n        setCaseHistory = _React$useState10[1]; // Vaccination coverage over time\n\n\n  const _React$useState11 = React.useState([]),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        coverageHistory = _React$useState12[0],\n        setCoverageHistory = _React$useState12[1]; //Resolve ready score by category\n\n\n  const _React$useState13 = React.useState(0),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        readyFind = _React$useState14[0],\n        setReadyFind = _React$useState14[1];\n\n  const _React$useState15 = React.useState(0),\n        _React$useState16 = _slicedToArray(_React$useState15, 2),\n        readyStop = _React$useState16[0],\n        setReadyStop = _React$useState16[1];\n\n  const _React$useState17 = React.useState(0),\n        _React$useState18 = _slicedToArray(_React$useState17, 2),\n        readyPrevent = _React$useState18[0],\n        setReadyPrevent = _React$useState18[1];\n\n  const _React$useState19 = React.useState(0),\n        _React$useState20 = _slicedToArray(_React$useState19, 2),\n        readyProtect = _React$useState20[0],\n        setReadyProtect = _React$useState20[1]; // Function to make API calls to get data for the state variables above.\n\n\n  const getDetailsData = async () => {\n    setCountryPop((await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country)));\n    setCountryGDP((await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country)));\n    setCountryJEE((await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country)));\n    setCaseHistory((await getObservations(6, 'monthly', '2010-01-01', '2018-01-01', country)));\n    setCoverageHistory((await getObservations(4, 'yearly', '2010-01-01', '2018-01-01', country)));\n    setReadyFind((await getObservations(11, 'occasion', '2016-02-01', '2019-03-01', country)));\n    setReadyStop((await getObservations(12, 'occasion', '2016-02-01', '2019-03-01', country)));\n    setReadyPrevent((await getObservations(10, 'occasion', '2016-02-01', '2019-03-01', country)));\n    setReadyProtect((await getObservations(13, 'occasion', '2016-02-01', '2019-03-01', country)));\n    setLoading(false);\n  }; // Effect hook to load API data.\n\n\n  React.useEffect(() => {\n    getDetailsData();\n  }, []); // If loading do not show JSX content.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  });else {\n    // Get datetime stamp for facility status and other elements\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n    return; // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n    //const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime)\n    //  .filter((d: any) => {\n    //    const statusDate = new Date(d.effective_dtm);\n    //    if (timeThreshold < statusDate) return false;\n    //    return true\n    //  });\n    //const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime)\n    //.filter((d: any) => {\n    //  const statusDate = new Date(d.effective_dtm);\n    //  if (timeThreshold < statusDate) return false;\n    //  return true\n    //});\n    // Return JSX for details.\n    //return (<div className={styles.details}>\n    //<div className={classNames(styles.mapTitle, styles[facility.severity])}>\n    //  <p className={styles.facilityName}>{facility.name}</p>\n    //  <div className={classNames(styles.location, styles[facility.severity])}>\n    //<p>{facility.address}</p>\n    //<p>{facility.city}, {facility.state} {facility.zip}</p>\n    //<p>{facility.telephone}</p>\n    //  </div>\n    //</div>\n    //<div className={classNames(styles.detailsTitle, styles[facility.severity])}>\n    //    <div>\n    //      <div>\n    //        <p>\n    //          <span>Facility status</span>\n    //        </p>\n    //        <p>\n    //          <span>{Util.formatDate(now)}</span>\n    //        </p>\n    //      </div>\n    //  </div>\n    //  <Link to={'/submit/update/' + facility.facility_id}>\n    //    <button>\n    //      Update status\n    //      <i className='material-icons'>edit</i>\n    //    </button>\n    //  </Link>\n    //  </div>\n    //<SimpleMap selectedFacility={facility}/>\n    //<Content\n    //    alertHistory={alertHistory}\n    //    detailsUpdates={detailsUpdates}\n    //    selectedFacility={facility}/>\n    //  </div>);\n  }\n};\n\nexport default Details;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/dash/src/components/views/details/Details.tsx"],"names":["React","getObservations","DEMO_DATE","process","env","now","undefined","Date","API_BASE","REACT_APP_API_BASE_URL","Details","props","useState","loading","setLoading","country","selectedCountry","countryPop","setCountryPop","countryGDP","setCountryGDP","countryJEE","setCountryJEE","coverage","cases","caseHistory","setCaseHistory","coverageHistory","setCoverageHistory","readyFind","setReadyFind","readyStop","setReadyStop","readyPrevent","setReadyPrevent","readyProtect","setReadyProtect","getDetailsData","useEffect","timeThreshold"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Popup from 'reactjs-popup'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport Content from './content/Content'\n\n// Utilities (date formatting, etc.)\nimport Util from '../../../components/misc/Util.js'\n\nimport getObservations from '../../../components/misc/Query.js'\n\nimport classNames from 'classnames'\nimport styles from './details.module.scss'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n// import { facility } from '../../../types/index'\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\n\n// FC for Details.\nconst Details = (props: any) => {\n\n  // Manage loading state (don't show if loading, etc.)\n  const [loading, setLoading] = React.useState(true)\n\n  // Get data for current country.\n  const country = props.selectedCountry;\n\n  // total population\n  const [countryPop, setCountryPop] = React.useState(0);\n\n  // GDP per capita\n  const [countryGDP, setCountryGDP] = React.useState(0);\n\n  // JEE Score\n  const [countryJEE, setCountryJEE] = React.useState(0);\n\n  //Policies (doubt we get this by October?)\n\n  // Vaccination coverage\n  const coverage = props.coverage;\n\n  // Reported cases\n  const cases = props.cases;\n\n  // Reported cases over time\n  const [caseHistory, setCaseHistory] = React.useState([])\n\n  // Vaccination coverage over time\n  const [coverageHistory, setCoverageHistory] = React.useState([])\n\n  //Resolve ready score by category\n  const [readyFind, setReadyFind] = React.useState(0);\n  const [readyStop, setReadyStop] = React.useState(0);\n  const [readyPrevent, setReadyPrevent] = React.useState(0);\n  const [readyProtect, setReadyProtect] = React.useState(0);\n\n  // Function to make API calls to get data for the state variables above.\n  const getDetailsData = async () => {\n    setCountryPop(await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country));\n    setCountryGDP(await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country));\n    setCountryJEE(await getObservations(6, 'monthly', '2019-07-01', '2019-07-01', country));\n\n    setCaseHistory(await getObservations(6, 'monthly', '2010-01-01', '2018-01-01', country));\n    setCoverageHistory(await getObservations(4, 'yearly', '2010-01-01', '2018-01-01', country));\n\n    setReadyFind(await getObservations(11, 'occasion', '2016-02-01', '2019-03-01', country));\n    setReadyStop(await getObservations(12, 'occasion', '2016-02-01', '2019-03-01', country));\n    setReadyPrevent(await getObservations(10, 'occasion', '2016-02-01', '2019-03-01', country));\n    setReadyProtect(await getObservations(13, 'occasion', '2016-02-01', '2019-03-01', country));\n\n    setLoading(false);\n  }\n\n  // Effect hook to load API data.\n  React.useEffect(() => {\n    getDetailsData();\n  }, [])\n\n  // If loading do not show JSX content.\n  if (loading) return (<div></div>);\n  else {\n    // Get datetime stamp for facility status and other elements\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n    return;\n    // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n    //const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime)\n    //  .filter((d: any) => {\n    //    const statusDate = new Date(d.effective_dtm);\n    //    if (timeThreshold < statusDate) return false;\n    //    return true\n    //  });\n    //const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime)\n    //.filter((d: any) => {\n    //  const statusDate = new Date(d.effective_dtm);\n    //  if (timeThreshold < statusDate) return false;\n    //  return true\n    //});\n\n    // Return JSX for details.\n    //return (<div className={styles.details}>\n      //<div className={classNames(styles.mapTitle, styles[facility.severity])}>\n      //  <p className={styles.facilityName}>{facility.name}</p>\n      //  <div className={classNames(styles.location, styles[facility.severity])}>\n          //<p>{facility.address}</p>\n          //<p>{facility.city}, {facility.state} {facility.zip}</p>\n          //<p>{facility.telephone}</p>\n      //  </div>\n      //</div>\n      //<div className={classNames(styles.detailsTitle, styles[facility.severity])}>\n    //    <div>\n    //      <div>\n    //        <p>\n    //          <span>Facility status</span>\n    //        </p>\n    //        <p>\n    //          <span>{Util.formatDate(now)}</span>\n    //        </p>\n    //      </div>\n      //  </div>\n\n      //  <Link to={'/submit/update/' + facility.facility_id}>\n      //    <button>\n      //      Update status\n      //      <i className='material-icons'>edit</i>\n      //    </button>\n      //  </Link>\n\n    //  </div>\n      //<SimpleMap selectedFacility={facility}/>\n      //<Content\n    //    alertHistory={alertHistory}\n    //    detailsUpdates={detailsUpdates}\n    //    selectedFacility={facility}/>\n  //  </div>);\n  }\n};\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}