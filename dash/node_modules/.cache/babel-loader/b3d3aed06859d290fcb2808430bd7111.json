{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/map/Map.js\";\nimport React from 'react';\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl';\nimport classNames from 'classnames';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './map.scss';\nimport styles from './map.module.scss';\nimport initMap from './mapUtils';\nimport Legend from './legend/Legend';\nimport ResetZoom from './resetZoom/ResetZoom';\nimport Filter from './filter/Filter';\nimport StatePopup from './statePopup/StatePopup.js';\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst Map = ({\n  facilities,\n  mappedFacilityTypes,\n  setMappedFacilityTypes\n}) => {\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: -93.32713892121933,\n    latitude: 28.902854631885432,\n    zoom: 4.0\n  };\n\n  const _React$useState = React.useState(defaultViewport),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        viewport = _React$useState2[0],\n        setViewport = _React$useState2[1];\n\n  const _React$useState3 = React.useState({}),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedFacility = _React$useState4[0],\n        setSelectedFacility = _React$useState4[1];\n\n  const _React$useState5 = React.useState(''),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        selectedState = _React$useState6[0],\n        setSelectedState = _React$useState6[1];\n\n  const _React$useState7 = React.useState([]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        selectedStateFacilities = _React$useState8[0],\n        setselectedStateFacilities = _React$useState8[1];\n\n  const _React$useState9 = React.useState([0, 0]),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        cursorLngLat = _React$useState10[0],\n        setCursorLngLat = _React$useState10[1];\n\n  const _React$useState11 = React.useState(false),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        showStatePopup = _React$useState12[0],\n        setShowStatePopup = _React$useState12[1];\n\n  const _React$useState13 = React.useState(false),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        showFacilityPopup = _React$useState14[0],\n        setShowFacilityPopup = _React$useState14[1]; // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n\n\n  const _React$useState15 = React.useState(false),\n        _React$useState16 = _slicedToArray(_React$useState15, 2),\n        showReset = _React$useState16[0],\n        setShowReset = _React$useState16[1];\n\n  let mapRef = React.createRef();\n  React.useEffect(() => {\n    const map = mapRef.getMap();\n    initMap(map, facilities);\n  }, []);\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n\n  const resetViewport = () => {\n    // Hide the reset button after click.\n    setShowReset(false); // Hide state tooltip\n\n    setShowStatePopup(false);\n    const map = mapRef.getMap();\n    map.setFilter('selected-fill', ['!', true]);\n    map.setFilter('selected-border', ['!', true]); // Hide facility tooltip.\n\n    setShowFacilityPopup(false); // Change viewport back to default.\n\n    setViewport(defaultViewport);\n  };\n  /**\n   * Fired when checkbox is changed; updates the state of the checkbox.\n   * @method handleCheck\n   * @param  {obj}    e Change event\n   */\n\n\n  const handleCheck = (e, checkboxList) => {\n    // Close any open facility popups.\n    setShowFacilityPopup(false); // get checkbox that was clicked\n\n    const clickedCheckbox = checkboxList.find(c => c.label === e.target.id); // update state\n\n    clickedCheckbox.state[1](e.target.checked); // update list of allowed facility types for mapping / bar chart. Note:\n    // \"concat\" must be used instead of \"push\" in order for React to detect a\n    // state change in the setter function of the hook that is called at the end\n    // of this code block.\n\n    let updatedFacilityTypes = mappedFacilityTypes;\n\n    if (e.target.checked) {\n      updatedFacilityTypes = updatedFacilityTypes.concat([e.target.value]);\n    } else {\n      updatedFacilityTypes = updatedFacilityTypes.filter(t => t !== e.target.value);\n    }\n\n    setMappedFacilityTypes(updatedFacilityTypes); // Get map object\n\n    const map = mapRef.getMap(); // Update map data source so only the mapped facility types are included.\n\n    ['stable', 'alerted', 'critical'].forEach(severityLevel => {\n      // Get source for severity level\n      const source = map.getSource(\"\".concat(severityLevel, \"-facilities\")); // Create mapped facility data\n\n      const mappedData = {\n        type: 'FeatureCollection',\n        features: facilities.filter(({\n          severity,\n          type\n        }) => {\n          // Facility must be matching severity level and of a type that is\n          // currently being mapped.\n          return severity === severityLevel && updatedFacilityTypes.includes(type);\n        }).map(({\n          facility_id,\n          type,\n          longitude,\n          latitude\n        }) => ({\n          type: 'Feature',\n          properties: {\n            facility_id,\n            type\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude]\n          }\n        }))\n      }; // Set the source's data.\n\n      source.setData(mappedData);\n    });\n  };\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n\n\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap(); // Get list of features under the mouse cursor.\n\n    const features = map.queryRenderedFeatures(e.point); // Use pointer cursor for any facility icons, grab cursor otherwise.\n\n    const onFacility = features.find(f => f['source'].endsWith('-facilities')) !== undefined;\n    const onState = viewport.zoom < 7 // don't show pointer if zoomed in too far over state\n    && features.find(f => f['source'] === 'states') !== undefined;\n    const showPointer = onFacility || onState;\n    map.getContainer().parentElement.parentElement.style.cursor = showPointer ? 'pointer' : 'grab';\n  };\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n\n\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = e => {\n      try {\n        if (e.target.className.includes('legend') || e.target.className.includes('filter') || e.target.offsetParent.className.includes('legend') || e.target.offsetParent.className.includes('filter')) {\n          return true;\n        }\n      } catch {\n        console.log('[Error] Unexpected click event: ');\n        console.log(e);\n        return false;\n      }\n\n      return false;\n    }; // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n\n\n    if (clickedMenus(e)) return; // Was the feature on the map that was clicked a cluster or a single point?\n\n    const clickedOnCluster = e.features.find(f => {\n      // Get last bit of the layer ID\n      const layerIdFinalTag = f.layer.id.split('-').slice(-1)[0]; // If it's a cluster or a point, then you clicked on a cluster (which\n      // can sometimes consist of a single, unlabeled point).\n\n      const cluster = layerIdFinalTag === 'clusters';\n      const point = layerIdFinalTag === 'point';\n      return cluster || point;\n    });\n    const clickedOnFacility = e.features.find(f => f.layer.id.split('-').slice(-1)[0] === 'facilities');\n    const clickedOnState = e.features.find(f => f.layer.id === 'state-fills');\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n      // Get current zoom level.\n      const curZoom = viewport.zoom; // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n\n      const flyZoom = finalZoom !== null ? finalZoom : Math.min(8, curZoom * 1.50); // Start off flying\n\n      let flying = true;\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n\n      function onFlyEnd() {\n        // Get map object reference.\n        const map = mapRef.getMap(); // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n\n        map.off('moveend', onFlyEnd); // If flying,\n\n        if (flying) {\n          // Stop flying,\n          flying = false; // Set viewport state to the flight destination and zoom level\n\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      }\n\n      ; // Get map object reference.\n\n      const map = mapRef.getMap(); // Assign event listener so viewport is updated when flight is over.\n\n      map.on('moveend', onFlyEnd); // Fly to the position occupied by the clicked cluster on the map.\n\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) {\n          return t;\n        }\n      });\n      setShowReset(true);\n    };\n\n    if (clickedOnFacility) {\n      // Get longlat of facility.\n      const longlat = clickedOnFacility.geometry.coordinates; // Fly user toward the clicked facility.\n\n      flyToLongLat(longlat, // facility longlat\n      Math.max(8, viewport.zoom), // End at zoom level of H, N, D icons\n      viewport, // viewport state variable to be updated\n      mapRef, // mapbox map reference object\n      () => {\n        // callback function at end of flying\n        // Set selected facility and open its popup.\n        const id = clickedOnFacility.properties.facility_id;\n        setSelectedFacility(facilities.find(f => f.facility_id === id));\n        setCursorLngLat(e.lngLat);\n        setShowStatePopup(false);\n        setShowFacilityPopup(true);\n      }); // If the user clicked on a cluster:\n    } else if (clickedOnCluster) {\n      // If the cluster represented a single facility, zoom all the way into\n      // it, and trigger its popup.\n      const singleFacility = clickedOnCluster.layer.id.endsWith('-point');\n      const callback = singleFacility ? () => {\n        // Get facility from facility_id in point properties\n        const id = clickedOnCluster.properties.facility_id; // Set selected facility\n\n        const clickedOnFacility = facilities.find(f => f.facility_id === id);\n        setSelectedFacility(clickedOnFacility); // Set cursor position of tooltip\n\n        const facilityLongLat = [clickedOnFacility.longitude, clickedOnFacility.latitude];\n        setCursorLngLat(facilityLongLat); // Close state popup if open\n\n        setShowStatePopup(false); // Open tooltip for facility\n\n        setShowFacilityPopup(true);\n      } : undefined; // Set target zoom level (final)\n\n      const finalZoom = singleFacility ? 8 : null; // Get lat/long coordinates of the cluster that was clicked.\n\n      const longlat = clickedOnCluster.geometry.coordinates; // Fly user toward the clicked cluster.\n\n      flyToLongLat(longlat, // cluster longlat\n      finalZoom, // final zoom level after flying, set above\n      viewport, // viewport state variable to be updated\n      mapRef, // mapbox map reference object\n      callback // callback function after flying, set above\n      );\n    } else if (clickedOnState) {\n      // If zoomed in to the point where state names are no longer visible,\n      // then do nothing.\n      if (viewport.zoom > 7) return; // Otherwise, highlight state and show its tooltip.\n\n      const map = mapRef.getMap();\n      const fips = clickedOnState.properties.fips;\n      map.setFilter('selected-fill', ['==', 'fips', fips]);\n      map.setFilter('selected-border', ['==', 'fips', fips]);\n      setSelectedState(clickedOnState.properties.name);\n      setselectedStateFacilities(facilities.filter(f => f.fips === fips));\n      setCursorLngLat(e.lngLat);\n      setShowFacilityPopup(false);\n      setShowStatePopup(true);\n    }\n  };\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap();\n    setShowStatePopup(false);\n    setSelectedState('');\n    map.setFilter('selected-fill', ['!', true]);\n    map.setFilter('selected-border', ['!', true]);\n  }; // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n\n\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160,\n    // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1]\n  };\n  return React.createElement(ReactMapGL, Object.assign({\n    ref: map => mapRef = map,\n    mapboxApiAccessToken: TOKEN //mapStyle='mapbox://styles/mapbox/streets-v10'\n    ,\n    mapStyle: \"mapbox://styles/traethethird/cjzfsoegd0nam1cqlrv0imonb\"\n  }, viewport, {\n    minZoom: 3,\n    onViewportChange: v => {\n      // Ensure map is in northern and western hemispheres. TODO elegantly.\n      if (v.longitude < maxBounds.minLongitude) {\n        v.longitude = maxBounds.minLongitude;\n      } else if (v.longitude > maxBounds.maxLongitude && v.longitude > 40) {\n        v.longitude = maxBounds.minLongitude;\n      } else if (v.longitude > -10 && v.longitude < 40) {\n        v.longitude = maxBounds.maxLongitude;\n      }\n\n      if (v.latitude < maxBounds.minLatitude) {\n        v.latitude = maxBounds.minLatitude;\n      } else if (v.latitude > maxBounds.maxLatitude) {\n        v.latitude = maxBounds.maxLatitude;\n      }\n\n      if (v.zoom < limZoom) v.zoom = limZoom; // Update viewport.\n\n      setViewport(v); // If viewport deviates from the default zoom or longlat, show the\n      // \"Reset\" button in the bottom left. Otherwise, hide it.\n\n      if (v.zoom !== defaultViewport.zoom || v.longitude !== defaultViewport.longitude || v.latitude !== defaultViewport.latitude) setShowReset(true);else setShowReset(false);\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    doubleClickZoom: false //remove 300ms delay on clicking\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      bottom: '30px',\n      left: 0,\n      padding: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }, React.createElement(NavigationControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449\n    },\n    __self: this\n  })), React.createElement(Filter, {\n    handleCheck: handleCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }), showReset && React.createElement(ResetZoom, {\n    handleClick: resetViewport,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453\n    },\n    __self: this\n  }), showStatePopup && React.createElement(Popup, {\n    color: \"#4286f4\",\n    style: {\n      margin: 0,\n      padding: 0,\n      backgroundColor: '#4286f4'\n    },\n    longitude: cursorLngLat[0],\n    latitude: cursorLngLat[1],\n    closeButton: true,\n    closeOnClick: true,\n    onClose: onPopupClose,\n    anchor: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455\n    },\n    __self: this\n  }, React.createElement(StatePopup, {\n    state: selectedState,\n    facilities: selectedStateFacilities,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  })));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/map/Map.js"],"names":["React","ReactMapGL","NavigationControl","Popup","classNames","styles","initMap","Legend","ResetZoom","Filter","StatePopup","TOKEN","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","Map","facilities","mappedFacilityTypes","setMappedFacilityTypes","defaultViewport","width","height","longitude","latitude","zoom","useState","viewport","setViewport","selectedFacility","setSelectedFacility","selectedState","setSelectedState","selectedStateFacilities","setselectedStateFacilities","cursorLngLat","setCursorLngLat","showStatePopup","setShowStatePopup","showFacilityPopup","setShowFacilityPopup","showReset","setShowReset","mapRef","createRef","useEffect","map","getMap","resetViewport","setFilter","handleCheck","e","checkboxList","clickedCheckbox","find","c","label","target","id","state","checked","updatedFacilityTypes","concat","value","filter","t","forEach","severityLevel","source","getSource","mappedData","type","features","severity","includes","facility_id","properties","geometry","coordinates","setData","handleMouseMove","queryRenderedFeatures","point","onFacility","f","endsWith","undefined","onState","showPointer","getContainer","parentElement","style","cursor","handleClick","clickedMenus","className","offsetParent","console","log","clickedOnCluster","layerIdFinalTag","layer","split","slice","cluster","clickedOnFacility","clickedOnState","flyToLongLat","longlat","finalZoom","callback","curZoom","flyZoom","Math","min","flying","onFlyEnd","off","newViewport","on","flyTo","center","bearing","speed","curve","easing","max","lngLat","singleFacility","facilityLongLat","fips","name","onPopupClose","limLon","limLat","limZoom","maxBounds","minLongitude","maxLongitude","minLatitude","maxLatitude","v","position","bottom","left","padding","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactMapGL, { NavigationControl, Popup } from 'react-map-gl'\n\nimport classNames from 'classnames'\n\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport './map.scss'\nimport styles from './map.module.scss'\n\nimport initMap from './mapUtils'\n\nimport Legend from './legend/Legend'\nimport ResetZoom from './resetZoom/ResetZoom'\nimport Filter from './filter/Filter'\nimport StatePopup from './statePopup/StatePopup.js'\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\n\nconst Map = ({ facilities, mappedFacilityTypes, setMappedFacilityTypes }) => {\n\n  const defaultViewport = {\n    width: '100%',\n    height: '100%',\n    longitude: -93.32713892121933,\n    latitude: 28.902854631885432,\n    zoom: 4.0\n  };\n  const [viewport, setViewport] = React.useState(defaultViewport);\n  const [selectedFacility, setSelectedFacility] = React.useState({})\n  const [selectedState, setSelectedState] = React.useState('')\n  const [selectedStateFacilities, setselectedStateFacilities] = React.useState(\n    []\n  )\n  const [cursorLngLat, setCursorLngLat] = React.useState([0, 0])\n  const [showStatePopup, setShowStatePopup] = React.useState(false)\n  const [showFacilityPopup, setShowFacilityPopup] = React.useState(false)\n\n  // Whether the reset button is shown or not. Controlled by the viewport\n  // setting being other than the default.\n  const [showReset, setShowReset] = React.useState(false);\n\n  let mapRef = React.createRef()\n  React.useEffect(() => {\n    const map = mapRef.getMap()\n    initMap(map, facilities)\n  }, [])\n\n\n  /**\n   * Reset the viewport to the default values. This is fired when the \"Reset\"\n   * button is clicked.\n   * @method resetViewport\n   */\n  const resetViewport = () => {\n\n    // Hide the reset button after click.\n    setShowReset(false);\n\n    // Hide state tooltip\n    setShowStatePopup(false);\n    const map = mapRef.getMap();\n    map.setFilter('selected-fill', ['!', true])\n    map.setFilter('selected-border', ['!', true])\n\n    // Hide facility tooltip.\n    setShowFacilityPopup(false);\n\n    // Change viewport back to default.\n    setViewport(defaultViewport);\n  };\n\n  /**\n   * Fired when checkbox is changed; updates the state of the checkbox.\n   * @method handleCheck\n   * @param  {obj}    e Change event\n   */\n  const handleCheck = (e, checkboxList) => {\n\n    // Close any open facility popups.\n    setShowFacilityPopup(false)\n\n    // get checkbox that was clicked\n    const clickedCheckbox = checkboxList.find(c => c.label === e.target.id);\n\n    // update state\n    clickedCheckbox.state[1](e.target.checked);\n\n    // update list of allowed facility types for mapping / bar chart. Note:\n    // \"concat\" must be used instead of \"push\" in order for React to detect a\n    // state change in the setter function of the hook that is called at the end\n    // of this code block.\n    let updatedFacilityTypes = mappedFacilityTypes;\n    if (e.target.checked) {\n      updatedFacilityTypes =\n        updatedFacilityTypes.concat([e.target.value]);\n    } else {\n      updatedFacilityTypes =\n        updatedFacilityTypes.filter(t => t !== e.target.value);\n    }\n    setMappedFacilityTypes(updatedFacilityTypes);\n\n    // Get map object\n    const map = mapRef.getMap();\n\n    // Update map data source so only the mapped facility types are included.\n    ['stable', 'alerted', 'critical'].forEach(severityLevel => {\n\n      // Get source for severity level\n      const source = map.getSource(`${severityLevel}-facilities`);\n\n      // Create mapped facility data\n      const mappedData = {\n        type: 'FeatureCollection',\n        features: facilities\n          .filter(({ severity, type }) => {\n\n            // Facility must be matching severity level and of a type that is\n            // currently being mapped.\n            return severity === severityLevel\n              && updatedFacilityTypes.includes(type);\n          })\n          .map(\n            ({ facility_id, type, longitude, latitude }) => ({\n              type: 'Feature',\n              properties: { facility_id, type },\n              geometry: {\n                type: 'Point',\n                coordinates: [longitude, latitude]\n              }\n            })\n        )\n      };\n\n      // Set the source's data.\n      source.setData(mappedData);\n    });\n  };\n\n  /**\n   * Fired when mouse moves on map, mainly to handle cursor styling.\n   * @method handleMouseMove\n   * @param  {obj}        e Mousemove event.\n   */\n  const handleMouseMove = e => {\n    // Get map reference object.\n    const map = mapRef.getMap();\n\n    // Get list of features under the mouse cursor.\n    const features = map.queryRenderedFeatures(e.point);\n\n    // Use pointer cursor for any facility icons, grab cursor otherwise.\n    const onFacility =\n      features.find(f => f['source'].endsWith('-facilities')) !== undefined;\n    const onState =\n      viewport.zoom < 7 // don't show pointer if zoomed in too far over state\n      && features.find(f => f['source'] === 'states') !== undefined;\n    const showPointer = onFacility || onState;\n    map.getContainer().parentElement.parentElement.style.cursor =\n      showPointer ? 'pointer' : 'grab';\n  };\n\n  /**\n   * Fired when map is clicked.\n   * @method handleClick\n   * @param  {obj}    e Click event.\n   */\n  const handleClick = e => {\n    /**\n     * Returns true if user clicked any part of the legend or the filter menus\n     * (rather than directly on the map), and false otherwise.\n     * @method clickedMenus\n     * @param  {obj}      e Click event.\n     * @return {bool}        Boolean result (see description).\n     */\n    const clickedMenus = (e) => {\n      try {\n        if (\n          e.target.className.includes('legend')\n          || e.target.className.includes('filter')\n          || e.target.offsetParent.className.includes('legend')\n          || e.target.offsetParent.className.includes('filter')) {\n            return true;\n          }\n        } catch {\n          console.log('[Error] Unexpected click event: ')\n          console.log(e);\n          return false;\n        }\n        return false;\n    };\n\n    // If the user clicked on the legend and not on the actual map, do nothing.\n    // Otherwise, do the correct map interaction.\n    if (clickedMenus(e)) return;\n\n    // Was the feature on the map that was clicked a cluster or a single point?\n    const clickedOnCluster = e.features.find(\n      (f) => {\n        // Get last bit of the layer ID\n        const layerIdFinalTag = f.layer.id.split('-').slice(-1)[0];\n\n        // If it's a cluster or a point, then you clicked on a cluster (which\n        // can sometimes consist of a single, unlabeled point).\n        const cluster = layerIdFinalTag === 'clusters';\n        const point = layerIdFinalTag === 'point';\n        return cluster || point;\n      }\n    );\n\n    const clickedOnFacility = e.features.find(\n      f => f.layer.id.split('-').slice(-1)[0] === 'facilities'\n    );\n\n    const clickedOnState = e.features.find(f => f.layer.id === 'state-fills')\n\n    /**\n     * Fly user to specified longlat map location, and (if provided) to the\n     * final zoom value -- otherwise the zoom value is 150% of the current\n     * zoom value or 8, whichever is smaller.\n     * @method flyToLongLat\n     * @param  {array}     longlat   Longlat coord in decimal deg\n     * @param  {float}     finalZoom Zoom value to end on, or null\n     * @param  {object}     viewport  Viewport state variable\n     * @param  {object}     mapRef    MapBox map reference object\n     * @param  {function}     callback    Optional callback function when done\n     */\n    const flyToLongLat = (longlat, finalZoom, viewport, mapRef, callback = () => {}) => {\n\n      // Get current zoom level.\n      const curZoom = viewport.zoom;\n\n      // Set zoom level to fly to (0 to 24 inclusive). Either zoom in by 20% or\n      // the minimum zoom level required to see facilities, whichever is\n      // smaller. Use final zoom if it specified.\n      const flyZoom = finalZoom !== null ?\n        finalZoom : Math.min(8, curZoom*1.50);\n\n      // Start off flying\n      let flying = true;\n\n      /**\n       * When flying stops, update the viewport position to match the place\n       * that was flown to.\n       * @method onFlyEnd\n       */\n      function onFlyEnd () {\n\n        // Get map object reference.\n        const map = mapRef.getMap();\n\n        // Delete the event listener for the end of movement (we only want it to\n        // be called when the current flight is over).\n        map.off('moveend', onFlyEnd);\n\n        // If flying,\n        if (flying) {\n\n          // Stop flying,\n          flying = false;\n\n          // Set viewport state to the flight destination and zoom level\n          const newViewport = {\n            width: '100%',\n            height: '100%',\n            longitude: longlat[0],\n            latitude: longlat[1],\n            zoom: flyZoom,\n          };\n          setViewport(newViewport);\n          if (callback) callback();\n        }\n      };\n\n      // Get map object reference.\n      const map = mapRef.getMap();\n\n      // Assign event listener so viewport is updated when flight is over.\n      map.on('moveend', onFlyEnd);\n\n      // Fly to the position occupied by the clicked cluster on the map.\n      map.flyTo({\n        center: longlat,\n        zoom: flyZoom,\n        bearing: 0,\n        speed: 2,\n        curve: 1,\n        easing: function (t) { return t; }\n      });\n\n      setShowReset(true);\n    };\n\n    if (clickedOnFacility) {\n\n      // Get longlat of facility.\n      const longlat = clickedOnFacility.geometry.coordinates;\n\n      // Fly user toward the clicked facility.\n      flyToLongLat(\n        longlat, // facility longlat\n        Math.max(8, viewport.zoom), // End at zoom level of H, N, D icons\n        viewport, // viewport state variable to be updated\n        mapRef, // mapbox map reference object\n        () => { // callback function at end of flying\n\n          // Set selected facility and open its popup.\n          const id = clickedOnFacility.properties.facility_id\n          setSelectedFacility(facilities.find(f => f.facility_id === id))\n          setCursorLngLat(e.lngLat)\n          setShowStatePopup(false)\n          setShowFacilityPopup(true)\n        },\n      );\n\n    // If the user clicked on a cluster:\n    } else if (clickedOnCluster) {\n      // If the cluster represented a single facility, zoom all the way into\n      // it, and trigger its popup.\n      const singleFacility = clickedOnCluster.layer.id.endsWith('-point');\n      const callback = singleFacility ? () => {\n        // Get facility from facility_id in point properties\n        const id = clickedOnCluster.properties.facility_id\n\n        // Set selected facility\n        const clickedOnFacility = facilities.find(f => f.facility_id === id);\n        setSelectedFacility(clickedOnFacility);\n\n        // Set cursor position of tooltip\n        const facilityLongLat =\n          [clickedOnFacility.longitude, clickedOnFacility.latitude];\n        setCursorLngLat(facilityLongLat);\n\n        // Close state popup if open\n        setShowStatePopup(false)\n\n        // Open tooltip for facility\n        setShowFacilityPopup(true)\n      } : undefined;\n\n      // Set target zoom level (final)\n      const finalZoom = singleFacility ? 8 : null;\n\n      // Get lat/long coordinates of the cluster that was clicked.\n      const longlat = clickedOnCluster.geometry.coordinates;\n\n      // Fly user toward the clicked cluster.\n      flyToLongLat(\n        longlat, // cluster longlat\n        finalZoom, // final zoom level after flying, set above\n        viewport, // viewport state variable to be updated\n        mapRef, // mapbox map reference object\n        callback, // callback function after flying, set above\n      );\n\n    } else if (clickedOnState) {\n\n      // If zoomed in to the point where state names are no longer visible,\n      // then do nothing.\n      if (viewport.zoom > 7) return;\n\n      // Otherwise, highlight state and show its tooltip.\n      const map = mapRef.getMap()\n\n      const fips = clickedOnState.properties.fips\n      map.setFilter('selected-fill', ['==', 'fips', fips])\n      map.setFilter('selected-border', ['==', 'fips', fips])\n\n      setSelectedState(clickedOnState.properties.name)\n      setselectedStateFacilities(facilities.filter(f => f.fips === fips))\n      setCursorLngLat(e.lngLat)\n      setShowFacilityPopup(false)\n      setShowStatePopup(true)\n    }\n  }\n\n  const onPopupClose = () => {\n    const map = mapRef.getMap()\n    setShowStatePopup(false)\n    setSelectedState('')\n    map.setFilter('selected-fill', ['!', true])\n    map.setFilter('selected-border', ['!', true])\n  }\n\n  // Set bounding box on the pannable area of the map to be the northern and\n  // western hemispheres\n  const limLon = [-160, -10];\n  const limLat = [0, 80];\n  const limZoom = 2;\n  const maxBounds = {\n    minLongitude: -160, // longitude must be negative and within these ranges.\n    maxLongitude: -10,\n    minLatitude: limLat[0],\n    maxLatitude: limLat[1],\n  };\n\n  return (\n    <ReactMapGL\n      ref={map => (mapRef = map)}\n      mapboxApiAccessToken={TOKEN}\n      //mapStyle='mapbox://styles/mapbox/streets-v10'\n      mapStyle='mapbox://styles/traethethird/cjzfsoegd0nam1cqlrv0imonb'\n      {...viewport}\n      minZoom = {3}\n      onViewportChange={v => {\n\n        // Ensure map is in northern and western hemispheres. TODO elegantly.\n        if (v.longitude < maxBounds.minLongitude) {\n          v.longitude = maxBounds.minLongitude;\n        }\n        else if (v.longitude > maxBounds.maxLongitude && v.longitude > 40) {\n          v.longitude = maxBounds.minLongitude;\n        }\n        else if (v.longitude > -10 && v.longitude < 40) {\n          v.longitude = maxBounds.maxLongitude;\n        }\n\n        if ( v.latitude < maxBounds.minLatitude ) {\n          v.latitude = maxBounds.minLatitude;\n        }\n        else if ( v.latitude > maxBounds.maxLatitude ) {\n          v.latitude = maxBounds.maxLatitude;\n        }\n        if (v.zoom < limZoom) v.zoom = limZoom;\n\n        // Update viewport.\n        setViewport(v);\n\n        // If viewport deviates from the default zoom or longlat, show the\n        // \"Reset\" button in the bottom left. Otherwise, hide it.\n        if (\n            v.zoom !== defaultViewport.zoom\n            || v.longitude !== defaultViewport.longitude\n            || v.latitude !== defaultViewport.latitude\n          ) setShowReset(true);\n        else setShowReset(false);\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      doubleClickZoom={false} //remove 300ms delay on clicking\n    >\n      <div\n        style={{\n          position: 'absolute',\n          bottom: '30px',\n          left: 0,\n          padding: '10px'\n        }}\n      >\n        <NavigationControl />\n      </div>\n      <Filter handleCheck={handleCheck} />\n      <Legend />\n      {showReset && (<ResetZoom handleClick={resetViewport}/>)}\n      {showStatePopup && (\n        <Popup\n          color='#4286f4'\n          style={{ margin: 0, padding: 0, backgroundColor: '#4286f4' }}\n          longitude={cursorLngLat[0]}\n          latitude={cursorLngLat[1]}\n          closeButton={true}\n          closeOnClick={true}\n          onClose={onPopupClose}\n          anchor='top'\n        >\n          <StatePopup\n            state={selectedState}\n            facilities={selectedStateFacilities}\n          />\n        </Popup>\n      )}\n    </ReactMapGL>\n  )\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}