{"ast":null,"code":"import statesSource from '../../assets/featureCollections/states.json';\nimport dialysisIcon from '../../assets/images/markers/dialysis-blue.png';\nimport hospitalIcon from '../../assets/images/markers/hospital-blue.png';\nimport nursingIcon from '../../assets/images/markers/nursing-blue.png';\nimport dialysisStableIcon from '../../assets/images/markers/dialysis-green.png';\nimport hospitalStableIcon from '../../assets/images/markers/hospital-green.png';\nimport nursingStableIcon from '../../assets/images/markers/nursing-green.png';\nimport dialysisAlertedIcon from '../../assets/images/markers/dialysis-yellow.png';\nimport hospitalAlertedIcon from '../../assets/images/markers/hospital-yellow.png';\nimport nursingAlertedIcon from '../../assets/images/markers/nursing-yellow.png';\nimport dialysisCriticalIcon from '../../assets/images/markers/dialysis-red.png';\nimport hospitalCriticalIcon from '../../assets/images/markers/hospital-red.png';\nimport nursingCriticalIcon from '../../assets/images/markers/nursing-red.png';\nconst param = {\n  facility: {\n    minZoom: 8\n  },\n  cluster: {\n    maxZoom: 8,\n    threshZoom: 7 // threshZoom: 14,\n\n  }\n};\n\nconst initMap = (map, facilities) => {\n  // split facilities by severity\n  const stableFacilities = [];\n  const alertedFacilities = [];\n  const criticalFacilities = [];\n  facilities.forEach(e => {\n    switch (e.severity) {\n      case 'stable':\n        stableFacilities.push(e);\n        break;\n\n      case 'alerted':\n        alertedFacilities.push(e);\n        break;\n\n      case 'critical':\n        criticalFacilities.push(e);\n        break;\n\n      default:\n        break;\n    }\n  });\n  map.on('load', function () {\n    addImages();\n    initStates();\n    initFacilities();\n  });\n\n  const addImages = () => {\n    Array(['dialysis-stable', dialysisStableIcon], ['hospital-stable', hospitalStableIcon], ['nursing-stable', nursingStableIcon], ['dialysis-alerted', dialysisAlertedIcon], ['hospital-alerted', hospitalAlertedIcon], ['nursing-alerted', nursingAlertedIcon], ['dialysis-critical', dialysisCriticalIcon], ['hospital-critical', hospitalCriticalIcon], ['nursing-critical', nursingCriticalIcon]).forEach(([name, icon]) => {\n      map.loadImage(icon, (err, img) => {\n        map.addImage(name, img);\n      });\n    });\n  };\n\n  const initStates = () => {\n    if (!map.getSource('states')) map.addSource('states', {\n      type: 'geojson',\n      data: statesSource //'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'\n\n    });\n    map.addLayer({\n      id: 'state-fills',\n      type: 'fill',\n      source: 'states',\n      paint: {\n        'fill-opacity': 0\n      }\n    });\n    map.addLayer({\n      id: 'selected-fill',\n      type: 'fill',\n      source: 'states',\n      filter: ['!', true],\n      paint: {\n        'fill-color': '#627BC1',\n        'fill-opacity': 0.5\n      }\n    });\n    map.addLayer({\n      id: 'selected-border',\n      type: 'line',\n      source: 'states',\n      filter: ['!', true],\n      paint: {\n        'line-color': '#627BC1',\n        'line-width': 2\n      }\n    });\n  };\n\n  const initFacilities = () => {\n    // 'cluster' option to true. GL-JS will add the point_count property to your source data.\n    Array(['stable', stableFacilities, '#009a65'], ['alerted', alertedFacilities, '#f9c13b'], ['critical', criticalFacilities, '#eb1c25']).forEach(([severity, facilities, color]) => {\n      /* Add Sources */\n      const sourceName = \"\".concat(severity, \"-facilities\");\n      if (!map.getSource(sourceName)) map.addSource(sourceName, {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: facilities.map(({\n            facility_id,\n            type,\n            longitude,\n            latitude\n          }) => ({\n            type: 'Feature',\n            properties: {\n              facility_id,\n              type\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: [longitude, latitude]\n            }\n          }))\n        },\n        cluster: true,\n        clusterMaxZoom: param.cluster.threshZoom,\n        // Max zoom to cluster points on\n        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n\n      });\n      /* Add Layers */\n\n      Array('Dialysis Facility', 'Hospital', 'Nursing Home').forEach(type => {\n        const layerName = \"\".concat(type.split(' ')[0].toLowerCase(), \"-\").concat(severity);\n        map.addLayer({\n          id: \"\".concat(layerName, \"-facilities\"),\n          type: 'symbol',\n          source: sourceName,\n          minzoom: param.facility.minZoom,\n          // filter: ['all', ['!', ['has', 'point_count']], ['==', 'type', type]],\n          filter: ['==', 'type', type],\n          layout: {\n            // visibility: 'visible',\n            'icon-image': layerName,\n            'icon-size': 0.5,\n            'icon-padding': 0.5,\n            'icon-allow-overlap': true\n          }\n        });\n        map.addLayer({\n          id: \"\".concat(layerName, \"-cluster-halos\"),\n          type: 'circle',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            'circle-color': color,\n            'circle-opacity': 0.25,\n            'circle-radius': ['step', ['get', 'point_count'], 25, 5, //in cluster\n            30, 10, //in cluster\n            35, 15, //in cluster\n            40]\n          }\n        });\n        map.addLayer({\n          id: \"\".concat(layerName, \"-clusters\"),\n          type: 'circle',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            'circle-color': color,\n            // 'circle-opacity': 0.2,\n            'circle-radius': ['step', ['get', 'point_count'], 20, 5, //in cluster\n            25, 10, //in cluster\n            30, 15, //in cluster\n            35]\n          }\n        });\n        map.addLayer({\n          id: \"\".concat(layerName, \"-cluster-count\"),\n          type: 'symbol',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }\n        });\n        map.addLayer({\n          id: \"\".concat(layerName, \"-unclustered-point\"),\n          type: 'circle',\n          source: sourceName,\n          filter: ['!', ['has', 'point_count']],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            'circle-color': color,\n            'circle-radius': 5.3 //\"circle-stroke-width\": 1,\n            //\"circle-stroke-color\": \"#fff\"\n\n          }\n        });\n      });\n    });\n  };\n};\n\nexport default initMap;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/map/mapUtils.js"],"names":["statesSource","dialysisIcon","hospitalIcon","nursingIcon","dialysisStableIcon","hospitalStableIcon","nursingStableIcon","dialysisAlertedIcon","hospitalAlertedIcon","nursingAlertedIcon","dialysisCriticalIcon","hospitalCriticalIcon","nursingCriticalIcon","param","facility","minZoom","cluster","maxZoom","threshZoom","initMap","map","facilities","stableFacilities","alertedFacilities","criticalFacilities","forEach","e","severity","push","on","addImages","initStates","initFacilities","Array","name","icon","loadImage","err","img","addImage","getSource","addSource","type","data","addLayer","id","source","paint","filter","color","sourceName","features","facility_id","longitude","latitude","properties","geometry","coordinates","clusterMaxZoom","clusterRadius","layerName","split","toLowerCase","minzoom","layout","maxzoom"],"mappings":"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","sourcesContent":["import statesSource from '../../assets/featureCollections/states.json'\n\nimport dialysisIcon from '../../assets/images/markers/dialysis-blue.png'\nimport hospitalIcon from '../../assets/images/markers/hospital-blue.png'\nimport nursingIcon from '../../assets/images/markers/nursing-blue.png'\nimport dialysisStableIcon from '../../assets/images/markers/dialysis-green.png'\nimport hospitalStableIcon from '../../assets/images/markers/hospital-green.png'\nimport nursingStableIcon from '../../assets/images/markers/nursing-green.png'\nimport dialysisAlertedIcon from '../../assets/images/markers/dialysis-yellow.png'\nimport hospitalAlertedIcon from '../../assets/images/markers/hospital-yellow.png'\nimport nursingAlertedIcon from '../../assets/images/markers/nursing-yellow.png'\nimport dialysisCriticalIcon from '../../assets/images/markers/dialysis-red.png'\nimport hospitalCriticalIcon from '../../assets/images/markers/hospital-red.png'\nimport nursingCriticalIcon from '../../assets/images/markers/nursing-red.png'\n\nconst param = {\n  facility: {\n    minZoom: 8,\n  },\n  cluster: {\n    maxZoom: 8,\n    threshZoom: 7,\n    // threshZoom: 14,\n  }\n};\n\nconst initMap = (map, facilities) => {\n  // split facilities by severity\n  const stableFacilities = []\n  const alertedFacilities = []\n  const criticalFacilities = []\n  facilities.forEach(e => {\n    switch (e.severity) {\n      case 'stable':\n        stableFacilities.push(e)\n        break\n      case 'alerted':\n        alertedFacilities.push(e)\n        break\n      case 'critical':\n        criticalFacilities.push(e)\n        break\n      default:\n        break\n    }\n  })\n\n  map.on('load', function() {\n    addImages()\n    initStates()\n    initFacilities()\n  })\n\n  const addImages = () => {\n    Array(\n      ['dialysis-stable', dialysisStableIcon],\n      ['hospital-stable', hospitalStableIcon],\n      ['nursing-stable', nursingStableIcon],\n      ['dialysis-alerted', dialysisAlertedIcon],\n      ['hospital-alerted', hospitalAlertedIcon],\n      ['nursing-alerted', nursingAlertedIcon],\n      ['dialysis-critical', dialysisCriticalIcon],\n      ['hospital-critical', hospitalCriticalIcon],\n      ['nursing-critical', nursingCriticalIcon]\n    ).forEach(([name, icon]) => {\n      map.loadImage(icon, (err, img) => {\n        map.addImage(name, img)\n      })\n    })\n  }\n\n  const initStates = () => {\n    if (!map.getSource('states'))\n      map.addSource('states', {\n        type: 'geojson',\n        data: statesSource //'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'\n      })\n\n    map.addLayer({\n      id: 'state-fills',\n      type: 'fill',\n      source: 'states',\n      paint: {\n        'fill-opacity': 0\n      }\n    })\n\n    map.addLayer({\n      id: 'selected-fill',\n      type: 'fill',\n      source: 'states',\n      filter: ['!', true],\n      paint: {\n        'fill-color': '#627BC1',\n        'fill-opacity': 0.5\n      }\n    })\n\n    map.addLayer({\n      id: 'selected-border',\n      type: 'line',\n      source: 'states',\n      filter: ['!', true],\n      paint: {\n        'line-color': '#627BC1',\n        'line-width': 2\n      }\n    })\n  }\n\n  const initFacilities = () => {\n    // 'cluster' option to true. GL-JS will add the point_count property to your source data.\n    Array(\n      ['stable', stableFacilities, '#009a65'],\n      ['alerted', alertedFacilities, '#f9c13b'],\n      ['critical', criticalFacilities, '#eb1c25']\n    ).forEach(([severity, facilities, color]) => {\n      /* Add Sources */\n      const sourceName = `${severity}-facilities`\n      if (!map.getSource(sourceName))\n        map.addSource(sourceName, {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: facilities.map(\n              ({ facility_id, type, longitude, latitude }) => ({\n                type: 'Feature',\n                properties: { facility_id, type },\n                geometry: {\n                  type: 'Point',\n                  coordinates: [longitude, latitude]\n                }\n              })\n            )\n          },\n          cluster: true,\n          clusterMaxZoom: param.cluster.threshZoom, // Max zoom to cluster points on\n          clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        })\n\n      /* Add Layers */\n      Array('Dialysis Facility', 'Hospital', 'Nursing Home').forEach(type => {\n        const layerName = `${type.split(' ')[0].toLowerCase()}-${severity}`\n\n        map.addLayer({\n          id: `${layerName}-facilities`,\n          type: 'symbol',\n          source: sourceName,\n          minzoom: param.facility.minZoom,\n          // filter: ['all', ['!', ['has', 'point_count']], ['==', 'type', type]],\n          filter: ['==', 'type', type],\n          layout: {\n            // visibility: 'visible',\n            'icon-image': layerName,\n            'icon-size': 0.5,\n            'icon-padding': 0.5,\n            'icon-allow-overlap': true\n          }\n        })\n\n        map.addLayer({\n          id: `${layerName}-cluster-halos`,\n          type: 'circle',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            'circle-color': color,\n            'circle-opacity': 0.25,\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              25,\n              5, //in cluster\n              30,\n              10, //in cluster\n              35,\n              15, //in cluster\n              40\n            ]\n          }\n        })\n\n        map.addLayer({\n          id: `${layerName}-clusters`,\n          type: 'circle',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            'circle-color': color,\n            // 'circle-opacity': 0.2,\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              20,\n              5, //in cluster\n              25,\n              10, //in cluster\n              30,\n              15, //in cluster\n              35\n            ]\n          }\n        })\n\n        map.addLayer({\n          id: `${layerName}-cluster-count`,\n          type: 'symbol',\n          source: sourceName,\n          filter: ['has', 'point_count'],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }\n        })\n\n        map.addLayer({\n          id: `${layerName}-unclustered-point`,\n          type: 'circle',\n          source: sourceName,\n          filter: ['!', ['has', 'point_count']],\n          maxzoom: param.cluster.maxZoom,\n          // maxzoom: 8,\n          paint: {\n            'circle-color': color,\n            'circle-radius': 5.3,\n            //\"circle-stroke-width\": 1,\n            //\"circle-stroke-color\": \"#fff\"\n          }\n        });\n      })\n    })\n  }\n\n}\n\nexport default initMap\n"]},"metadata":{},"sourceType":"module"}