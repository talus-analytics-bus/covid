{"ast":null,"code":"import _slicedToArray from \"/Users/trae/git_repositories/measles/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/trae/git_repositories/measles/src/components/views/details/Details.tsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport SimpleMap from '../../map/SimpleMap';\nimport Content from './content/Content'; // Utilities (date formatting, etc.)\n\nimport Util from '../../../components/misc/Util.js';\nimport classNames from 'classnames';\nimport styles from './details.module.scss';\nimport dialysisIcon from '../../../assets/images/markers/dialysis-blue.png';\nimport hospitalIcon from '../../../assets/images/markers/hospital-blue.png';\nimport nursingIcon from '../../../assets/images/markers/nursing-blue.png'; // If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\n\nvar DEMO_DATE = process.env.DEMO_DATE;\n\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00';\n}\n\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // import { facility } from '../../../types/index'\n\nconst API_BASE = process.env.REACT_APP_API_BASE_URL; // Function get get facility icon, H, N, or D\n\nconst getFacilityIcon = facility => {\n  switch (facility.type) {\n    case 'Nursing Home':\n      return nursingIcon;\n      break;\n\n    case 'Hospital':\n      return hospitalIcon;\n      break;\n\n    case 'Dialysis Facility':\n      return dialysisIcon;\n      break;\n  }\n}; // FC for Details.\n\n\nconst Details = props => {\n  // Manage loading state (don't show if loading, etc.)\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loading = _React$useState2[0],\n        setLoading = _React$useState2[1]; // Get data for current facility.\n\n\n  const facility = props.selectedFacility; // Submitted details, used in first table.\n\n  const _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        detailsUpdates = _React$useState4[0],\n        setDetails = _React$useState4[1]; // Alert history, used in second table.\n\n\n  const _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        alertHistory = _React$useState6[0],\n        setAlerts = _React$useState6[1]; // Status history, used to determine datetime stamp for facility status.\n\n\n  const _React$useState7 = React.useState([]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        statusHistory = _React$useState8[0],\n        setStatusHistory = _React$useState8[1]; // Function to make API calls to get data for the four state variables above.\n\n\n  const getDetailsData = async () => {\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const res1 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts/history\"));\n    const res2 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/details\"));\n    const alertsUrl = DEMO_DATE !== undefined ? \"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts?date=\").concat(DEMO_DATE) : \"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/alerts\");\n    const res3 = await axios(alertsUrl);\n    const res4 = await axios(\"\".concat(API_BASE, \"/facilities/\").concat(props.facility_id, \"/status/history\")); // Update the state variables with the response data.\n\n    setAlerts(res1.data.data);\n    setDetails(res2.data.data);\n    const sortedAlerts = res3.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n    setStatusHistory(res4.data.data); // Set state to loaded so JSX renders.\n\n    setLoading(false);\n  }; // Effect hook to load API data.\n\n\n  React.useEffect(() => {\n    getDetailsData();\n  }, []); // If loading do not show JSX content.\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  });else {\n    // Get datetime stamp for facility status and other elements\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date(); // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n\n    const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime).filter(d => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true;\n    });\n    const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime).filter(d => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true;\n    }); // Return JSX for details.\n\n    return React.createElement(\"div\", {\n      className: styles.details,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classNames(styles.mapTitle, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: styles.facilityIcon,\n      src: getFacilityIcon(facility),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: styles.facilityName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, facility.name), React.createElement(\"div\", {\n      className: classNames(styles.location, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, facility.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, facility.city, \", \", facility.state, \" \", facility.zip), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, facility.telephone))), React.createElement(\"div\", {\n      className: classNames(styles.detailsTitle, styles[facility.severity]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Facility status\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, Util.formatDate(now))))), React.createElement(Link, {\n      to: '/submit/update/' + facility.facility_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Update status\", React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"edit\")))), React.createElement(SimpleMap, {\n      selectedFacility: facility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(Content, {\n      alertHistory: alertHistory,\n      detailsUpdates: detailsUpdates,\n      selectedFacility: facility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default Details;","map":{"version":3,"sources":["/Users/trae/git_repositories/measles/src/components/views/details/Details.tsx"],"names":["React","axios","Link","SimpleMap","Content","Util","classNames","styles","dialysisIcon","hospitalIcon","nursingIcon","DEMO_DATE","process","env","now","undefined","Date","API_BASE","REACT_APP_API_BASE_URL","getFacilityIcon","facility","type","Details","props","useState","loading","setLoading","selectedFacility","detailsUpdates","setDetails","alertHistory","setAlerts","statusHistory","setStatusHistory","getDetailsData","res1","facility_id","res2","alertsUrl","res3","res4","data","sortedAlerts","sort","sortByAlertId","sortByDatetime","useEffect","timeThreshold","details","sortByDetailsId","filter","d","statusDate","effective_dtm","alerts","mapTitle","severity","facilityIcon","facilityName","name","location","address","city","state","zip","telephone","detailsTitle","formatDate"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Popup from 'reactjs-popup'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nimport SimpleMap from '../../map/SimpleMap'\nimport Content from './content/Content'\n\n// Utilities (date formatting, etc.)\nimport Util from '../../../components/misc/Util.js'\n\nimport classNames from 'classnames'\nimport styles from './details.module.scss'\nimport dialysisIcon from '../../../assets/images/markers/dialysis-blue.png'\nimport hospitalIcon from '../../../assets/images/markers/hospital-blue.png'\nimport nursingIcon from '../../../assets/images/markers/nursing-blue.png'\n\n// If DEMO_DATE exists, use it (frames all data in site relative to the demo\n// date that is specified). Otherwise, today's date will be used (\"now\").\nvar DEMO_DATE = process.env.DEMO_DATE\nif (typeof DEMO_DATE === 'undefined') {\n  DEMO_DATE = '2025-07-04T23:56:00'\n}\nconst now = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n// import { facility } from '../../../types/index'\nconst API_BASE = process.env.REACT_APP_API_BASE_URL;\n\n// Function get get facility icon, H, N, or D\nconst getFacilityIcon = (facility: any) => {\n  switch (facility.type) {\n    case 'Nursing Home':\n      return nursingIcon;\n      break;\n    case 'Hospital':\n      return hospitalIcon;\n      break;\n    case 'Dialysis Facility':\n      return dialysisIcon;\n      break;\n  }\n};\n\n// FC for Details.\nconst Details = (props: any) => {\n\n  // Manage loading state (don't show if loading, etc.)\n  const [loading, setLoading] = React.useState(true)\n\n  // Get data for current facility.\n  const facility = props.selectedFacility;\n\n  // Submitted details, used in first table.\n  const [detailsUpdates, setDetails] = React.useState();\n\n  // Alert history, used in second table.\n  const [alertHistory, setAlerts] = React.useState();\n\n  // Status history, used to determine datetime stamp for facility status.\n  const [statusHistory, setStatusHistory] = React.useState([])\n\n  // Function to make API calls to get data for the four state variables above.\n  const getDetailsData = async () => {\n    // Make API calls to get state variable data from the appropriate endpoints.\n    const res1 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/alerts/history`\n    )\n    const res2 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/details`\n    )\n    const alertsUrl = DEMO_DATE !== undefined ?\n      `${API_BASE}/facilities/${props.facility_id}/alerts?date=${DEMO_DATE}` :\n      `${API_BASE}/facilities/${props.facility_id}/alerts`;\n    const res3 = await axios(alertsUrl);\n    const res4 = await axios(\n      `${API_BASE}/facilities/${props.facility_id}/status/history`\n    );\n\n    // Update the state variables with the response data.\n    setAlerts(res1.data.data);\n    setDetails(res2.data.data);\n    const sortedAlerts = res3.data.data.sort(Util.sortByAlertId).sort(Util.sortByDatetime);\n    setStatusHistory(res4.data.data);\n\n    // Set state to loaded so JSX renders.\n    setLoading(false);\n  }\n\n  // Effect hook to load API data.\n  React.useEffect(() => {\n    getDetailsData();\n  }, [])\n\n  // If loading do not show JSX content.\n  if (loading) return (<div></div>);\n  else {\n    // Get datetime stamp for facility status and other elements\n    const timeThreshold = DEMO_DATE !== undefined ? new Date(DEMO_DATE) : new Date();\n\n    // Ignore details and alerts that are after the demo date or today's date;\n    // do not show them in tables.\n    const details = detailsUpdates.sort(Util.sortByDetailsId).sort(Util.sortByDatetime)\n      .filter((d: any) => {\n        const statusDate = new Date(d.effective_dtm);\n        if (timeThreshold < statusDate) return false;\n        return true\n      });\n    const alerts = alertHistory.sort(Util.sortByAlertId).sort(Util.sortByDatetime)\n    .filter((d: any) => {\n      const statusDate = new Date(d.effective_dtm);\n      if (timeThreshold < statusDate) return false;\n      return true\n    });\n\n    // Return JSX for details.\n    return (<div className={styles.details}>\n      <div className={classNames(styles.mapTitle, styles[facility.severity])}>\n        <img className={styles.facilityIcon} src={getFacilityIcon(facility)} />\n        <p className={styles.facilityName}>{facility.name}</p>\n        <div className={classNames(styles.location, styles[facility.severity])}>\n          <p>{facility.address}</p>\n          <p>{facility.city}, {facility.state} {facility.zip}</p>\n          <p>{facility.telephone}</p>\n        </div>\n      </div>\n      <div className={classNames(styles.detailsTitle, styles[facility.severity])}>\n        <div>\n          <div>\n            <p>\n              <span>Facility status</span>\n            </p>\n            <p>\n              <span>{Util.formatDate(now)}</span>\n            </p>\n          </div>\n        </div>\n\n        <Link to={'/submit/update/' + facility.facility_id}>\n          <button>\n            Update status\n            <i className='material-icons'>edit</i>\n          </button>\n        </Link>\n\n      </div>\n      <SimpleMap selectedFacility={facility}/>\n      <Content\n        alertHistory={alertHistory}\n        detailsUpdates={detailsUpdates}\n        selectedFacility={facility}/>\n    </div>);\n  }\n};\n\nexport default Details\n"]},"metadata":{},"sourceType":"module"}